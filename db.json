{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next_v7.8/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next_v7.8/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/16-09-07C-Language for realizing shutdown.md","hash":"c7cb858be9648728d8a520594313ab98c85651ad","modified":1610286140701},{"_id":"source/_posts/C语言中memset()用法.md","hash":"8d01e4a42567c07dce92ef2bd173aed4615a3dd5","modified":1610286140701},{"_id":"source/_posts/myFirstBlog.md","hash":"7a55280567e8cddfe2389051ea9bf29494fcd3a6","modified":1610286140703},{"_id":"source/_posts/动态分配内存-四道题-你能做对吗？.md","hash":"0ad9041f6ad22a24c03a7e406f5b47be4d7ef74c","modified":1610286140703},{"_id":"source/_posts/hello-world.md","hash":"f212d288b5790d4b0c65c6c0efb845933d71bdca","modified":1610286140702},{"_id":"source/_posts/栈的实现及其小应用-括号匹配（C++版）.md","hash":"e76505fd591ce7f1df4613beed39d31cfa77804b","modified":1610286140704},{"_id":"source/_posts/算法艺术之快速排序.md","hash":"6f8403110cbb19217d12e317f0fd7908771c4356","modified":1610286140705},{"_id":"source/_posts/算法艺术之排序学习心得And总结.md","hash":"714052609695323a14c6b9621887e2e1d89377af","modified":1610286140706},{"_id":"source/_posts/字符串的一些库函数实现代码.md","hash":"cd9b81e60f20780c78817ca53b48cf7f64761d5b","modified":1610286140703},{"_id":"source/_posts/算法艺术之希尔排序.md","hash":"4391aa05da04a7a0a76c06fbec63b341f3a80cd1","modified":1610286140704},{"_id":"source/_posts/算法艺术之归并排序.md","hash":"4419ee892a243b43b90d360828bc49f52c86496f","modified":1610286140705},{"_id":"source/_posts/算法艺术之插入排序.md","hash":"2dbf8452218bb3fc9b39f2c2a9f40e419512e622","modified":1610286140707},{"_id":"source/_posts/线性顺序表的实现（C语言版）.md","hash":"2be653d017762d05f87fb278e19ace83839767f9","modified":1610286140708},{"_id":"source/_posts/隐式类型转换.md","hash":"e1fb8be327cce1b953ca15f3e45d1c34a7eb22f0","modified":1610286140709},{"_id":"source/tags/index.md","hash":"880e973a71a2cffd24b5186dacd59fae1a9e0f70","modified":1610286140711},{"_id":"source/about/index.md","hash":"38ea793cd09c8ab4c4c86f00060507fdd1bcef9d","modified":1610286140710},{"_id":"source/categories/index.md","hash":"8b800f2144fd9cac2e241ec473592d9695b47fb7","modified":1610286140711},{"_id":"themes/next_v7.8/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1599023145000},{"_id":"themes/next_v7.8/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1599023145000},{"_id":"themes/next_v7.8/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1599023145000},{"_id":"themes/next_v7.8/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1599023145000},{"_id":"themes/next_v7.8/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1599023145000},{"_id":"themes/next_v7.8/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1599023145000},{"_id":"themes/next_v7.8/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1599023145000},{"_id":"themes/next_v7.8/_config.yml","hash":"ccd41ed5fc3027f81834c30fe4b67c0dac742dea","modified":1610978435943},{"_id":"themes/next_v7.8/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1599023145000},{"_id":"themes/next_v7.8/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1599023145000},{"_id":"themes/next_v7.8/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1599023145000},{"_id":"themes/next_v7.8/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1599023145000},{"_id":"themes/next_v7.8/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1599023145000},{"_id":"themes/next_v7.8/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1599023145000},{"_id":"themes/next_v7.8/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1599023145000},{"_id":"themes/next_v7.8/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1599023145000},{"_id":"themes/next_v7.8/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1599023145000},{"_id":"themes/next_v7.8/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1599023145000},{"_id":"themes/next_v7.8/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1599023145000},{"_id":"themes/next_v7.8/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1599023145000},{"_id":"themes/next_v7.8/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1599023145000},{"_id":"themes/next_v7.8/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1599023145000},{"_id":"themes/next_v7.8/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1599023145000},{"_id":"themes/next_v7.8/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1599023145000},{"_id":"themes/next_v7.8/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1599023145000},{"_id":"themes/next_v7.8/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1599023145000},{"_id":"themes/next_v7.8/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1599023145000},{"_id":"themes/next_v7.8/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1599023145000},{"_id":"themes/next_v7.8/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1599023145000},{"_id":"themes/next_v7.8/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1599023145000},{"_id":"themes/next_v7.8/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1599023145000},{"_id":"themes/next_v7.8/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1599023145000},{"_id":"themes/next_v7.8/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1599023145000},{"_id":"themes/next_v7.8/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1599023145000},{"_id":"themes/next_v7.8/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1599023145000},{"_id":"themes/next_v7.8/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1599023145000},{"_id":"themes/next_v7.8/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1599023145000},{"_id":"themes/next_v7.8/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1599023145000},{"_id":"themes/next_v7.8/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1599023145000},{"_id":"themes/next_v7.8/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1599023145000},{"_id":"themes/next_v7.8/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1599023145000},{"_id":"themes/next_v7.8/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1599023145000},{"_id":"themes/next_v7.8/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1599023145000},{"_id":"themes/next_v7.8/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1599023145000},{"_id":"themes/next_v7.8/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1599023145000},{"_id":"themes/next_v7.8/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1599023145000},{"_id":"themes/next_v7.8/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1599023145000},{"_id":"themes/next_v7.8/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1599023145000},{"_id":"themes/next_v7.8/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1599023145000},{"_id":"themes/next_v7.8/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1599023145000},{"_id":"themes/next_v7.8/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1599023145000},{"_id":"themes/next_v7.8/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1599023145000},{"_id":"themes/next_v7.8/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1599023145000},{"_id":"themes/next_v7.8/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1599023145000},{"_id":"themes/next_v7.8/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1599023145000},{"_id":"themes/next_v7.8/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1599023145000},{"_id":"themes/next_v7.8/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1599023145000},{"_id":"themes/next_v7.8/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1599023145000},{"_id":"themes/next_v7.8/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1599023145000},{"_id":"themes/next_v7.8/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1599023145000},{"_id":"themes/next_v7.8/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1599023145000},{"_id":"themes/next_v7.8/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1599023145000},{"_id":"themes/next_v7.8/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1599023145000},{"_id":"themes/next_v7.8/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1599023145000},{"_id":"themes/next_v7.8/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1599023145000},{"_id":"themes/next_v7.8/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1599023145000},{"_id":"themes/next_v7.8/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1599023145000},{"_id":"themes/next_v7.8/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1599023145000},{"_id":"themes/next_v7.8/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1599023145000},{"_id":"themes/next_v7.8/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1599023145000},{"_id":"themes/next_v7.8/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1599023145000},{"_id":"themes/next_v7.8/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1599023145000},{"_id":"themes/next_v7.8/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1599023145000},{"_id":"themes/next_v7.8/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1599023145000},{"_id":"themes/next_v7.8/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1599023145000},{"_id":"themes/next_v7.8/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1599023145000},{"_id":"themes/next_v7.8/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1599023145000},{"_id":"themes/next_v7.8/source/_data/next.yml","hash":"872cdfbfe32a52540b76d2deab1d0ae43ee73406","modified":1610978440801},{"_id":"themes/next_v7.8/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1599023145000},{"_id":"themes/next_v7.8/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1599023145000},{"_id":"themes/next_v7.8/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1599023145000},{"_id":"themes/next_v7.8/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1599023145000},{"_id":"themes/next_v7.8/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1599023145000},{"_id":"themes/next_v7.8/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1599023145000},{"_id":"themes/next_v7.8/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1599023145000},{"_id":"themes/next_v7.8/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1599023145000},{"_id":"themes/next_v7.8/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1599023145000},{"_id":"themes/next_v7.8/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1599023145000},{"_id":"themes/next_v7.8/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1599023145000},{"_id":"themes/next_v7.8/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1599023145000},{"_id":"themes/next_v7.8/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1599023145000},{"_id":"themes/next_v7.8/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1599023145000},{"_id":"themes/next_v7.8/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1599023145000},{"_id":"themes/next_v7.8/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1599023145000},{"_id":"themes/next_v7.8/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1599023145000},{"_id":"themes/next_v7.8/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1599023145000},{"_id":"themes/next_v7.8/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1599023145000},{"_id":"themes/next_v7.8/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1599023145000},{"_id":"public/search.xml","hash":"fc34827c80b70159d94dc547f1d24b591992048f","modified":1610978458368},{"_id":"public/categories/index.html","hash":"724c8c857855a77ed4544cf875d7fdc419c2ccfb","modified":1610978458368},{"_id":"public/tags/index.html","hash":"9db0e09bf596262158c92dbacbcbb286a430da56","modified":1610978458368},{"_id":"public/2021/01/10/hello-world/index.html","hash":"fde6afb13567420344a40be4dc078d6f2abf60a8","modified":1610978458368},{"_id":"public/about/index.html","hash":"ce69b8da5d99d2dd01a30790bf6a9d211fcdf69e","modified":1610978458368},{"_id":"public/tags/C语言/index.html","hash":"b3ebf3423fe62f1c198c6f2eb9782e88e27e52eb","modified":1610978458368},{"_id":"public/tags/清新之比/index.html","hash":"215a780ce8ff2677ab751236ca5746dbb3213e68","modified":1610978458368},{"_id":"public/tags/数据结构/index.html","hash":"8c33f1261a4a74435bfdd9f95428443dfa5bedf0","modified":1610978458368},{"_id":"public/tags/算法/index.html","hash":"4bd6783511eff5a2cb300fcfb2246206f31d1eea","modified":1610978458368},{"_id":"public/tags/C-C/index.html","hash":"8e34e4503d064c30f8ba0e21baf3f2c03497d6f2","modified":1610978458368},{"_id":"public/archives/index.html","hash":"785910170ef1ab8673fc0933207db6e38354a696","modified":1610978458368},{"_id":"public/archives/page/2/index.html","hash":"64e19e573a5658ba18eaca528f8d5deb56de8a9e","modified":1610978458368},{"_id":"public/archives/2016/index.html","hash":"de1de22baeb42fdce90d388fd2435c94179932bc","modified":1610978458368},{"_id":"public/archives/2016/page/2/index.html","hash":"c8d176f551677c5d2361c26f61bb3879fe1388fa","modified":1610978458368},{"_id":"public/archives/2016/09/index.html","hash":"8160ecb9dbffab6b7ae5e206ff541c2ae497c494","modified":1610978458368},{"_id":"public/archives/2016/09/page/2/index.html","hash":"30084d39587fe506e88d25c9bc04781e8840dedb","modified":1610978458368},{"_id":"public/archives/2016/10/index.html","hash":"155f8302e6117d424cbca4d31172d6c45c7bacba","modified":1610978458368},{"_id":"public/2016/10/08/字符串的一些库函数实现代码/index.html","hash":"2929e095ef705f1c7ccb8a7345f73c66b6b35fff","modified":1610978458368},{"_id":"public/2016/09/24/算法艺术之排序学习心得And总结/index.html","hash":"4b2e21a77cf9a336d331d3515086db52a4777ba0","modified":1610978458368},{"_id":"public/2016/09/24/算法艺术之希尔排序/index.html","hash":"b7c1b15635c1f073ee1b685d83cbce55191fc402","modified":1610978458368},{"_id":"public/2016/09/23/算法艺术之插入排序/index.html","hash":"a20af0358a1400eede2934d7304252cf9b9f7c94","modified":1610978458368},{"_id":"public/2016/09/23/算法艺术之归并排序/index.html","hash":"8d4b3991fb1423a78693006b219dfdd34af17c83","modified":1610978458368},{"_id":"public/2016/09/23/算法艺术之快速排序/index.html","hash":"f66f810c47fc904b9f2f34ea53dfb1eb2486d793","modified":1610978458368},{"_id":"public/2016/09/12/C语言中memset()用法/index.html","hash":"a244cc6f1780c0b1f3ed4a22681da41061cf0698","modified":1610978458368},{"_id":"public/2016/09/12/动态分配内存-四道题-你能做对吗？/index.html","hash":"34485d12a1d1237e81252f095155267c14814ee3","modified":1610978458368},{"_id":"public/2016/09/12/隐式类型转换/index.html","hash":"2e2a35653e23e37e6402acafac9ea704642b975e","modified":1610978458368},{"_id":"public/2016/09/10/栈的实现及其小应用-括号匹配（C++版）/index.html","hash":"947b6421cdcda469e48c40174697ac1e68dc554f","modified":1610978458368},{"_id":"public/2016/09/09/线性顺序表的实现（C语言版）/index.html","hash":"7a5eba7f11cd1c7679ecc984dfa8ce1faacdbb68","modified":1610978458368},{"_id":"public/2016/09/06/myFirstBlog/index.html","hash":"e7af0736935c32504714c41639bd0985caa74722","modified":1610978458368},{"_id":"public/2016/09/07/16-09-07C-Language for realizing shutdown/index.html","hash":"2a416a9223a1dee4ba0cebabb222ed913448e88c","modified":1610978458368},{"_id":"public/index.html","hash":"bd77f1c3ea10f4e09e8428a9be70e300d6f9b29e","modified":1610978458368},{"_id":"public/page/2/index.html","hash":"019c1ee3b84549c120f536123a36f1f5fef50773","modified":1610978458368},{"_id":"public/archives/2021/index.html","hash":"a919951a1bca85171b3aac5f669a3a27aee966b3","modified":1610978458368},{"_id":"public/archives/2021/01/index.html","hash":"1a6fbcca17b8cf6983fae4a8dc430344698c48ee","modified":1610978458368},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610978458368},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1610978458368},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1610978458368},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1610978458368},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1610978458368},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1610978458368},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1610978458368},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1610978458368},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1610978458368},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610978458368},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610978458368},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1610978458368},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1610978458368},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1610978458368},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1610978458368},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1610978458368},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1610978458368},{"_id":"public/css/main.css","hash":"baa81f635d1b941f1c3622231cd75d057f3457f2","modified":1610978458368},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1610978458368},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1610978458368},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1610978458368},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1610978458368},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1610978458368},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1610978458368},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1610978458368},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1610978458368},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1610978458368},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1610978458368},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1610978458368}],"Category":[],"Data":[],"Page":[{"title":"分类","date":"2020-12-24T12:51:37.000Z","type":"categories","comments":0,"sitemap":false,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-12-24 20:51:37\ntype: categories\ncomments: false\nsitemap: false\n---\n","updated":"2021-01-10T13:42:20.711Z","path":"categories/index.html","layout":"page","_id":"ckk2mzabl00003clwag3l8n7p","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"关于","date":"2020-12-24T12:54:47.000Z","type":"about","comments":0,"sitemap":false,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2020-12-24 20:54:47\ntype: about\ncomments: false\nsitemap: false\n---\n","updated":"2021-01-10T13:42:20.710Z","path":"about/index.html","layout":"page","_id":"ckk2mzabp00023clwg7pg8fr3","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2020-12-24T12:47:36.000Z","type":"tags","comments":1,"sitemap":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-12-24 20:47:36\ntype: tags\ncomments: true\nsitemap: false\n---\n","updated":"2021-01-10T13:42:20.711Z","path":"tags/index.html","layout":"page","_id":"ckk2mzabs00053clwh32e4x9b","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"C语言实现定时关机小程序","date":"2016-09-07T14:38:39.000Z","_content":"------\n\n### 程序功能说明\n> - 输入1可实现自定义10分钟内的定时关机\n> - 输入2可实现立即关机\n> - 输入3可实现注销计算机\n> - 输入0可退出程序\n<!--more-->\n\n### 程序运行截图\n![](http://od191c801.bkt.clouddn.com/C%E5%85%B3%E6%9C%BA%E7%A8%8B%E5%BA%8F.png)\n\n### 代码\n```c\n/**********关于system(\"color 参数\")配置从控制台颜色************\n0 = 黑色    8 = 灰色    1 = 淡蓝      9 = 蓝色\n2 = 淡绿    A = 绿色    3 = 湖蓝      B = 淡浅绿  \nC = 红色    4 = 淡红    5 = 紫色      D = 淡紫  \n6 = 黄色    E = 淡黄    7 = 白色      F = 亮白\n****************************************************************/\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint main()\n{\n    char cmd[20]=\"shutdown -s -t \";\n    char t[5]=\"0\";\n    int c;\n\n    system(\"title C语言关机程序\");  //设置cmd窗口标题\n    system(\"mode con cols=48 lines=25\");  //窗口宽度高度 \n    system(\"color f0\");  ////f为背景色，0为前景色\n    system(\"date /T\");//显示系统日期\n    system(\"TIME /T\");//显示系统时间\n\n    printf(\"----------- C语言关机程序 -----------\\n\");\n    printf(\"1.实现10分钟内的定时关闭计算机\\n\");\n    printf(\"2.立即关闭计算机\\n\");\n    printf(\"3.注销计算机\\n\");\n    printf(\"0.退出系统\\n\");\n    printf(\"-------------------------------------\\n\");\n\n    scanf(\"%d\",&c);\n    switch(c) {\n        case 1:\n            printf(\"您想在多少秒后自动关闭计算机？（0~600）\\n\");\n            scanf(\"%s\",t);\n            system(strcat(cmd,t));\n            break;\n        case 2:\n            system(\"shutdown -p\");\n            break;\n        case 3:\n            system(\"shutdown -l\");\n            break;\n        case 0:\n            break;\n        default:\n            printf(\"Error!\\n\");\n    }\n    system(\"pause\");\n    return 0;\n}\n```\n### 小总结\n> - 要点就是system()函数的运用和cmd命令的了解\n> - 函数原型int system(const char * string);\n>- strcat()函数原型char *strcat(char *dest, const char *src);\n>> strcat() 会将参数 src 字符串复制到参数 dest 所指的字符串尾部；dest 最后的结束字符 NULL 会被覆盖掉，并在连接后的字符串的尾部再增加一个 NULL。\n\n### 联系 ###\n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n-------------------------2016.09.07--------------------------------\n","source":"_posts/16-09-07C-Language for realizing shutdown.md","raw":"---\ntitle: C语言实现定时关机小程序\ndate: 2016-09-07 22:38:39\ntags:\n- C语言\n---\n------\n\n### 程序功能说明\n> - 输入1可实现自定义10分钟内的定时关机\n> - 输入2可实现立即关机\n> - 输入3可实现注销计算机\n> - 输入0可退出程序\n<!--more-->\n\n### 程序运行截图\n![](http://od191c801.bkt.clouddn.com/C%E5%85%B3%E6%9C%BA%E7%A8%8B%E5%BA%8F.png)\n\n### 代码\n```c\n/**********关于system(\"color 参数\")配置从控制台颜色************\n0 = 黑色    8 = 灰色    1 = 淡蓝      9 = 蓝色\n2 = 淡绿    A = 绿色    3 = 湖蓝      B = 淡浅绿  \nC = 红色    4 = 淡红    5 = 紫色      D = 淡紫  \n6 = 黄色    E = 淡黄    7 = 白色      F = 亮白\n****************************************************************/\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n\nint main()\n{\n    char cmd[20]=\"shutdown -s -t \";\n    char t[5]=\"0\";\n    int c;\n\n    system(\"title C语言关机程序\");  //设置cmd窗口标题\n    system(\"mode con cols=48 lines=25\");  //窗口宽度高度 \n    system(\"color f0\");  ////f为背景色，0为前景色\n    system(\"date /T\");//显示系统日期\n    system(\"TIME /T\");//显示系统时间\n\n    printf(\"----------- C语言关机程序 -----------\\n\");\n    printf(\"1.实现10分钟内的定时关闭计算机\\n\");\n    printf(\"2.立即关闭计算机\\n\");\n    printf(\"3.注销计算机\\n\");\n    printf(\"0.退出系统\\n\");\n    printf(\"-------------------------------------\\n\");\n\n    scanf(\"%d\",&c);\n    switch(c) {\n        case 1:\n            printf(\"您想在多少秒后自动关闭计算机？（0~600）\\n\");\n            scanf(\"%s\",t);\n            system(strcat(cmd,t));\n            break;\n        case 2:\n            system(\"shutdown -p\");\n            break;\n        case 3:\n            system(\"shutdown -l\");\n            break;\n        case 0:\n            break;\n        default:\n            printf(\"Error!\\n\");\n    }\n    system(\"pause\");\n    return 0;\n}\n```\n### 小总结\n> - 要点就是system()函数的运用和cmd命令的了解\n> - 函数原型int system(const char * string);\n>- strcat()函数原型char *strcat(char *dest, const char *src);\n>> strcat() 会将参数 src 字符串复制到参数 dest 所指的字符串尾部；dest 最后的结束字符 NULL 会被覆盖掉，并在连接后的字符串的尾部再增加一个 NULL。\n\n### 联系 ###\n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n-------------------------2016.09.07--------------------------------\n","slug":"16-09-07C-Language for realizing shutdown","published":1,"updated":"2021-01-10T13:42:20.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzabn00013clw6b0p6xpl","content":"<hr>\n<h3 id=\"程序功能说明\"><a href=\"#程序功能说明\" class=\"headerlink\" title=\"程序功能说明\"></a>程序功能说明</h3><blockquote>\n<ul>\n<li>输入1可实现自定义10分钟内的定时关机</li>\n<li>输入2可实现立即关机</li>\n<li>输入3可实现注销计算机</li>\n<li>输入0可退出程序</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"程序运行截图\"><a href=\"#程序运行截图\" class=\"headerlink\" title=\"程序运行截图\"></a>程序运行截图</h3><p><img src=\"http://od191c801.bkt.clouddn.com/C%E5%85%B3%E6%9C%BA%E7%A8%8B%E5%BA%8F.png\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********关于system(&quot;color 参数&quot;)配置从控制台颜色************</span></span><br><span class=\"line\"><span class=\"comment\">0 = 黑色    8 = 灰色    1 = 淡蓝      9 = 蓝色</span></span><br><span class=\"line\"><span class=\"comment\">2 = 淡绿    A = 绿色    3 = 湖蓝      B = 淡浅绿  </span></span><br><span class=\"line\"><span class=\"comment\">C = 红色    4 = 淡红    5 = 紫色      D = 淡紫  </span></span><br><span class=\"line\"><span class=\"comment\">6 = 黄色    E = 淡黄    7 = 白色      F = 亮白</span></span><br><span class=\"line\"><span class=\"comment\">****************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cmd[<span class=\"number\">20</span>]=<span class=\"string\">&quot;shutdown -s -t &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> t[<span class=\"number\">5</span>]=<span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c;</span><br><span class=\"line\"></span><br><span class=\"line\">    system(<span class=\"string\">&quot;title C语言关机程序&quot;</span>);  <span class=\"comment\">//设置cmd窗口标题</span></span><br><span class=\"line\">    system(<span class=\"string\">&quot;mode con cols=48 lines=25&quot;</span>);  <span class=\"comment\">//窗口宽度高度 </span></span><br><span class=\"line\">    system(<span class=\"string\">&quot;color f0&quot;</span>);  <span class=\"comment\">////f为背景色，0为前景色</span></span><br><span class=\"line\">    system(<span class=\"string\">&quot;date /T&quot;</span>);<span class=\"comment\">//显示系统日期</span></span><br><span class=\"line\">    system(<span class=\"string\">&quot;TIME /T&quot;</span>);<span class=\"comment\">//显示系统时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;----------- C语言关机程序 -----------\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1.实现10分钟内的定时关闭计算机\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2.立即关闭计算机\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3.注销计算机\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0.退出系统\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-------------------------------------\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;c);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;您想在多少秒后自动关闭计算机？（0~600）\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,t);</span><br><span class=\"line\">            system(<span class=\"built_in\">strcat</span>(cmd,t));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            system(<span class=\"string\">&quot;shutdown -p&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            system(<span class=\"string\">&quot;shutdown -l&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Error!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小总结\"><a href=\"#小总结\" class=\"headerlink\" title=\"小总结\"></a>小总结</h3><blockquote>\n<ul>\n<li>要点就是system()函数的运用和cmd命令的了解</li>\n<li>函数原型int system(const char * string);</li>\n<li>strcat()函数原型char *strcat(char *dest, const char *src);<blockquote>\n<p>strcat() 会将参数 src 字符串复制到参数 dest 所指的字符串尾部；dest 最后的结束字符 NULL 会被覆盖掉，并在连接后的字符串的尾部再增加一个 NULL。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n<p>————————-2016.09.07——————————–</p>\n","site":{"data":{}},"length":1534,"excerpt":"<hr>\n<h3 id=\"程序功能说明\"><a href=\"#程序功能说明\" class=\"headerlink\" title=\"程序功能说明\"></a>程序功能说明</h3><blockquote>\n<ul>\n<li>输入1可实现自定义10分钟内的定时关机</li>\n<li>输入2可实现立即关机</li>\n<li>输入3可实现注销计算机</li>\n<li>输入0可退出程序</li>\n</ul>\n</blockquote>","more":"<h3 id=\"程序运行截图\"><a href=\"#程序运行截图\" class=\"headerlink\" title=\"程序运行截图\"></a>程序运行截图</h3><p><img src=\"http://od191c801.bkt.clouddn.com/C%E5%85%B3%E6%9C%BA%E7%A8%8B%E5%BA%8F.png\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********关于system(&quot;color 参数&quot;)配置从控制台颜色************</span></span><br><span class=\"line\"><span class=\"comment\">0 = 黑色    8 = 灰色    1 = 淡蓝      9 = 蓝色</span></span><br><span class=\"line\"><span class=\"comment\">2 = 淡绿    A = 绿色    3 = 湖蓝      B = 淡浅绿  </span></span><br><span class=\"line\"><span class=\"comment\">C = 红色    4 = 淡红    5 = 紫色      D = 淡紫  </span></span><br><span class=\"line\"><span class=\"comment\">6 = 黄色    E = 淡黄    7 = 白色      F = 亮白</span></span><br><span class=\"line\"><span class=\"comment\">****************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> cmd[<span class=\"number\">20</span>]=<span class=\"string\">&quot;shutdown -s -t &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> t[<span class=\"number\">5</span>]=<span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c;</span><br><span class=\"line\"></span><br><span class=\"line\">    system(<span class=\"string\">&quot;title C语言关机程序&quot;</span>);  <span class=\"comment\">//设置cmd窗口标题</span></span><br><span class=\"line\">    system(<span class=\"string\">&quot;mode con cols=48 lines=25&quot;</span>);  <span class=\"comment\">//窗口宽度高度 </span></span><br><span class=\"line\">    system(<span class=\"string\">&quot;color f0&quot;</span>);  <span class=\"comment\">////f为背景色，0为前景色</span></span><br><span class=\"line\">    system(<span class=\"string\">&quot;date /T&quot;</span>);<span class=\"comment\">//显示系统日期</span></span><br><span class=\"line\">    system(<span class=\"string\">&quot;TIME /T&quot;</span>);<span class=\"comment\">//显示系统时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;----------- C语言关机程序 -----------\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1.实现10分钟内的定时关闭计算机\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2.立即关闭计算机\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3.注销计算机\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0.退出系统\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-------------------------------------\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;c);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;您想在多少秒后自动关闭计算机？（0~600）\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,t);</span><br><span class=\"line\">            system(<span class=\"built_in\">strcat</span>(cmd,t));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            system(<span class=\"string\">&quot;shutdown -p&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            system(<span class=\"string\">&quot;shutdown -l&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Error!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小总结\"><a href=\"#小总结\" class=\"headerlink\" title=\"小总结\"></a>小总结</h3><blockquote>\n<ul>\n<li>要点就是system()函数的运用和cmd命令的了解</li>\n<li>函数原型int system(const char * string);</li>\n<li>strcat()函数原型char *strcat(char *dest, const char *src);<blockquote>\n<p>strcat() 会将参数 src 字符串复制到参数 dest 所指的字符串尾部；dest 最后的结束字符 NULL 会被覆盖掉，并在连接后的字符串的尾部再增加一个 NULL。</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n<p>————————-2016.09.07——————————–</p>"},{"title":"C语言中memset()用法","date":"2016-09-12T12:38:39.000Z","_content":"------\n\n### memset()功能\n\n> **功 能:** 将s所指向的某一块内存中的每个字节的内容全部设置为ch指定的ASCII值,\n\n> 块的大小由第三个参数指定,这个函数通常为新申请的内存做初始化工作\n<!--more-->\n\n### 用法示例\n\n1. **原型:** void *memset(void *s, char ch, unsigned n);\n\n2. **程序例:**\n\n```c\n#include <string.h>\n#include <stdio.h>\n#include <memory.h>\nint main(void)\n{\n    char buffer[] = \"Hello world/n\";\n　　printf(\"Buffer before memset: %s\\n\", buffer);\n　　memset(buffer, '*', strlen(buffer) );\n　　printf(\"Buffer after memset: %s\\n\", buffer);\n　　return 0;\n}\n```\n> **输出结果：**\n>>  Buffer before memset: Hello world\n>>  Buffer after memset: \\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\n\n\n### memset函数详细说明\n\n**（1）void *memset(void *s,int c,size_t n)**\n\n> **总的作用：**将已开辟内存空间 s 的首 n 个字节的值设为值 c。\n\n**（2）例子：**\n```c\nvoid main()\n{\n　　char *s=\"Golden Global View\";\n　　clrscr();\n　　memset(s,'G',6);//貌似这里有点问题//\n　　printf(\"%s\",s);\n　　getchar();\n　　return 0;\n}　\n```\n> 【这个问题相当大，程序根本就运行不下去了，你这里的S指向的是一段`只读`的内存，而你memset又试图修改它，所以运行时要出错，修改办法char *s修改为char s[ ]】\n\n**（3）memset() 函数常用于`内存空间初始化`。如：**\n\n> char str[100];\n> memset(str,0,100);\n\n**（4）memset()的深刻内涵：**用来对一段内存空间全部设置为某个字符，一般用在对定义的字符串进行初始化为：memset(a, '\\0', sizeof(a));\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/C语言中memset()用法.md","raw":"---\ntitle: C语言中memset()用法\ndate: 2016-09-12 20:38:39\ntags:\n- C语言\n---\n------\n\n### memset()功能\n\n> **功 能:** 将s所指向的某一块内存中的每个字节的内容全部设置为ch指定的ASCII值,\n\n> 块的大小由第三个参数指定,这个函数通常为新申请的内存做初始化工作\n<!--more-->\n\n### 用法示例\n\n1. **原型:** void *memset(void *s, char ch, unsigned n);\n\n2. **程序例:**\n\n```c\n#include <string.h>\n#include <stdio.h>\n#include <memory.h>\nint main(void)\n{\n    char buffer[] = \"Hello world/n\";\n　　printf(\"Buffer before memset: %s\\n\", buffer);\n　　memset(buffer, '*', strlen(buffer) );\n　　printf(\"Buffer after memset: %s\\n\", buffer);\n　　return 0;\n}\n```\n> **输出结果：**\n>>  Buffer before memset: Hello world\n>>  Buffer after memset: \\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\n\n\n### memset函数详细说明\n\n**（1）void *memset(void *s,int c,size_t n)**\n\n> **总的作用：**将已开辟内存空间 s 的首 n 个字节的值设为值 c。\n\n**（2）例子：**\n```c\nvoid main()\n{\n　　char *s=\"Golden Global View\";\n　　clrscr();\n　　memset(s,'G',6);//貌似这里有点问题//\n　　printf(\"%s\",s);\n　　getchar();\n　　return 0;\n}　\n```\n> 【这个问题相当大，程序根本就运行不下去了，你这里的S指向的是一段`只读`的内存，而你memset又试图修改它，所以运行时要出错，修改办法char *s修改为char s[ ]】\n\n**（3）memset() 函数常用于`内存空间初始化`。如：**\n\n> char str[100];\n> memset(str,0,100);\n\n**（4）memset()的深刻内涵：**用来对一段内存空间全部设置为某个字符，一般用在对定义的字符串进行初始化为：memset(a, '\\0', sizeof(a));\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"C语言中memset()用法","published":1,"updated":"2021-01-10T13:42:20.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzabq00033clwgl1rhqys","content":"<hr>\n<h3 id=\"memset-功能\"><a href=\"#memset-功能\" class=\"headerlink\" title=\"memset()功能\"></a>memset()功能</h3><blockquote>\n<p><strong>功 能:</strong> 将s所指向的某一块内存中的每个字节的内容全部设置为ch指定的ASCII值,</p>\n</blockquote>\n<blockquote>\n<p>块的大小由第三个参数指定,这个函数通常为新申请的内存做初始化工作</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"用法示例\"><a href=\"#用法示例\" class=\"headerlink\" title=\"用法示例\"></a>用法示例</h3><ol>\n<li><p><strong>原型:</strong> void *memset(void *s, char ch, unsigned n);</p>\n</li>\n<li><p><strong>程序例:</strong></p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[] = <span class=\"string\">&quot;Hello world/n&quot;</span>;</span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Buffer before memset: %s\\n&quot;</span>, buffer);</span><br><span class=\"line\">　　<span class=\"built_in\">memset</span>(buffer, <span class=\"string\">&#x27;*&#x27;</span>, <span class=\"built_in\">strlen</span>(buffer) );</span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Buffer after memset: %s\\n&quot;</span>, buffer);</span><br><span class=\"line\">　　<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>输出结果：</strong></p>\n<blockquote>\n<p> Buffer before memset: Hello world<br> Buffer after memset: ***********</p>\n</blockquote>\n</blockquote>\n<h3 id=\"memset函数详细说明\"><a href=\"#memset函数详细说明\" class=\"headerlink\" title=\"memset函数详细说明\"></a>memset函数详细说明</h3><p><strong>（1）void *memset(void *s,int c,size_t n)</strong></p>\n<blockquote>\n<p><strong>总的作用：</strong>将已开辟内存空间 s 的首 n 个字节的值设为值 c。</p>\n</blockquote>\n<p><strong>（2）例子：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">char</span> *s=<span class=\"string\">&quot;Golden Global View&quot;</span>;</span><br><span class=\"line\">　　clrscr();</span><br><span class=\"line\">　　<span class=\"built_in\">memset</span>(s,<span class=\"string\">&#x27;G&#x27;</span>,<span class=\"number\">6</span>);<span class=\"comment\">//貌似这里有点问题//</span></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,s);</span><br><span class=\"line\">　　getchar();</span><br><span class=\"line\">　　<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;　</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>【这个问题相当大，程序根本就运行不下去了，你这里的S指向的是一段<code>只读</code>的内存，而你memset又试图修改它，所以运行时要出错，修改办法char *s修改为char s[ ]】</p>\n</blockquote>\n<p><strong>（3）memset() 函数常用于<code>内存空间初始化</code>。如：</strong></p>\n<blockquote>\n<p>char str[100];<br>memset(str,0,100);</p>\n</blockquote>\n<p><strong>（4）memset()的深刻内涵：</strong>用来对一段内存空间全部设置为某个字符，一般用在对定义的字符串进行初始化为：memset(a, ‘\\0’, sizeof(a));</p>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":991,"excerpt":"<hr>\n<h3 id=\"memset-功能\"><a href=\"#memset-功能\" class=\"headerlink\" title=\"memset()功能\"></a>memset()功能</h3><blockquote>\n<p><strong>功 能:</strong> 将s所指向的某一块内存中的每个字节的内容全部设置为ch指定的ASCII值,</p>\n</blockquote>\n<blockquote>\n<p>块的大小由第三个参数指定,这个函数通常为新申请的内存做初始化工作</p>\n</blockquote>","more":"<h3 id=\"用法示例\"><a href=\"#用法示例\" class=\"headerlink\" title=\"用法示例\"></a>用法示例</h3><ol>\n<li><p><strong>原型:</strong> void *memset(void *s, char ch, unsigned n);</p>\n</li>\n<li><p><strong>程序例:</strong></p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[] = <span class=\"string\">&quot;Hello world/n&quot;</span>;</span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Buffer before memset: %s\\n&quot;</span>, buffer);</span><br><span class=\"line\">　　<span class=\"built_in\">memset</span>(buffer, <span class=\"string\">&#x27;*&#x27;</span>, <span class=\"built_in\">strlen</span>(buffer) );</span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Buffer after memset: %s\\n&quot;</span>, buffer);</span><br><span class=\"line\">　　<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>输出结果：</strong></p>\n<blockquote>\n<p> Buffer before memset: Hello world<br> Buffer after memset: ***********</p>\n</blockquote>\n</blockquote>\n<h3 id=\"memset函数详细说明\"><a href=\"#memset函数详细说明\" class=\"headerlink\" title=\"memset函数详细说明\"></a>memset函数详细说明</h3><p><strong>（1）void *memset(void *s,int c,size_t n)</strong></p>\n<blockquote>\n<p><strong>总的作用：</strong>将已开辟内存空间 s 的首 n 个字节的值设为值 c。</p>\n</blockquote>\n<p><strong>（2）例子：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">char</span> *s=<span class=\"string\">&quot;Golden Global View&quot;</span>;</span><br><span class=\"line\">　　clrscr();</span><br><span class=\"line\">　　<span class=\"built_in\">memset</span>(s,<span class=\"string\">&#x27;G&#x27;</span>,<span class=\"number\">6</span>);<span class=\"comment\">//貌似这里有点问题//</span></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,s);</span><br><span class=\"line\">　　getchar();</span><br><span class=\"line\">　　<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;　</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>【这个问题相当大，程序根本就运行不下去了，你这里的S指向的是一段<code>只读</code>的内存，而你memset又试图修改它，所以运行时要出错，修改办法char *s修改为char s[ ]】</p>\n</blockquote>\n<p><strong>（3）memset() 函数常用于<code>内存空间初始化</code>。如：</strong></p>\n<blockquote>\n<p>char str[100];<br>memset(str,0,100);</p>\n</blockquote>\n<p><strong>（4）memset()的深刻内涵：</strong>用来对一段内存空间全部设置为某个字符，一般用在对定义的字符串进行初始化为：memset(a, ‘\\0’, sizeof(a));</p>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"},{"title":"我的第一个独立博客——东不是东西.FumasrerLin","date":"2016-09-06T14:38:39.000Z","_content":"<center>\n    <p><img src=\"http://od191c801.bkt.clouddn.com/head1.jpg\" align=\"center\"></p>\n</center>\n\n\n----------\n\n\n### 一点点说明\n> - 一看上图就知道\n> - 这是一个个人特征鲜明的独立博客\n> - 初衷就是想要搭建一个属于自己的独立博客或者网站\n> - 最近学习了Git这个工具，然后发现新大陆，GitHub+hexo可以搭建独立博客\n> - 于是便开始研究如何搭建，经过了好几天时间，终于有了这个博客\n> - 学会了如何用MarkDown写文档，简直好用，妈妈再也不用担心我的排版了\n<!--more-->\n### Who am i? ###\n> - 我是林言东\n> - 目前是集美大学机械电子工程的一名大四狗\n> - 对！还是一只Dog！各方面都是一只活生生的Dog啊\n> - Lucky dog\n### FumasterLin是什么意思？ ###\n> - FumasterLin是我自己瞎组合的一个英文名，有误可以来指正一二，哈哈\n> - FumasterLin=future+master+lin（我的姓）\n> - 读音：['fjʊmɑːstəlɪn]\n> - 这个名字呢，有点带有自我激励的意思在\n> - 还望不喜勿喷哈\n### 关于“东不是东西”\n> - 其实我也不知道为什么要取这个名字\n> - 就是想着想着就想到了\n> - 哈哈哈哈哈哈哈哈哈哈\n### 搭建一个这样的博客的初衷是什么？ ###\n> - 希望有个独立空间来记录各种事情\n> - 一些学习历程\n> - 记录一些学习笔记\n> - 一些生活经历\n> - 一些个人想法\n> - PS：希望我能坚持记录更新\n### 相关功能\n> - 这个用的是Hexo当前应该是最火的主题NexT，网上也有一些人也是这个主题。\n> - 选它主要还是因为好看.简洁.比格满满\n> - 加入了多说的留言评价，各平台的分享，喜欢点赞，还有百度的留言统计功能\n> - 有些页面加入了外链音乐播放器，比如这篇文章，还有<关于>的页面\n> - 图床用了七牛的云端服务，相当好用，目前还是免费用户，穷嘛\n> - 移动端打开的时候，显示不了侧边栏。还是PC端打开看起来比格比较高哈哈哈\n> - **最后还是希望大家来多多留言呐**\n### 联系 ###\n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=247176&auto=1&height=66\"></iframe>\n\n-------------------------2016.09.06--------------------------------\n","source":"_posts/myFirstBlog.md","raw":"---\ntitle: 我的第一个独立博客——东不是东西.FumasrerLin\ndate: 2016-09-06 22:38:39\ntags:\n- 清新之比\n---\n<center>\n    <p><img src=\"http://od191c801.bkt.clouddn.com/head1.jpg\" align=\"center\"></p>\n</center>\n\n\n----------\n\n\n### 一点点说明\n> - 一看上图就知道\n> - 这是一个个人特征鲜明的独立博客\n> - 初衷就是想要搭建一个属于自己的独立博客或者网站\n> - 最近学习了Git这个工具，然后发现新大陆，GitHub+hexo可以搭建独立博客\n> - 于是便开始研究如何搭建，经过了好几天时间，终于有了这个博客\n> - 学会了如何用MarkDown写文档，简直好用，妈妈再也不用担心我的排版了\n<!--more-->\n### Who am i? ###\n> - 我是林言东\n> - 目前是集美大学机械电子工程的一名大四狗\n> - 对！还是一只Dog！各方面都是一只活生生的Dog啊\n> - Lucky dog\n### FumasterLin是什么意思？ ###\n> - FumasterLin是我自己瞎组合的一个英文名，有误可以来指正一二，哈哈\n> - FumasterLin=future+master+lin（我的姓）\n> - 读音：['fjʊmɑːstəlɪn]\n> - 这个名字呢，有点带有自我激励的意思在\n> - 还望不喜勿喷哈\n### 关于“东不是东西”\n> - 其实我也不知道为什么要取这个名字\n> - 就是想着想着就想到了\n> - 哈哈哈哈哈哈哈哈哈哈\n### 搭建一个这样的博客的初衷是什么？ ###\n> - 希望有个独立空间来记录各种事情\n> - 一些学习历程\n> - 记录一些学习笔记\n> - 一些生活经历\n> - 一些个人想法\n> - PS：希望我能坚持记录更新\n### 相关功能\n> - 这个用的是Hexo当前应该是最火的主题NexT，网上也有一些人也是这个主题。\n> - 选它主要还是因为好看.简洁.比格满满\n> - 加入了多说的留言评价，各平台的分享，喜欢点赞，还有百度的留言统计功能\n> - 有些页面加入了外链音乐播放器，比如这篇文章，还有<关于>的页面\n> - 图床用了七牛的云端服务，相当好用，目前还是免费用户，穷嘛\n> - 移动端打开的时候，显示不了侧边栏。还是PC端打开看起来比格比较高哈哈哈\n> - **最后还是希望大家来多多留言呐**\n### 联系 ###\n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=247176&auto=1&height=66\"></iframe>\n\n-------------------------2016.09.06--------------------------------\n","slug":"myFirstBlog","published":1,"updated":"2021-01-10T13:42:20.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzabs00063clwacajhegl","content":"<center>\n    <p><img src=\"http://od191c801.bkt.clouddn.com/head1.jpg\" align=\"center\"></p>\n</center>\n\n\n<hr>\n<h3 id=\"一点点说明\"><a href=\"#一点点说明\" class=\"headerlink\" title=\"一点点说明\"></a>一点点说明</h3><blockquote>\n<ul>\n<li>一看上图就知道</li>\n<li>这是一个个人特征鲜明的独立博客</li>\n<li>初衷就是想要搭建一个属于自己的独立博客或者网站</li>\n<li>最近学习了Git这个工具，然后发现新大陆，GitHub+hexo可以搭建独立博客</li>\n<li>于是便开始研究如何搭建，经过了好几天时间，终于有了这个博客</li>\n<li>学会了如何用MarkDown写文档，简直好用，妈妈再也不用担心我的排版了</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"Who-am-i\"><a href=\"#Who-am-i\" class=\"headerlink\" title=\"Who am i?\"></a>Who am i?</h3><blockquote>\n<ul>\n<li>我是林言东</li>\n<li>目前是集美大学机械电子工程的一名大四狗</li>\n<li>对！还是一只Dog！各方面都是一只活生生的Dog啊</li>\n<li>Lucky dog</li>\n</ul>\n</blockquote>\n<h3 id=\"FumasterLin是什么意思？\"><a href=\"#FumasterLin是什么意思？\" class=\"headerlink\" title=\"FumasterLin是什么意思？\"></a>FumasterLin是什么意思？</h3><blockquote>\n<ul>\n<li>FumasterLin是我自己瞎组合的一个英文名，有误可以来指正一二，哈哈</li>\n<li>FumasterLin=future+master+lin（我的姓）</li>\n<li>读音：[‘fjʊmɑːstəlɪn]</li>\n<li>这个名字呢，有点带有自我激励的意思在</li>\n<li>还望不喜勿喷哈</li>\n</ul>\n</blockquote>\n<h3 id=\"关于“东不是东西”\"><a href=\"#关于“东不是东西”\" class=\"headerlink\" title=\"关于“东不是东西”\"></a>关于“东不是东西”</h3><blockquote>\n<ul>\n<li>其实我也不知道为什么要取这个名字</li>\n<li>就是想着想着就想到了</li>\n<li>哈哈哈哈哈哈哈哈哈哈</li>\n</ul>\n</blockquote>\n<h3 id=\"搭建一个这样的博客的初衷是什么？\"><a href=\"#搭建一个这样的博客的初衷是什么？\" class=\"headerlink\" title=\"搭建一个这样的博客的初衷是什么？\"></a>搭建一个这样的博客的初衷是什么？</h3><blockquote>\n<ul>\n<li>希望有个独立空间来记录各种事情</li>\n<li>一些学习历程</li>\n<li>记录一些学习笔记</li>\n<li>一些生活经历</li>\n<li>一些个人想法</li>\n<li>PS：希望我能坚持记录更新</li>\n</ul>\n</blockquote>\n<h3 id=\"相关功能\"><a href=\"#相关功能\" class=\"headerlink\" title=\"相关功能\"></a>相关功能</h3><blockquote>\n<ul>\n<li>这个用的是Hexo当前应该是最火的主题NexT，网上也有一些人也是这个主题。</li>\n<li>选它主要还是因为好看.简洁.比格满满</li>\n<li>加入了多说的留言评价，各平台的分享，喜欢点赞，还有百度的留言统计功能</li>\n<li>有些页面加入了外链音乐播放器，比如这篇文章，还有&lt;关于&gt;的页面</li>\n<li>图床用了七牛的云端服务，相当好用，目前还是免费用户，穷嘛</li>\n<li>移动端打开的时候，显示不了侧边栏。还是PC端打开看起来比格比较高哈哈哈</li>\n<li><strong>最后还是希望大家来多多留言呐</strong></li>\n</ul>\n</blockquote>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=247176&auto=1&height=66\"></iframe>\n\n<p>————————-2016.09.06——————————–</p>\n","site":{"data":{}},"length":745,"excerpt":"<center>\n    <p><img src=\"http://od191c801.bkt.clouddn.com/head1.jpg\" align=\"center\"></p>\n</center>\n\n\n<hr>\n<h3 id=\"一点点说明\"><a href=\"#一点点说明\" class=\"headerlink\" title=\"一点点说明\"></a>一点点说明</h3><blockquote>\n<ul>\n<li>一看上图就知道</li>\n<li>这是一个个人特征鲜明的独立博客</li>\n<li>初衷就是想要搭建一个属于自己的独立博客或者网站</li>\n<li>最近学习了Git这个工具，然后发现新大陆，GitHub+hexo可以搭建独立博客</li>\n<li>于是便开始研究如何搭建，经过了好几天时间，终于有了这个博客</li>\n<li>学会了如何用MarkDown写文档，简直好用，妈妈再也不用担心我的排版了</li>\n</ul>\n</blockquote>","more":"<h3 id=\"Who-am-i\"><a href=\"#Who-am-i\" class=\"headerlink\" title=\"Who am i?\"></a>Who am i?</h3><blockquote>\n<ul>\n<li>我是林言东</li>\n<li>目前是集美大学机械电子工程的一名大四狗</li>\n<li>对！还是一只Dog！各方面都是一只活生生的Dog啊</li>\n<li>Lucky dog</li>\n</ul>\n</blockquote>\n<h3 id=\"FumasterLin是什么意思？\"><a href=\"#FumasterLin是什么意思？\" class=\"headerlink\" title=\"FumasterLin是什么意思？\"></a>FumasterLin是什么意思？</h3><blockquote>\n<ul>\n<li>FumasterLin是我自己瞎组合的一个英文名，有误可以来指正一二，哈哈</li>\n<li>FumasterLin=future+master+lin（我的姓）</li>\n<li>读音：[‘fjʊmɑːstəlɪn]</li>\n<li>这个名字呢，有点带有自我激励的意思在</li>\n<li>还望不喜勿喷哈</li>\n</ul>\n</blockquote>\n<h3 id=\"关于“东不是东西”\"><a href=\"#关于“东不是东西”\" class=\"headerlink\" title=\"关于“东不是东西”\"></a>关于“东不是东西”</h3><blockquote>\n<ul>\n<li>其实我也不知道为什么要取这个名字</li>\n<li>就是想着想着就想到了</li>\n<li>哈哈哈哈哈哈哈哈哈哈</li>\n</ul>\n</blockquote>\n<h3 id=\"搭建一个这样的博客的初衷是什么？\"><a href=\"#搭建一个这样的博客的初衷是什么？\" class=\"headerlink\" title=\"搭建一个这样的博客的初衷是什么？\"></a>搭建一个这样的博客的初衷是什么？</h3><blockquote>\n<ul>\n<li>希望有个独立空间来记录各种事情</li>\n<li>一些学习历程</li>\n<li>记录一些学习笔记</li>\n<li>一些生活经历</li>\n<li>一些个人想法</li>\n<li>PS：希望我能坚持记录更新</li>\n</ul>\n</blockquote>\n<h3 id=\"相关功能\"><a href=\"#相关功能\" class=\"headerlink\" title=\"相关功能\"></a>相关功能</h3><blockquote>\n<ul>\n<li>这个用的是Hexo当前应该是最火的主题NexT，网上也有一些人也是这个主题。</li>\n<li>选它主要还是因为好看.简洁.比格满满</li>\n<li>加入了多说的留言评价，各平台的分享，喜欢点赞，还有百度的留言统计功能</li>\n<li>有些页面加入了外链音乐播放器，比如这篇文章，还有&lt;关于&gt;的页面</li>\n<li>图床用了七牛的云端服务，相当好用，目前还是免费用户，穷嘛</li>\n<li>移动端打开的时候，显示不了侧边栏。还是PC端打开看起来比格比较高哈哈哈</li>\n<li><strong>最后还是希望大家来多多留言呐</strong></li>\n</ul>\n</blockquote>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=247176&auto=1&height=66\"></iframe>\n\n<p>————————-2016.09.06——————————–</p>"},{"title":"栈的实现及其小应用-括号匹配（C++版）","date":"2016-09-10T14:38:39.000Z","_content":"------\n\n## 1. 栈的概念和特点\n\n> - 定义：栈是限定仅在表头进行插入和删除操作的线性表\n\n> - 栈作为一种数据结构，是一种特殊的线性表，它的插入和删除运算均在`同一端`进行。\n- 这一端被称为`栈顶(top)`，另一端为`栈底`，插入称为`进栈(push)`，删除称为`出栈(pop)`。\n- 有`后进先出`的性质。\n- 栈顶top相当于顺序表中的size，即元素个数。\n- 关于顺序表，可参照我的上一篇文章：[线性顺序表的实现（C语言版）](http://fumasterlin.com/2016/09/09/%E7%BA%BF%E6%80%A7%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88C%E8%AF%AD%E8%A8%80%E7%89%88%EF%BC%89/#more)\n<!--more-->\n\n## 2. 栈的操作及实现\n\n> - 1、类的定义\n> - 2、初始化\n> - 3、判断是否为空\n> - 4、取得栈顶值\n> - 5、入栈操作\n> - 6、出栈操作\n> - 7、打印栈的内容\n\n### 头文件的定义\n\n```C++\n#ifndef SEQSTACK_H_\n#define SEQSTACK_H_\n#include <stdlib.h>\n#define LENGTH 100\ntypedef char DATA_TYPE;\n//栈类的定义\nclass Stack\n{\npublic:\n\tDATA_TYPE data[LENGTH];\n\tint top=0;\n};\n/*\n实现栈操作函数的定义，从Stack公有继承过来\nps：也可以直接把Stack里的成员变量直接放到这个类里，直接封装起来\n*/\nclass seqStackFun:public Stack\n{\npublic:\n\tseqStackFun();//构造函数，初始化在这里做\n\t~seqStackFun();\n\tbool isEmpty();//判断栈是否为空\n\tDATA_TYPE getTop();//取得栈顶值\n\tbool push( DATA_TYPE pushData);//入栈操作\n\tDATA_TYPE pop();//出栈操作\n\tvoid displayseqStack();//打印栈的内容\n};\n#endif // !SEQSTACK_H_\n```\n### 具体函数的实现\n#### 1. 初始化即构造函数实现\n```C++\nseqStackFun::seqStackFun()\n{\n\tthis->top = 0;//top置0\n}\n//析构函数为空\nseqStackFun::~seqStackFun()\n{\n\t\n}\n```\n#### 2. 判断栈是否为空\n```C++\nbool seqStackFun::isEmpty()\n{\n\treturn (this->top>0 ? 0 : 1);\n}\n```\n#### 3. 获取栈顶数据\n```C++\nDATA_TYPE seqStackFun::getTop()\n{\n\tif (0 == this->top)\n\t{\n\t\tcout << \"栈为空，没有数据\" << endl;\n\t}\n\telse \n\t\treturn (this->data[this->top - 1]);\n}\n```\n#### 4. 入栈\n```C++\nbool seqStackFun::push(DATA_TYPE pushData)\n{\n\tif (this->top == LENGTH)\n\t{\n\t\tcout << \"栈已经满了\" << endl;\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tthis->data[this->top] = pushData;\n\t\tthis->top++;\n\t\treturn true;\n\t}\n}\n```\n#### 5. 出栈\n```C++\nDATA_TYPE seqStackFun::pop()\n{\n\tif (0 == this->top)\n\t{\n\t\tcout << \"栈中无数据，为空\" << endl;\n\t}\n\telse\n\t{\n\t\tthis->top--;\n\t\treturn this->data[this->top];\n\t}\n\t\t\n}\n```\n#### 6. 打印栈中的内容\n```C++\nvoid seqStackFun::displayseqStack()\n{\n\tif (0 == this->top)\n\t{\n\t\tcout << \"栈中无数据，为空！\" << endl;\n\t}\n\telse\n\t{\n\t\tfor (int loop = 0; loop < this->top; loop++)\n\t\t{\n\t\t\tcout << this->data[loop] << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n}\n```\n## 3. 栈的小应用-括号的匹配\n### 匹配函数\n```C++\n/*\n判断栈顶数据和x是否相同，是返回真，否返回假\n*/\nbool compare(seqStackFun stack, DATA_TYPE x)\n{\n\tif (x == stack.getTop())\n\t{\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\n```\n### 主函数实现\n\n```C++\nbool compare(seqStackFun stack, DATA_TYPE x);\nint main()\n{\n\tDATA_TYPE data;\n\tseqStackFun *myStack = new seqStackFun();\n\tcout << \"请输入一串带括号的的字符串：\";\n\twhile ((data = getchar() )!= '\\n')//回车结束\n\t{\n\t\tswitch (data)\n\t\t{\n\t\tcase '{':\n\t\tcase '(':\n\t\tcase '[':\n\t\t\tmyStack->push(data);\t\t\n\t\t\tbreak;\n\t\tcase '}':\n\t\t\tif (compare(*myStack, '{'))\n\t\t\t\tmyStack->pop();\n\t\t\tbreak;\n\t\tcase ']':\n\t\t\tif(compare(*myStack, '['))\n\t\t\t\tmyStack->pop();\n\t\t\tbreak;\n\t\tcase ')':\n\t\t\tif (compare(*myStack, '('))\n\t\t\t\tmyStack->pop();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (myStack->isEmpty())\n\t\tcout << \"括号匹配正确\" << endl;\n\telse\n\t\tcout << \"括号匹配不正确\" << endl;\n\tdelete myStack;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n运行结果如下：\n\n![](http://od191c801.bkt.clouddn.com/%E6%A0%88%E6%96%87%E7%AB%A02.png)\n\n![](http://od191c801.bkt.clouddn.com/%E6%A0%88%E6%96%87%E7%AB%A01.png)\n\n### 参考\n> 参考自：[http://blog.csdn.net/fansongy/article/details/6784919](http://blog.csdn.net/fansongy/article/details/6784919)\n\n### 联系 ###\n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/栈的实现及其小应用-括号匹配（C++版）.md","raw":"---\ntitle: 栈的实现及其小应用-括号匹配（C++版）\ndate: 2016-09-10 22:38:39\ntags:\n- 数据结构\n---\n------\n\n## 1. 栈的概念和特点\n\n> - 定义：栈是限定仅在表头进行插入和删除操作的线性表\n\n> - 栈作为一种数据结构，是一种特殊的线性表，它的插入和删除运算均在`同一端`进行。\n- 这一端被称为`栈顶(top)`，另一端为`栈底`，插入称为`进栈(push)`，删除称为`出栈(pop)`。\n- 有`后进先出`的性质。\n- 栈顶top相当于顺序表中的size，即元素个数。\n- 关于顺序表，可参照我的上一篇文章：[线性顺序表的实现（C语言版）](http://fumasterlin.com/2016/09/09/%E7%BA%BF%E6%80%A7%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88C%E8%AF%AD%E8%A8%80%E7%89%88%EF%BC%89/#more)\n<!--more-->\n\n## 2. 栈的操作及实现\n\n> - 1、类的定义\n> - 2、初始化\n> - 3、判断是否为空\n> - 4、取得栈顶值\n> - 5、入栈操作\n> - 6、出栈操作\n> - 7、打印栈的内容\n\n### 头文件的定义\n\n```C++\n#ifndef SEQSTACK_H_\n#define SEQSTACK_H_\n#include <stdlib.h>\n#define LENGTH 100\ntypedef char DATA_TYPE;\n//栈类的定义\nclass Stack\n{\npublic:\n\tDATA_TYPE data[LENGTH];\n\tint top=0;\n};\n/*\n实现栈操作函数的定义，从Stack公有继承过来\nps：也可以直接把Stack里的成员变量直接放到这个类里，直接封装起来\n*/\nclass seqStackFun:public Stack\n{\npublic:\n\tseqStackFun();//构造函数，初始化在这里做\n\t~seqStackFun();\n\tbool isEmpty();//判断栈是否为空\n\tDATA_TYPE getTop();//取得栈顶值\n\tbool push( DATA_TYPE pushData);//入栈操作\n\tDATA_TYPE pop();//出栈操作\n\tvoid displayseqStack();//打印栈的内容\n};\n#endif // !SEQSTACK_H_\n```\n### 具体函数的实现\n#### 1. 初始化即构造函数实现\n```C++\nseqStackFun::seqStackFun()\n{\n\tthis->top = 0;//top置0\n}\n//析构函数为空\nseqStackFun::~seqStackFun()\n{\n\t\n}\n```\n#### 2. 判断栈是否为空\n```C++\nbool seqStackFun::isEmpty()\n{\n\treturn (this->top>0 ? 0 : 1);\n}\n```\n#### 3. 获取栈顶数据\n```C++\nDATA_TYPE seqStackFun::getTop()\n{\n\tif (0 == this->top)\n\t{\n\t\tcout << \"栈为空，没有数据\" << endl;\n\t}\n\telse \n\t\treturn (this->data[this->top - 1]);\n}\n```\n#### 4. 入栈\n```C++\nbool seqStackFun::push(DATA_TYPE pushData)\n{\n\tif (this->top == LENGTH)\n\t{\n\t\tcout << \"栈已经满了\" << endl;\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tthis->data[this->top] = pushData;\n\t\tthis->top++;\n\t\treturn true;\n\t}\n}\n```\n#### 5. 出栈\n```C++\nDATA_TYPE seqStackFun::pop()\n{\n\tif (0 == this->top)\n\t{\n\t\tcout << \"栈中无数据，为空\" << endl;\n\t}\n\telse\n\t{\n\t\tthis->top--;\n\t\treturn this->data[this->top];\n\t}\n\t\t\n}\n```\n#### 6. 打印栈中的内容\n```C++\nvoid seqStackFun::displayseqStack()\n{\n\tif (0 == this->top)\n\t{\n\t\tcout << \"栈中无数据，为空！\" << endl;\n\t}\n\telse\n\t{\n\t\tfor (int loop = 0; loop < this->top; loop++)\n\t\t{\n\t\t\tcout << this->data[loop] << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n}\n```\n## 3. 栈的小应用-括号的匹配\n### 匹配函数\n```C++\n/*\n判断栈顶数据和x是否相同，是返回真，否返回假\n*/\nbool compare(seqStackFun stack, DATA_TYPE x)\n{\n\tif (x == stack.getTop())\n\t{\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\n```\n### 主函数实现\n\n```C++\nbool compare(seqStackFun stack, DATA_TYPE x);\nint main()\n{\n\tDATA_TYPE data;\n\tseqStackFun *myStack = new seqStackFun();\n\tcout << \"请输入一串带括号的的字符串：\";\n\twhile ((data = getchar() )!= '\\n')//回车结束\n\t{\n\t\tswitch (data)\n\t\t{\n\t\tcase '{':\n\t\tcase '(':\n\t\tcase '[':\n\t\t\tmyStack->push(data);\t\t\n\t\t\tbreak;\n\t\tcase '}':\n\t\t\tif (compare(*myStack, '{'))\n\t\t\t\tmyStack->pop();\n\t\t\tbreak;\n\t\tcase ']':\n\t\t\tif(compare(*myStack, '['))\n\t\t\t\tmyStack->pop();\n\t\t\tbreak;\n\t\tcase ')':\n\t\t\tif (compare(*myStack, '('))\n\t\t\t\tmyStack->pop();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (myStack->isEmpty())\n\t\tcout << \"括号匹配正确\" << endl;\n\telse\n\t\tcout << \"括号匹配不正确\" << endl;\n\tdelete myStack;\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n运行结果如下：\n\n![](http://od191c801.bkt.clouddn.com/%E6%A0%88%E6%96%87%E7%AB%A02.png)\n\n![](http://od191c801.bkt.clouddn.com/%E6%A0%88%E6%96%87%E7%AB%A01.png)\n\n### 参考\n> 参考自：[http://blog.csdn.net/fansongy/article/details/6784919](http://blog.csdn.net/fansongy/article/details/6784919)\n\n### 联系 ###\n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"栈的实现及其小应用-括号匹配（C++版）","published":1,"updated":"2021-01-10T13:42:20.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzabt00073clw3ias47y7","content":"<hr>\n<h2 id=\"1-栈的概念和特点\"><a href=\"#1-栈的概念和特点\" class=\"headerlink\" title=\"1. 栈的概念和特点\"></a>1. 栈的概念和特点</h2><blockquote>\n<ul>\n<li>定义：栈是限定仅在表头进行插入和删除操作的线性表</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>栈作为一种数据结构，是一种特殊的线性表，它的插入和删除运算均在<code>同一端</code>进行。</li>\n</ul>\n</blockquote>\n<ul>\n<li>这一端被称为<code>栈顶(top)</code>，另一端为<code>栈底</code>，插入称为<code>进栈(push)</code>，删除称为<code>出栈(pop)</code>。</li>\n<li>有<code>后进先出</code>的性质。</li>\n<li>栈顶top相当于顺序表中的size，即元素个数。</li>\n<li>关于顺序表，可参照我的上一篇文章：<a href=\"http://fumasterlin.com/2016/09/09/%E7%BA%BF%E6%80%A7%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88C%E8%AF%AD%E8%A8%80%E7%89%88%EF%BC%89/#more\">线性顺序表的实现（C语言版）</a><a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"2-栈的操作及实现\"><a href=\"#2-栈的操作及实现\" class=\"headerlink\" title=\"2. 栈的操作及实现\"></a>2. 栈的操作及实现</h2><blockquote>\n<ul>\n<li>1、类的定义</li>\n<li>2、初始化</li>\n<li>3、判断是否为空</li>\n<li>4、取得栈顶值</li>\n<li>5、入栈操作</li>\n<li>6、出栈操作</li>\n<li>7、打印栈的内容</li>\n</ul>\n</blockquote>\n<h3 id=\"头文件的定义\"><a href=\"#头文件的定义\" class=\"headerlink\" title=\"头文件的定义\"></a>头文件的定义</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> SEQSTACK_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SEQSTACK_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LENGTH 100</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> DATA_TYPE;</span><br><span class=\"line\"><span class=\"comment\">//栈类的定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tDATA_TYPE data[LENGTH];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">实现栈操作函数的定义，从Stack公有继承过来</span></span><br><span class=\"line\"><span class=\"comment\">ps：也可以直接把Stack里的成员变量直接放到这个类里，直接封装起来</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">seqStackFun</span>:</span><span class=\"keyword\">public</span> Stack</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tseqStackFun();<span class=\"comment\">//构造函数，初始化在这里做</span></span><br><span class=\"line\">\t~seqStackFun();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;<span class=\"comment\">//判断栈是否为空</span></span><br><span class=\"line\">\t<span class=\"function\">DATA_TYPE <span class=\"title\">getTop</span><span class=\"params\">()</span></span>;<span class=\"comment\">//取得栈顶值</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">push</span><span class=\"params\">( DATA_TYPE pushData)</span></span>;<span class=\"comment\">//入栈操作</span></span><br><span class=\"line\">\t<span class=\"function\">DATA_TYPE <span class=\"title\">pop</span><span class=\"params\">()</span></span>;<span class=\"comment\">//出栈操作</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayseqStack</span><span class=\"params\">()</span></span>;<span class=\"comment\">//打印栈的内容</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// !SEQSTACK_H_</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"具体函数的实现\"><a href=\"#具体函数的实现\" class=\"headerlink\" title=\"具体函数的实现\"></a>具体函数的实现</h3><h4 id=\"1-初始化即构造函数实现\"><a href=\"#1-初始化即构造函数实现\" class=\"headerlink\" title=\"1. 初始化即构造函数实现\"></a>1. 初始化即构造函数实现</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seqStackFun::seqStackFun()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;top = <span class=\"number\">0</span>;<span class=\"comment\">//top置0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//析构函数为空</span></span><br><span class=\"line\">seqStackFun::~seqStackFun()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-判断栈是否为空\"><a href=\"#2-判断栈是否为空\" class=\"headerlink\" title=\"2. 判断栈是否为空\"></a>2. 判断栈是否为空</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">seqStackFun::isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>-&gt;top&gt;<span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-获取栈顶数据\"><a href=\"#3-获取栈顶数据\" class=\"headerlink\" title=\"3. 获取栈顶数据\"></a>3. 获取栈顶数据</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DATA_TYPE <span class=\"title\">seqStackFun::getTop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">0</span> == <span class=\"keyword\">this</span>-&gt;top)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;栈为空，没有数据&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>-&gt;data[<span class=\"keyword\">this</span>-&gt;top - <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-入栈\"><a href=\"#4-入栈\" class=\"headerlink\" title=\"4. 入栈\"></a>4. 入栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">seqStackFun::push</span><span class=\"params\">(DATA_TYPE pushData)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;top == LENGTH)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;栈已经满了&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;data[<span class=\"keyword\">this</span>-&gt;top] = pushData;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;top++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-出栈\"><a href=\"#5-出栈\" class=\"headerlink\" title=\"5. 出栈\"></a>5. 出栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DATA_TYPE <span class=\"title\">seqStackFun::pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">0</span> == <span class=\"keyword\">this</span>-&gt;top)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;栈中无数据，为空&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;top--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;data[<span class=\"keyword\">this</span>-&gt;top];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-打印栈中的内容\"><a href=\"#6-打印栈中的内容\" class=\"headerlink\" title=\"6. 打印栈中的内容\"></a>6. 打印栈中的内容</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">seqStackFun::displayseqStack</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">0</span> == <span class=\"keyword\">this</span>-&gt;top)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;栈中无数据，为空！&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> loop = <span class=\"number\">0</span>; loop &lt; <span class=\"keyword\">this</span>-&gt;top; loop++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;data[loop] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-栈的小应用-括号的匹配\"><a href=\"#3-栈的小应用-括号的匹配\" class=\"headerlink\" title=\"3. 栈的小应用-括号的匹配\"></a>3. 栈的小应用-括号的匹配</h2><h3 id=\"匹配函数\"><a href=\"#匹配函数\" class=\"headerlink\" title=\"匹配函数\"></a>匹配函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">判断栈顶数据和x是否相同，是返回真，否返回假</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(seqStackFun <span class=\"built_in\">stack</span>, DATA_TYPE x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"built_in\">stack</span>.getTop())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"主函数实现\"><a href=\"#主函数实现\" class=\"headerlink\" title=\"主函数实现\"></a>主函数实现</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(seqStackFun <span class=\"built_in\">stack</span>, DATA_TYPE x)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tDATA_TYPE data;</span><br><span class=\"line\">\tseqStackFun *myStack = <span class=\"keyword\">new</span> seqStackFun();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;请输入一串带括号的的字符串：&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((data = getchar() )!= <span class=\"string\">&#x27;\\n&#x27;</span>)<span class=\"comment\">//回车结束</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (data)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;&#123;&#x27;</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;(&#x27;</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;[&#x27;</span>:</span><br><span class=\"line\">\t\t\tmyStack-&gt;push(data);\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;&#125;&#x27;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (compare(*myStack, <span class=\"string\">&#x27;&#123;&#x27;</span>))</span><br><span class=\"line\">\t\t\t\tmyStack-&gt;pop();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;]&#x27;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(compare(*myStack, <span class=\"string\">&#x27;[&#x27;</span>))</span><br><span class=\"line\">\t\t\t\tmyStack-&gt;pop();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;)&#x27;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (compare(*myStack, <span class=\"string\">&#x27;(&#x27;</span>))</span><br><span class=\"line\">\t\t\t\tmyStack-&gt;pop();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (myStack-&gt;isEmpty())</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;括号匹配正确&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;括号匹配不正确&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> myStack;</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<p><img src=\"http://od191c801.bkt.clouddn.com/%E6%A0%88%E6%96%87%E7%AB%A02.png\"></p>\n<p><img src=\"http://od191c801.bkt.clouddn.com/%E6%A0%88%E6%96%87%E7%AB%A01.png\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>参考自：<a href=\"http://blog.csdn.net/fansongy/article/details/6784919\">http://blog.csdn.net/fansongy/article/details/6784919</a></p>\n</blockquote>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":2981,"excerpt":"<hr>\n<h2 id=\"1-栈的概念和特点\"><a href=\"#1-栈的概念和特点\" class=\"headerlink\" title=\"1. 栈的概念和特点\"></a>1. 栈的概念和特点</h2><blockquote>\n<ul>\n<li>定义：栈是限定仅在表头进行插入和删除操作的线性表</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>栈作为一种数据结构，是一种特殊的线性表，它的插入和删除运算均在<code>同一端</code>进行。</li>\n</ul>\n</blockquote>\n<ul>\n<li>这一端被称为<code>栈顶(top)</code>，另一端为<code>栈底</code>，插入称为<code>进栈(push)</code>，删除称为<code>出栈(pop)</code>。</li>\n<li>有<code>后进先出</code>的性质。</li>\n<li>栈顶top相当于顺序表中的size，即元素个数。</li>\n<li>关于顺序表，可参照我的上一篇文章：<a href=\"http://fumasterlin.com/2016/09/09/%E7%BA%BF%E6%80%A7%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88C%E8%AF%AD%E8%A8%80%E7%89%88%EF%BC%89/#more\">线性顺序表的实现（C语言版）</a>","more":"</li>\n</ul>\n<h2 id=\"2-栈的操作及实现\"><a href=\"#2-栈的操作及实现\" class=\"headerlink\" title=\"2. 栈的操作及实现\"></a>2. 栈的操作及实现</h2><blockquote>\n<ul>\n<li>1、类的定义</li>\n<li>2、初始化</li>\n<li>3、判断是否为空</li>\n<li>4、取得栈顶值</li>\n<li>5、入栈操作</li>\n<li>6、出栈操作</li>\n<li>7、打印栈的内容</li>\n</ul>\n</blockquote>\n<h3 id=\"头文件的定义\"><a href=\"#头文件的定义\" class=\"headerlink\" title=\"头文件的定义\"></a>头文件的定义</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> SEQSTACK_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SEQSTACK_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LENGTH 100</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> DATA_TYPE;</span><br><span class=\"line\"><span class=\"comment\">//栈类的定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tDATA_TYPE data[LENGTH];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">实现栈操作函数的定义，从Stack公有继承过来</span></span><br><span class=\"line\"><span class=\"comment\">ps：也可以直接把Stack里的成员变量直接放到这个类里，直接封装起来</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">seqStackFun</span>:</span><span class=\"keyword\">public</span> Stack</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tseqStackFun();<span class=\"comment\">//构造函数，初始化在这里做</span></span><br><span class=\"line\">\t~seqStackFun();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;<span class=\"comment\">//判断栈是否为空</span></span><br><span class=\"line\">\t<span class=\"function\">DATA_TYPE <span class=\"title\">getTop</span><span class=\"params\">()</span></span>;<span class=\"comment\">//取得栈顶值</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">push</span><span class=\"params\">( DATA_TYPE pushData)</span></span>;<span class=\"comment\">//入栈操作</span></span><br><span class=\"line\">\t<span class=\"function\">DATA_TYPE <span class=\"title\">pop</span><span class=\"params\">()</span></span>;<span class=\"comment\">//出栈操作</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayseqStack</span><span class=\"params\">()</span></span>;<span class=\"comment\">//打印栈的内容</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// !SEQSTACK_H_</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"具体函数的实现\"><a href=\"#具体函数的实现\" class=\"headerlink\" title=\"具体函数的实现\"></a>具体函数的实现</h3><h4 id=\"1-初始化即构造函数实现\"><a href=\"#1-初始化即构造函数实现\" class=\"headerlink\" title=\"1. 初始化即构造函数实现\"></a>1. 初始化即构造函数实现</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seqStackFun::seqStackFun()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;top = <span class=\"number\">0</span>;<span class=\"comment\">//top置0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//析构函数为空</span></span><br><span class=\"line\">seqStackFun::~seqStackFun()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-判断栈是否为空\"><a href=\"#2-判断栈是否为空\" class=\"headerlink\" title=\"2. 判断栈是否为空\"></a>2. 判断栈是否为空</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">seqStackFun::isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>-&gt;top&gt;<span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-获取栈顶数据\"><a href=\"#3-获取栈顶数据\" class=\"headerlink\" title=\"3. 获取栈顶数据\"></a>3. 获取栈顶数据</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DATA_TYPE <span class=\"title\">seqStackFun::getTop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">0</span> == <span class=\"keyword\">this</span>-&gt;top)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;栈为空，没有数据&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>-&gt;data[<span class=\"keyword\">this</span>-&gt;top - <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-入栈\"><a href=\"#4-入栈\" class=\"headerlink\" title=\"4. 入栈\"></a>4. 入栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">seqStackFun::push</span><span class=\"params\">(DATA_TYPE pushData)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;top == LENGTH)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;栈已经满了&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;data[<span class=\"keyword\">this</span>-&gt;top] = pushData;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;top++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-出栈\"><a href=\"#5-出栈\" class=\"headerlink\" title=\"5. 出栈\"></a>5. 出栈</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DATA_TYPE <span class=\"title\">seqStackFun::pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">0</span> == <span class=\"keyword\">this</span>-&gt;top)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;栈中无数据，为空&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;top--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;data[<span class=\"keyword\">this</span>-&gt;top];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-打印栈中的内容\"><a href=\"#6-打印栈中的内容\" class=\"headerlink\" title=\"6. 打印栈中的内容\"></a>6. 打印栈中的内容</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">seqStackFun::displayseqStack</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"number\">0</span> == <span class=\"keyword\">this</span>-&gt;top)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;栈中无数据，为空！&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> loop = <span class=\"number\">0</span>; loop &lt; <span class=\"keyword\">this</span>-&gt;top; loop++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;data[loop] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-栈的小应用-括号的匹配\"><a href=\"#3-栈的小应用-括号的匹配\" class=\"headerlink\" title=\"3. 栈的小应用-括号的匹配\"></a>3. 栈的小应用-括号的匹配</h2><h3 id=\"匹配函数\"><a href=\"#匹配函数\" class=\"headerlink\" title=\"匹配函数\"></a>匹配函数</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">判断栈顶数据和x是否相同，是返回真，否返回假</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(seqStackFun <span class=\"built_in\">stack</span>, DATA_TYPE x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x == <span class=\"built_in\">stack</span>.getTop())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"主函数实现\"><a href=\"#主函数实现\" class=\"headerlink\" title=\"主函数实现\"></a>主函数实现</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(seqStackFun <span class=\"built_in\">stack</span>, DATA_TYPE x)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tDATA_TYPE data;</span><br><span class=\"line\">\tseqStackFun *myStack = <span class=\"keyword\">new</span> seqStackFun();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;请输入一串带括号的的字符串：&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((data = getchar() )!= <span class=\"string\">&#x27;\\n&#x27;</span>)<span class=\"comment\">//回车结束</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (data)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;&#123;&#x27;</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;(&#x27;</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;[&#x27;</span>:</span><br><span class=\"line\">\t\t\tmyStack-&gt;push(data);\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;&#125;&#x27;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (compare(*myStack, <span class=\"string\">&#x27;&#123;&#x27;</span>))</span><br><span class=\"line\">\t\t\t\tmyStack-&gt;pop();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;]&#x27;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(compare(*myStack, <span class=\"string\">&#x27;[&#x27;</span>))</span><br><span class=\"line\">\t\t\t\tmyStack-&gt;pop();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;)&#x27;</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (compare(*myStack, <span class=\"string\">&#x27;(&#x27;</span>))</span><br><span class=\"line\">\t\t\t\tmyStack-&gt;pop();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (myStack-&gt;isEmpty())</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;括号匹配正确&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;括号匹配不正确&quot;</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> myStack;</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<p><img src=\"http://od191c801.bkt.clouddn.com/%E6%A0%88%E6%96%87%E7%AB%A02.png\"></p>\n<p><img src=\"http://od191c801.bkt.clouddn.com/%E6%A0%88%E6%96%87%E7%AB%A01.png\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>参考自：<a href=\"http://blog.csdn.net/fansongy/article/details/6784919\">http://blog.csdn.net/fansongy/article/details/6784919</a></p>\n</blockquote>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-01-10T13:42:20.702Z","updated":"2021-01-10T13:42:20.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzabu00083clw1uu70f6m","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"length":367,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"动态分配内存-四道题-你能做对吗？","date":"2016-09-12T09:38:39.000Z","_content":"------\n\n在CSDN上看到这样一篇文章，觉得很值得注意，值得分享下\n<!--more-->\n### 代码\n\n> 第一题：\n\n```cpp\nvoid GetMemory(char *p)  \n{  \n    p = (char *)malloc(100);  \n}  \nvoid Test(void)   \n{  \n    char *str = NULL;  \n    GetMemory(str);   \n    strcpy(str, \"hello world\");  \n    printf(str);  \n}\n```\n\n> 第二题：\n\n```cpp\nchar *GetMemory(void)  \n{     \n    char p[] = \"hello world\";  \n    return p;  \n}  \nvoid Test(void)  \n{  \n    char *str = NULL;  \n    str = GetMemory();    \n    printf(str);  \n} \n```\n\n> 第三题：\n\n```cpp\nVoid GetMemory(char **p, int num)  \n{  \n    *p = (char *)malloc(num);  \n}  \nvoid Test(void)  \n{  \n    char *str = NULL;  \n    GetMemory(&str, 100);  \n    strcpy(str, \"hello\");     \n    printf(str);      \n}\n```\n\n> 第四题：\n\n```cpp\nvoid Test(void)  \n{  \n    char *str = (char *) malloc(100);  \n    strcpy(str, “hello”);  \n    free(str);        \n    if(str != NULL)  \n    {  \n        strcpy(str, “world”);     \n        printf(str);  \n    }  \n} \n```\n**请问运行Test函数会有什么样的结果？？？**\n\n\n----------\n\n\n### 分析解答\n\n#### 答案\n\n> 1、出错  2、出错  3、hello  4、world\n\n#### 分析\n\n> 1. 函数传递的是`形参`。p是指针也白扯。为什么swap(int a, int b)函数不能将a，b交换呢？因为a和b只是函数的一个形参，`当函数执行完成，形参即销毁`。所以p就没了。地址、内存是分配了，但没传回来就销毁了，`str还是指向NULL`。`向strcpy传一个NULL指针`，一定是出错。\n\n> 2. 函数执行完即销毁。虽然在函数中分配了一块内存，并且也返回指针了，`可惜函数一结束，p就会销毁`，**指针指向的栈空间会立刻被别的程序所占用。栈内的数据也就被替换掉了**。所以也会出错，但和第一个不同。第一个是内存崩溃，第二个输出则会出现乱码。\n\n> 3. 这个程序算是相对正确的了。函数传了指针str的地址，对其指向分配了内存空间。然后用strcpy赋值。输出都没有问题。**但是最后没有释放内存，造成了内存泄露**。\n\n> 4. 这就涉及到free这个函数了。首先正常的动态分配内存。**当程序调用free时，指针所指向的内容会被赋成0（大小应该为4字节，即4个\\0，在linux上测的），但是指针位置不会移动，当然也就不会为空**。有指针位置，就可以对堆内存进行操作了。所以strcpy可以成功执行，能输出world。`可见free()后不将指针置空是非常危险的`，因为此时并没有分配动态内存。\n\n\n### 参考\n**引自：**[http://blog.csdn.net/fansongy/article/details/6772127](http://blog.csdn.net/fansongy/article/details/6772127)\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/动态分配内存-四道题-你能做对吗？.md","raw":"---\ntitle: 动态分配内存-四道题-你能做对吗？\ndate: 2016-09-12 17:38:39\ntags:\n- C/C++\n---\n------\n\n在CSDN上看到这样一篇文章，觉得很值得注意，值得分享下\n<!--more-->\n### 代码\n\n> 第一题：\n\n```cpp\nvoid GetMemory(char *p)  \n{  \n    p = (char *)malloc(100);  \n}  \nvoid Test(void)   \n{  \n    char *str = NULL;  \n    GetMemory(str);   \n    strcpy(str, \"hello world\");  \n    printf(str);  \n}\n```\n\n> 第二题：\n\n```cpp\nchar *GetMemory(void)  \n{     \n    char p[] = \"hello world\";  \n    return p;  \n}  \nvoid Test(void)  \n{  \n    char *str = NULL;  \n    str = GetMemory();    \n    printf(str);  \n} \n```\n\n> 第三题：\n\n```cpp\nVoid GetMemory(char **p, int num)  \n{  \n    *p = (char *)malloc(num);  \n}  \nvoid Test(void)  \n{  \n    char *str = NULL;  \n    GetMemory(&str, 100);  \n    strcpy(str, \"hello\");     \n    printf(str);      \n}\n```\n\n> 第四题：\n\n```cpp\nvoid Test(void)  \n{  \n    char *str = (char *) malloc(100);  \n    strcpy(str, “hello”);  \n    free(str);        \n    if(str != NULL)  \n    {  \n        strcpy(str, “world”);     \n        printf(str);  \n    }  \n} \n```\n**请问运行Test函数会有什么样的结果？？？**\n\n\n----------\n\n\n### 分析解答\n\n#### 答案\n\n> 1、出错  2、出错  3、hello  4、world\n\n#### 分析\n\n> 1. 函数传递的是`形参`。p是指针也白扯。为什么swap(int a, int b)函数不能将a，b交换呢？因为a和b只是函数的一个形参，`当函数执行完成，形参即销毁`。所以p就没了。地址、内存是分配了，但没传回来就销毁了，`str还是指向NULL`。`向strcpy传一个NULL指针`，一定是出错。\n\n> 2. 函数执行完即销毁。虽然在函数中分配了一块内存，并且也返回指针了，`可惜函数一结束，p就会销毁`，**指针指向的栈空间会立刻被别的程序所占用。栈内的数据也就被替换掉了**。所以也会出错，但和第一个不同。第一个是内存崩溃，第二个输出则会出现乱码。\n\n> 3. 这个程序算是相对正确的了。函数传了指针str的地址，对其指向分配了内存空间。然后用strcpy赋值。输出都没有问题。**但是最后没有释放内存，造成了内存泄露**。\n\n> 4. 这就涉及到free这个函数了。首先正常的动态分配内存。**当程序调用free时，指针所指向的内容会被赋成0（大小应该为4字节，即4个\\0，在linux上测的），但是指针位置不会移动，当然也就不会为空**。有指针位置，就可以对堆内存进行操作了。所以strcpy可以成功执行，能输出world。`可见free()后不将指针置空是非常危险的`，因为此时并没有分配动态内存。\n\n\n### 参考\n**引自：**[http://blog.csdn.net/fansongy/article/details/6772127](http://blog.csdn.net/fansongy/article/details/6772127)\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"动态分配内存-四道题-你能做对吗？","published":1,"updated":"2021-01-10T13:42:20.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzabw000b3clw0mbl733u","content":"<hr>\n<p>在CSDN上看到这样一篇文章，觉得很值得注意，值得分享下</p>\n<a id=\"more\"></a>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><blockquote>\n<p>第一题：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GetMemory</span><span class=\"params\">(<span class=\"keyword\">char</span> *p)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    p = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>   </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    GetMemory(str);   </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str, <span class=\"string\">&quot;hello world&quot;</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(str);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二题：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">GetMemory</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;     </span><br><span class=\"line\">    <span class=\"keyword\">char</span> p[] = <span class=\"string\">&quot;hello world&quot;</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    str = GetMemory();    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(str);  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第三题：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Void <span class=\"title\">GetMemory</span><span class=\"params\">(<span class=\"keyword\">char</span> **p, <span class=\"keyword\">int</span> num)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    *p = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(num);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    GetMemory(&amp;str, <span class=\"number\">100</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str, <span class=\"string\">&quot;hello&quot;</span>);     </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(str);      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第四题：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = (<span class=\"keyword\">char</span> *) <span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str, “hello”);  </span><br><span class=\"line\">    <span class=\"built_in\">free</span>(str);        </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str != <span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(str, “world”);     </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(str);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p><strong>请问运行Test函数会有什么样的结果？？？</strong></p>\n<hr>\n<h3 id=\"分析解答\"><a href=\"#分析解答\" class=\"headerlink\" title=\"分析解答\"></a>分析解答</h3><h4 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h4><blockquote>\n<p>1、出错  2、出错  3、hello  4、world</p>\n</blockquote>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><blockquote>\n<ol>\n<li>函数传递的是<code>形参</code>。p是指针也白扯。为什么swap(int a, int b)函数不能将a，b交换呢？因为a和b只是函数的一个形参，<code>当函数执行完成，形参即销毁</code>。所以p就没了。地址、内存是分配了，但没传回来就销毁了，<code>str还是指向NULL</code>。<code>向strcpy传一个NULL指针</code>，一定是出错。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>函数执行完即销毁。虽然在函数中分配了一块内存，并且也返回指针了，<code>可惜函数一结束，p就会销毁</code>，<strong>指针指向的栈空间会立刻被别的程序所占用。栈内的数据也就被替换掉了</strong>。所以也会出错，但和第一个不同。第一个是内存崩溃，第二个输出则会出现乱码。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>这个程序算是相对正确的了。函数传了指针str的地址，对其指向分配了内存空间。然后用strcpy赋值。输出都没有问题。<strong>但是最后没有释放内存，造成了内存泄露</strong>。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>这就涉及到free这个函数了。首先正常的动态分配内存。<strong>当程序调用free时，指针所指向的内容会被赋成0（大小应该为4字节，即4个\\0，在linux上测的），但是指针位置不会移动，当然也就不会为空</strong>。有指针位置，就可以对堆内存进行操作了。所以strcpy可以成功执行，能输出world。<code>可见free()后不将指针置空是非常危险的</code>，因为此时并没有分配动态内存。</li>\n</ol>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><strong>引自：</strong><a href=\"http://blog.csdn.net/fansongy/article/details/6772127\">http://blog.csdn.net/fansongy/article/details/6772127</a></p>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":1361,"excerpt":"<hr>\n<p>在CSDN上看到这样一篇文章，觉得很值得注意，值得分享下</p>","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><blockquote>\n<p>第一题：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GetMemory</span><span class=\"params\">(<span class=\"keyword\">char</span> *p)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    p = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>   </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    GetMemory(str);   </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str, <span class=\"string\">&quot;hello world&quot;</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(str);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二题：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">GetMemory</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;     </span><br><span class=\"line\">    <span class=\"keyword\">char</span> p[] = <span class=\"string\">&quot;hello world&quot;</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    str = GetMemory();    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(str);  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第三题：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Void <span class=\"title\">GetMemory</span><span class=\"params\">(<span class=\"keyword\">char</span> **p, <span class=\"keyword\">int</span> num)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    *p = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(num);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    GetMemory(&amp;str, <span class=\"number\">100</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str, <span class=\"string\">&quot;hello&quot;</span>);     </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(str);      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第四题：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = (<span class=\"keyword\">char</span> *) <span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(str, “hello”);  </span><br><span class=\"line\">    <span class=\"built_in\">free</span>(str);        </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str != <span class=\"literal\">NULL</span>)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(str, “world”);     </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(str);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p><strong>请问运行Test函数会有什么样的结果？？？</strong></p>\n<hr>\n<h3 id=\"分析解答\"><a href=\"#分析解答\" class=\"headerlink\" title=\"分析解答\"></a>分析解答</h3><h4 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h4><blockquote>\n<p>1、出错  2、出错  3、hello  4、world</p>\n</blockquote>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><blockquote>\n<ol>\n<li>函数传递的是<code>形参</code>。p是指针也白扯。为什么swap(int a, int b)函数不能将a，b交换呢？因为a和b只是函数的一个形参，<code>当函数执行完成，形参即销毁</code>。所以p就没了。地址、内存是分配了，但没传回来就销毁了，<code>str还是指向NULL</code>。<code>向strcpy传一个NULL指针</code>，一定是出错。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>函数执行完即销毁。虽然在函数中分配了一块内存，并且也返回指针了，<code>可惜函数一结束，p就会销毁</code>，<strong>指针指向的栈空间会立刻被别的程序所占用。栈内的数据也就被替换掉了</strong>。所以也会出错，但和第一个不同。第一个是内存崩溃，第二个输出则会出现乱码。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>这个程序算是相对正确的了。函数传了指针str的地址，对其指向分配了内存空间。然后用strcpy赋值。输出都没有问题。<strong>但是最后没有释放内存，造成了内存泄露</strong>。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>这就涉及到free这个函数了。首先正常的动态分配内存。<strong>当程序调用free时，指针所指向的内容会被赋成0（大小应该为4字节，即4个\\0，在linux上测的），但是指针位置不会移动，当然也就不会为空</strong>。有指针位置，就可以对堆内存进行操作了。所以strcpy可以成功执行，能输出world。<code>可见free()后不将指针置空是非常危险的</code>，因为此时并没有分配动态内存。</li>\n</ol>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><strong>引自：</strong><a href=\"http://blog.csdn.net/fansongy/article/details/6772127\">http://blog.csdn.net/fansongy/article/details/6772127</a></p>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"},{"title":"算法艺术之希尔排序","date":"2016-09-23T16:10:39.000Z","_content":"------\n\n\n### 描述\n> - **希尔排序**的实质就是**分组插入排序**，该方法又称缩小增量排序，因DL．Shell于1959年提出而得名。\n<!--more-->\n\n\n\n### 思路\n\n> 该方法的基本思想是：\n>>先将整个待排元素序列分割成若干个**子序列**（由相隔某个“增量”的元素组成的）分别进行**直接插入排序**，然后依次**缩减增量**再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序\n\n\n### C语言实现代码\n\n\n----------\n\n\n#### 按定义书写\n```c\nvoid shellsort1(int a[], int n)\n{\n\tint i, j, gap;\n\n\tfor (gap = n / 2; gap > 0; gap /= 2) //步长  \n\t\tfor (i = 0; i < gap; i++)        //直接插入排序  \n\t\t{\n\t\t\tfor (j = i + gap; j < n; j += gap)\n\t\t\t\tif (a[j] < a[j - gap])\n\t\t\t\t{\n\t\t\t\t\tint temp = a[j];\n\t\t\t\t\tint k = j - gap;\n\t\t\t\t\twhile (k >= 0 && a[k] > temp)\n\t\t\t\t\t{\n\t\t\t\t\t\ta[k + gap] = a[k];\n\t\t\t\t\t\tk -= gap;\n\t\t\t\t\t}\n\t\t\t\t\ta[k + gap] = temp;\n\t\t\t\t}\n\t\t}\n}\n```\n#### 改进\n\n> 很明显，上面的shellsort1代码虽然对直观的理解希尔排序有帮助，但代码量太大了，不够简洁清晰。因此进行下改进和优化:\n>> 以第二次排序为例，原来是每次从1A到1E，从2A到2E，可以改成从1B开始，先和1A比较，然后取2B与2A比较，再取1C与前面自己组内的数据比较…….。这种每次从数组**第gap个元素开始**，每个元素与自己组内的数据进行直接插入排序显然也是正确的。\n\n```c\nvoid shellsort2(int a[], int n)\n{\n\tint j, gap;\n\n\tfor (gap = n / 2; gap > 0; gap /= 2)\n\t\tfor (j = gap; j < n; j++)//从数组第gap个元素开始  \n\t\t{\n\t\t//每个元素与自己组内的数据进行直接插入排序  \n\t\t\tif (a[j] < a[j - gap])\n\t\t\t{\n\t\t\t\tint temp = a[j];\n\t\t\t\tint k = j - gap;\n\t\t\t\twhile (k >= 0 && a[k] > temp)\n\t\t\t\t{\n\t\t\t\t\ta[k + gap] = a[k];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\ta[k + gap] = temp;\n\t\t\t}\n\t\t}\n}\n```\n#### 再次改进\n\n> 再将直接插入排序的第三种方法来改写下：\n\n```c\nvoid shellsort3(int a[], int n)\n{\n\tint i, j, gap;\n\n\tfor (gap = n / 2; gap > 0; gap /= 2)\n\t\tfor (i = gap; i < n; i++)\n\t\t\tfor (j = i - gap; j >= 0 && a[j] > a[j + gap]; j -= gap)\n\t\t\t\tSwap(a[j], a[j + gap]);\n}\n```\n\n#### Wiki百科代码实现\n\n```c\nvoid shell_sort(int arr[], int len) \n{\n\tint gap, i, j;\n\tint temp;\n\t//步长gap=len/2。用右移效率更高\n\tfor (gap = len >> 1; gap > 0; gap >>= 1)\n\t\tfor (i = gap; i < len; i++) \n\t\t{\n\t\t\ttemp = arr[i];\n\t\t\tfor (j = i - gap; j >= 0 && arr[j] > temp; j -= gap)\n\t\t\t\tarr[j + gap] = arr[j];\n\t\t\tarr[j + gap] = temp;\n\t\t}\n}\n```\n#### 注意\n\n> **注意：**上面希尔排序的步长选择都是从n/2开始，每次再减半，直到最后为1\n\n### 参考\n\n> (1)CSDN：[http://blog.csdn.net/morewindows/article/details/6668714](http://blog.csdn.net/morewindows/article/details/6668714)\n\n> (2)Wiki百科：[https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F](https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F)\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/算法艺术之希尔排序.md","raw":"---\ntitle: 算法艺术之希尔排序\ndate: 2016-09-24 00:10:39\ntags:\n- 算法\n---\n------\n\n\n### 描述\n> - **希尔排序**的实质就是**分组插入排序**，该方法又称缩小增量排序，因DL．Shell于1959年提出而得名。\n<!--more-->\n\n\n\n### 思路\n\n> 该方法的基本思想是：\n>>先将整个待排元素序列分割成若干个**子序列**（由相隔某个“增量”的元素组成的）分别进行**直接插入排序**，然后依次**缩减增量**再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序\n\n\n### C语言实现代码\n\n\n----------\n\n\n#### 按定义书写\n```c\nvoid shellsort1(int a[], int n)\n{\n\tint i, j, gap;\n\n\tfor (gap = n / 2; gap > 0; gap /= 2) //步长  \n\t\tfor (i = 0; i < gap; i++)        //直接插入排序  \n\t\t{\n\t\t\tfor (j = i + gap; j < n; j += gap)\n\t\t\t\tif (a[j] < a[j - gap])\n\t\t\t\t{\n\t\t\t\t\tint temp = a[j];\n\t\t\t\t\tint k = j - gap;\n\t\t\t\t\twhile (k >= 0 && a[k] > temp)\n\t\t\t\t\t{\n\t\t\t\t\t\ta[k + gap] = a[k];\n\t\t\t\t\t\tk -= gap;\n\t\t\t\t\t}\n\t\t\t\t\ta[k + gap] = temp;\n\t\t\t\t}\n\t\t}\n}\n```\n#### 改进\n\n> 很明显，上面的shellsort1代码虽然对直观的理解希尔排序有帮助，但代码量太大了，不够简洁清晰。因此进行下改进和优化:\n>> 以第二次排序为例，原来是每次从1A到1E，从2A到2E，可以改成从1B开始，先和1A比较，然后取2B与2A比较，再取1C与前面自己组内的数据比较…….。这种每次从数组**第gap个元素开始**，每个元素与自己组内的数据进行直接插入排序显然也是正确的。\n\n```c\nvoid shellsort2(int a[], int n)\n{\n\tint j, gap;\n\n\tfor (gap = n / 2; gap > 0; gap /= 2)\n\t\tfor (j = gap; j < n; j++)//从数组第gap个元素开始  \n\t\t{\n\t\t//每个元素与自己组内的数据进行直接插入排序  \n\t\t\tif (a[j] < a[j - gap])\n\t\t\t{\n\t\t\t\tint temp = a[j];\n\t\t\t\tint k = j - gap;\n\t\t\t\twhile (k >= 0 && a[k] > temp)\n\t\t\t\t{\n\t\t\t\t\ta[k + gap] = a[k];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\ta[k + gap] = temp;\n\t\t\t}\n\t\t}\n}\n```\n#### 再次改进\n\n> 再将直接插入排序的第三种方法来改写下：\n\n```c\nvoid shellsort3(int a[], int n)\n{\n\tint i, j, gap;\n\n\tfor (gap = n / 2; gap > 0; gap /= 2)\n\t\tfor (i = gap; i < n; i++)\n\t\t\tfor (j = i - gap; j >= 0 && a[j] > a[j + gap]; j -= gap)\n\t\t\t\tSwap(a[j], a[j + gap]);\n}\n```\n\n#### Wiki百科代码实现\n\n```c\nvoid shell_sort(int arr[], int len) \n{\n\tint gap, i, j;\n\tint temp;\n\t//步长gap=len/2。用右移效率更高\n\tfor (gap = len >> 1; gap > 0; gap >>= 1)\n\t\tfor (i = gap; i < len; i++) \n\t\t{\n\t\t\ttemp = arr[i];\n\t\t\tfor (j = i - gap; j >= 0 && arr[j] > temp; j -= gap)\n\t\t\t\tarr[j + gap] = arr[j];\n\t\t\tarr[j + gap] = temp;\n\t\t}\n}\n```\n#### 注意\n\n> **注意：**上面希尔排序的步长选择都是从n/2开始，每次再减半，直到最后为1\n\n### 参考\n\n> (1)CSDN：[http://blog.csdn.net/morewindows/article/details/6668714](http://blog.csdn.net/morewindows/article/details/6668714)\n\n> (2)Wiki百科：[https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F](https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F)\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"算法艺术之希尔排序","published":1,"updated":"2021-01-10T13:42:20.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzabx000c3clwfpgiaubt","content":"<hr>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<ul>\n<li><strong>希尔排序</strong>的实质就是<strong>分组插入排序</strong>，该方法又称缩小增量排序，因DL．Shell于1959年提出而得名。</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n\n\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>该方法的基本思想是：</p>\n<blockquote>\n<p>先将整个待排元素序列分割成若干个<strong>子序列</strong>（由相隔某个“增量”的元素组成的）分别进行<strong>直接插入排序</strong>，然后依次<strong>缩减增量</strong>再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序</p>\n</blockquote>\n</blockquote>\n<h3 id=\"C语言实现代码\"><a href=\"#C语言实现代码\" class=\"headerlink\" title=\"C语言实现代码\"></a>C语言实现代码</h3><hr>\n<h4 id=\"按定义书写\"><a href=\"#按定义书写\" class=\"headerlink\" title=\"按定义书写\"></a>按定义书写</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shellsort1</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, gap;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (gap = n / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) <span class=\"comment\">//步长  </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; gap; i++)        <span class=\"comment\">//直接插入排序  </span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i + gap; j &lt; n; j += gap)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (a[j] &lt; a[j - gap])</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> k = j - gap;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span> &amp;&amp; a[k] &gt; temp)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\ta[k + gap] = a[k];</span><br><span class=\"line\">\t\t\t\t\t\tk -= gap;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\ta[k + gap] = temp;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h4><blockquote>\n<p>很明显，上面的shellsort1代码虽然对直观的理解希尔排序有帮助，但代码量太大了，不够简洁清晰。因此进行下改进和优化:</p>\n<blockquote>\n<p>以第二次排序为例，原来是每次从1A到1E，从2A到2E，可以改成从1B开始，先和1A比较，然后取2B与2A比较，再取1C与前面自己组内的数据比较…….。这种每次从数组<strong>第gap个元素开始</strong>，每个元素与自己组内的数据进行直接插入排序显然也是正确的。</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shellsort2</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j, gap;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (gap = n / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = gap; j &lt; n; j++)<span class=\"comment\">//从数组第gap个元素开始  </span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//每个元素与自己组内的数据进行直接插入排序  </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[j] &lt; a[j - gap])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> k = j - gap;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span> &amp;&amp; a[k] &gt; temp)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\ta[k + gap] = a[k];</span><br><span class=\"line\">\t\t\t\t\tk -= gap;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\ta[k + gap] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"再次改进\"><a href=\"#再次改进\" class=\"headerlink\" title=\"再次改进\"></a>再次改进</h4><blockquote>\n<p>再将直接插入排序的第三种方法来改写下：</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shellsort3</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, gap;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (gap = n / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = gap; i &lt; n; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i - gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; a[j] &gt; a[j + gap]; j -= gap)</span><br><span class=\"line\">\t\t\t\tSwap(a[j], a[j + gap]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Wiki百科代码实现\"><a href=\"#Wiki百科代码实现\" class=\"headerlink\" title=\"Wiki百科代码实现\"></a>Wiki百科代码实现</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shell_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> gap, i, j;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">\t<span class=\"comment\">//步长gap=len/2。用右移效率更高</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (gap = len &gt;&gt; <span class=\"number\">1</span>; gap &gt; <span class=\"number\">0</span>; gap &gt;&gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = gap; i &lt; len; i++) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttemp = arr[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i - gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)</span><br><span class=\"line\">\t\t\t\tarr[j + gap] = arr[j];</span><br><span class=\"line\">\t\t\tarr[j + gap] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><blockquote>\n<p><strong>注意：</strong>上面希尔排序的步长选择都是从n/2开始，每次再减半，直到最后为1</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>(1)CSDN：<a href=\"http://blog.csdn.net/morewindows/article/details/6668714\">http://blog.csdn.net/morewindows/article/details/6668714</a></p>\n</blockquote>\n<blockquote>\n<p>(2)Wiki百科：<a href=\"https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\">https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F</a></p>\n</blockquote>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":1709,"excerpt":"<hr>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<ul>\n<li><strong>希尔排序</strong>的实质就是<strong>分组插入排序</strong>，该方法又称缩小增量排序，因DL．Shell于1959年提出而得名。</li>\n</ul>\n</blockquote>","more":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>该方法的基本思想是：</p>\n<blockquote>\n<p>先将整个待排元素序列分割成若干个<strong>子序列</strong>（由相隔某个“增量”的元素组成的）分别进行<strong>直接插入排序</strong>，然后依次<strong>缩减增量</strong>再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序</p>\n</blockquote>\n</blockquote>\n<h3 id=\"C语言实现代码\"><a href=\"#C语言实现代码\" class=\"headerlink\" title=\"C语言实现代码\"></a>C语言实现代码</h3><hr>\n<h4 id=\"按定义书写\"><a href=\"#按定义书写\" class=\"headerlink\" title=\"按定义书写\"></a>按定义书写</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shellsort1</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, gap;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (gap = n / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) <span class=\"comment\">//步长  </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; gap; i++)        <span class=\"comment\">//直接插入排序  </span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i + gap; j &lt; n; j += gap)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (a[j] &lt; a[j - gap])</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> k = j - gap;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span> &amp;&amp; a[k] &gt; temp)</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\ta[k + gap] = a[k];</span><br><span class=\"line\">\t\t\t\t\t\tk -= gap;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\ta[k + gap] = temp;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h4><blockquote>\n<p>很明显，上面的shellsort1代码虽然对直观的理解希尔排序有帮助，但代码量太大了，不够简洁清晰。因此进行下改进和优化:</p>\n<blockquote>\n<p>以第二次排序为例，原来是每次从1A到1E，从2A到2E，可以改成从1B开始，先和1A比较，然后取2B与2A比较，再取1C与前面自己组内的数据比较…….。这种每次从数组<strong>第gap个元素开始</strong>，每个元素与自己组内的数据进行直接插入排序显然也是正确的。</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shellsort2</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j, gap;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (gap = n / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = gap; j &lt; n; j++)<span class=\"comment\">//从数组第gap个元素开始  </span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//每个元素与自己组内的数据进行直接插入排序  </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[j] &lt; a[j - gap])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> temp = a[j];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> k = j - gap;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span> &amp;&amp; a[k] &gt; temp)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\ta[k + gap] = a[k];</span><br><span class=\"line\">\t\t\t\t\tk -= gap;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\ta[k + gap] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"再次改进\"><a href=\"#再次改进\" class=\"headerlink\" title=\"再次改进\"></a>再次改进</h4><blockquote>\n<p>再将直接插入排序的第三种方法来改写下：</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shellsort3</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, gap;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (gap = n / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = gap; i &lt; n; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i - gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; a[j] &gt; a[j + gap]; j -= gap)</span><br><span class=\"line\">\t\t\t\tSwap(a[j], a[j + gap]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Wiki百科代码实现\"><a href=\"#Wiki百科代码实现\" class=\"headerlink\" title=\"Wiki百科代码实现\"></a>Wiki百科代码实现</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shell_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> gap, i, j;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">\t<span class=\"comment\">//步长gap=len/2。用右移效率更高</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (gap = len &gt;&gt; <span class=\"number\">1</span>; gap &gt; <span class=\"number\">0</span>; gap &gt;&gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = gap; i &lt; len; i++) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttemp = arr[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i - gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap)</span><br><span class=\"line\">\t\t\t\tarr[j + gap] = arr[j];</span><br><span class=\"line\">\t\t\tarr[j + gap] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><blockquote>\n<p><strong>注意：</strong>上面希尔排序的步长选择都是从n/2开始，每次再减半，直到最后为1</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>(1)CSDN：<a href=\"http://blog.csdn.net/morewindows/article/details/6668714\">http://blog.csdn.net/morewindows/article/details/6668714</a></p>\n</blockquote>\n<blockquote>\n<p>(2)Wiki百科：<a href=\"https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\">https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F</a></p>\n</blockquote>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"},{"title":"算法艺术之快速排序","date":"2016-09-23T12:38:39.000Z","_content":"------\n\n### 描述\n> 1. 快速排序是C.R.A.Hoare于1962年提出的一种划分交换排序。它采用了\n> 一种分治的策略，通常称其为分治法(Divide-and-ConquerMethod)。\n<!--more-->\n> 2. 快速排序的最差时间复杂度和冒泡排序是一样的都是O(N2)，它的平均\n> 时间复杂度为O(NlogN)。\n\n### 思路\n> 该方法的基本思想是：\n\n>> 1．先从数列中取出一个数作为基准数。\n\n>> 2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全       放到它的左边。\n\n>> 3．再对左右区间重复第二步，直到各区间只有一个数。(此处用到递归的思想)\n\n### C语言实现代码\n\n\n----------\n#### 方法一\n\n```c\n/*\n参数：数组，\nleft：数组的最左边位置一般为0\nright：数组的最左边位置一般为N-1\n*/\nvoid quickSort(int *s, int left, int right)\n{\n\tint i, j, temp,t;\n\tif (s==NULL||left > right)\n\t\treturn;\n\ttemp = s[left];//以最左边的数作为基准\n\ti = left;\n\tj = right;\n\twhile (i < j)//当i和j重合的时候退出循环\n\t{\n\t\twhile (i < j&&temp <= s[j])//向左查找，找出小于基准的数\n\t\t\tj--;\n\t\twhile (i < j&&temp >= s[i])//向右查找，找出大于基准的数\n\t\t\ti++;\n\t\tif (i < j)//交换数据\n\t\t{\n\t\t\tt = s[i];\n\t\t\ts[i] = s[j];\n\t\t\ts[j] = t;\n\t\t}\n\t}\n\t//基准数归位\n\ts[left] = s[i];\n\ts[i] = temp;\n\t//递归调用\n\tquickSort(s, i + 1, right);//右边排序好\n\tquickSort(s,left, i-1);//左边排序好\n}\n```\n\n#### 另一种方法（挖坑填数）\n\n> 对挖坑填数进行总结:\n\n> 1．i =L; j = R; 将基准数挖出形成第一个坑a[i]。\n\n> 2．j\\-\\-由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。\n\n> 3．i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。\n\n> 4．再重复执行2，3二步，直到i==j，将基准数填入a[i]中。\n\n```c\n/*\n参数：数组，\nleft：数组的最左边位置一般为0\nright：数组的最左边位置一般为N-1\n*/\nvoid quickSort2(int *s, int left, int right)\n{\n\tint i, j, temp, t;\n\tif (s == NULL || left > right)\n\t\treturn;\n\ttemp = s[left];//以最左边的数作为基准\n\ti = left;\n\tj = right;\n\twhile (i < j)//当i和j重合的时候退出循环\n\t{\n\t\twhile (i < j&&temp <= s[j])/向左查找，找出小于基准的数\n\t\t\tj--;\n\t\ts[i] = s[j];//将s[j]填到s[i]中，s[j]就形成了一个新的坑\n\t\twhile (i < j&&temp >= s[i])/向右查找，找出大于基准的数\n\t\t\ti++;\n\t\ts[j] = s[i];//将s[i]填到s[j]中，s[i]就形成了一个新的坑 \n\n\t}\n\ts[i] = temp;//退出时，i等于j。将temp填到这个坑中。  \n\t//递归调用\n\tquickSort(s, i + 1, right);//右边排序好\n\tquickSort(s,left, i-1);//左边排序好\n\n}\n```\n\n### 参考\n\n> 第一种方法：[http://developer.51cto.com/art/201403/430986.htm](http://developer.51cto.com/art/201403/430986.htm)\n\n\n> 第二种方法（挖坑填数）：[http://blog.csdn.net/morewindows/article/details/6684558](http://blog.csdn.net/morewindows/article/details/6684558)\n\n> Wiki百科：[https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F](https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F)\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/算法艺术之快速排序.md","raw":"---\ntitle: 算法艺术之快速排序\ndate: 2016-09-23 20:38:39\ntags:\n- 算法\n---\n------\n\n### 描述\n> 1. 快速排序是C.R.A.Hoare于1962年提出的一种划分交换排序。它采用了\n> 一种分治的策略，通常称其为分治法(Divide-and-ConquerMethod)。\n<!--more-->\n> 2. 快速排序的最差时间复杂度和冒泡排序是一样的都是O(N2)，它的平均\n> 时间复杂度为O(NlogN)。\n\n### 思路\n> 该方法的基本思想是：\n\n>> 1．先从数列中取出一个数作为基准数。\n\n>> 2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全       放到它的左边。\n\n>> 3．再对左右区间重复第二步，直到各区间只有一个数。(此处用到递归的思想)\n\n### C语言实现代码\n\n\n----------\n#### 方法一\n\n```c\n/*\n参数：数组，\nleft：数组的最左边位置一般为0\nright：数组的最左边位置一般为N-1\n*/\nvoid quickSort(int *s, int left, int right)\n{\n\tint i, j, temp,t;\n\tif (s==NULL||left > right)\n\t\treturn;\n\ttemp = s[left];//以最左边的数作为基准\n\ti = left;\n\tj = right;\n\twhile (i < j)//当i和j重合的时候退出循环\n\t{\n\t\twhile (i < j&&temp <= s[j])//向左查找，找出小于基准的数\n\t\t\tj--;\n\t\twhile (i < j&&temp >= s[i])//向右查找，找出大于基准的数\n\t\t\ti++;\n\t\tif (i < j)//交换数据\n\t\t{\n\t\t\tt = s[i];\n\t\t\ts[i] = s[j];\n\t\t\ts[j] = t;\n\t\t}\n\t}\n\t//基准数归位\n\ts[left] = s[i];\n\ts[i] = temp;\n\t//递归调用\n\tquickSort(s, i + 1, right);//右边排序好\n\tquickSort(s,left, i-1);//左边排序好\n}\n```\n\n#### 另一种方法（挖坑填数）\n\n> 对挖坑填数进行总结:\n\n> 1．i =L; j = R; 将基准数挖出形成第一个坑a[i]。\n\n> 2．j\\-\\-由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。\n\n> 3．i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。\n\n> 4．再重复执行2，3二步，直到i==j，将基准数填入a[i]中。\n\n```c\n/*\n参数：数组，\nleft：数组的最左边位置一般为0\nright：数组的最左边位置一般为N-1\n*/\nvoid quickSort2(int *s, int left, int right)\n{\n\tint i, j, temp, t;\n\tif (s == NULL || left > right)\n\t\treturn;\n\ttemp = s[left];//以最左边的数作为基准\n\ti = left;\n\tj = right;\n\twhile (i < j)//当i和j重合的时候退出循环\n\t{\n\t\twhile (i < j&&temp <= s[j])/向左查找，找出小于基准的数\n\t\t\tj--;\n\t\ts[i] = s[j];//将s[j]填到s[i]中，s[j]就形成了一个新的坑\n\t\twhile (i < j&&temp >= s[i])/向右查找，找出大于基准的数\n\t\t\ti++;\n\t\ts[j] = s[i];//将s[i]填到s[j]中，s[i]就形成了一个新的坑 \n\n\t}\n\ts[i] = temp;//退出时，i等于j。将temp填到这个坑中。  \n\t//递归调用\n\tquickSort(s, i + 1, right);//右边排序好\n\tquickSort(s,left, i-1);//左边排序好\n\n}\n```\n\n### 参考\n\n> 第一种方法：[http://developer.51cto.com/art/201403/430986.htm](http://developer.51cto.com/art/201403/430986.htm)\n\n\n> 第二种方法（挖坑填数）：[http://blog.csdn.net/morewindows/article/details/6684558](http://blog.csdn.net/morewindows/article/details/6684558)\n\n> Wiki百科：[https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F](https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F)\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"算法艺术之快速排序","published":1,"updated":"2021-01-10T13:42:20.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzaby000f3clw1lrac4cj","content":"<hr>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<ol>\n<li>快速排序是C.R.A.Hoare于1962年提出的一种划分交换排序。它采用了<br>一种分治的策略，通常称其为分治法(Divide-and-ConquerMethod)。</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<ol start=\"2\">\n<li>快速排序的最差时间复杂度和冒泡排序是一样的都是O(N2)，它的平均<br>时间复杂度为O(NlogN)。</li>\n</ol>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>该方法的基本思想是：</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>1．先从数列中取出一个数作为基准数。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全       放到它的左边。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>3．再对左右区间重复第二步，直到各区间只有一个数。(此处用到递归的思想)</p>\n</blockquote>\n</blockquote>\n<h3 id=\"C语言实现代码\"><a href=\"#C语言实现代码\" class=\"headerlink\" title=\"C语言实现代码\"></a>C语言实现代码</h3><hr>\n<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">参数：数组，</span></span><br><span class=\"line\"><span class=\"comment\">left：数组的最左边位置一般为0</span></span><br><span class=\"line\"><span class=\"comment\">right：数组的最左边位置一般为N-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *s, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, temp,t;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s==<span class=\"literal\">NULL</span>||left &gt; right)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\ttemp = s[left];<span class=\"comment\">//以最左边的数作为基准</span></span><br><span class=\"line\">\ti = left;</span><br><span class=\"line\">\tj = right;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; j)<span class=\"comment\">//当i和j重合的时候退出循环</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j&amp;&amp;temp &lt;= s[j])<span class=\"comment\">//向左查找，找出小于基准的数</span></span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j&amp;&amp;temp &gt;= s[i])<span class=\"comment\">//向右查找，找出大于基准的数</span></span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; j)<span class=\"comment\">//交换数据</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tt = s[i];</span><br><span class=\"line\">\t\t\ts[i] = s[j];</span><br><span class=\"line\">\t\t\ts[j] = t;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//基准数归位</span></span><br><span class=\"line\">\ts[left] = s[i];</span><br><span class=\"line\">\ts[i] = temp;</span><br><span class=\"line\">\t<span class=\"comment\">//递归调用</span></span><br><span class=\"line\">\tquickSort(s, i + <span class=\"number\">1</span>, right);<span class=\"comment\">//右边排序好</span></span><br><span class=\"line\">\tquickSort(s,left, i<span class=\"number\">-1</span>);<span class=\"comment\">//左边排序好</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"另一种方法（挖坑填数）\"><a href=\"#另一种方法（挖坑填数）\" class=\"headerlink\" title=\"另一种方法（挖坑填数）\"></a>另一种方法（挖坑填数）</h4><blockquote>\n<p>对挖坑填数进行总结:</p>\n</blockquote>\n<blockquote>\n<p>1．i =L; j = R; 将基准数挖出形成第一个坑a[i]。</p>\n</blockquote>\n<blockquote>\n<p>2．j--由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。</p>\n</blockquote>\n<blockquote>\n<p>3．i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。</p>\n</blockquote>\n<blockquote>\n<p>4．再重复执行2，3二步，直到i==j，将基准数填入a[i]中。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">参数：数组，</span></span><br><span class=\"line\"><span class=\"comment\">left：数组的最左边位置一般为0</span></span><br><span class=\"line\"><span class=\"comment\">right：数组的最左边位置一般为N-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort2</span><span class=\"params\">(<span class=\"keyword\">int</span> *s, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, temp, t;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span> || left &gt; right)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\ttemp = s[left];<span class=\"comment\">//以最左边的数作为基准</span></span><br><span class=\"line\">\ti = left;</span><br><span class=\"line\">\tj = right;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; j)<span class=\"comment\">//当i和j重合的时候退出循环</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j&amp;&amp;temp &lt;= s[j])/向左查找，找出小于基准的数</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\ts[i] = s[j];<span class=\"comment\">//将s[j]填到s[i]中，s[j]就形成了一个新的坑</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j&amp;&amp;temp &gt;= s[i])/向右查找，找出大于基准的数</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\ts[j] = s[i];<span class=\"comment\">//将s[i]填到s[j]中，s[i]就形成了一个新的坑 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts[i] = temp;<span class=\"comment\">//退出时，i等于j。将temp填到这个坑中。  </span></span><br><span class=\"line\">\t<span class=\"comment\">//递归调用</span></span><br><span class=\"line\">\tquickSort(s, i + <span class=\"number\">1</span>, right);<span class=\"comment\">//右边排序好</span></span><br><span class=\"line\">\tquickSort(s,left, i<span class=\"number\">-1</span>);<span class=\"comment\">//左边排序好</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>第一种方法：<a href=\"http://developer.51cto.com/art/201403/430986.htm\">http://developer.51cto.com/art/201403/430986.htm</a></p>\n</blockquote>\n<blockquote>\n<p>第二种方法（挖坑填数）：<a href=\"http://blog.csdn.net/morewindows/article/details/6684558\">http://blog.csdn.net/morewindows/article/details/6684558</a></p>\n</blockquote>\n<blockquote>\n<p>Wiki百科：<a href=\"https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\">https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F</a></p>\n</blockquote>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":1727,"excerpt":"<hr>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<ol>\n<li>快速排序是C.R.A.Hoare于1962年提出的一种划分交换排序。它采用了<br>一种分治的策略，通常称其为分治法(Divide-and-ConquerMethod)。</li>\n</ol>\n</blockquote>","more":"<blockquote>\n<ol start=\"2\">\n<li>快速排序的最差时间复杂度和冒泡排序是一样的都是O(N2)，它的平均<br>时间复杂度为O(NlogN)。</li>\n</ol>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>该方法的基本思想是：</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>1．先从数列中取出一个数作为基准数。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全       放到它的左边。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>3．再对左右区间重复第二步，直到各区间只有一个数。(此处用到递归的思想)</p>\n</blockquote>\n</blockquote>\n<h3 id=\"C语言实现代码\"><a href=\"#C语言实现代码\" class=\"headerlink\" title=\"C语言实现代码\"></a>C语言实现代码</h3><hr>\n<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">参数：数组，</span></span><br><span class=\"line\"><span class=\"comment\">left：数组的最左边位置一般为0</span></span><br><span class=\"line\"><span class=\"comment\">right：数组的最左边位置一般为N-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *s, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, temp,t;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s==<span class=\"literal\">NULL</span>||left &gt; right)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\ttemp = s[left];<span class=\"comment\">//以最左边的数作为基准</span></span><br><span class=\"line\">\ti = left;</span><br><span class=\"line\">\tj = right;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; j)<span class=\"comment\">//当i和j重合的时候退出循环</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j&amp;&amp;temp &lt;= s[j])<span class=\"comment\">//向左查找，找出小于基准的数</span></span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j&amp;&amp;temp &gt;= s[i])<span class=\"comment\">//向右查找，找出大于基准的数</span></span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; j)<span class=\"comment\">//交换数据</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tt = s[i];</span><br><span class=\"line\">\t\t\ts[i] = s[j];</span><br><span class=\"line\">\t\t\ts[j] = t;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//基准数归位</span></span><br><span class=\"line\">\ts[left] = s[i];</span><br><span class=\"line\">\ts[i] = temp;</span><br><span class=\"line\">\t<span class=\"comment\">//递归调用</span></span><br><span class=\"line\">\tquickSort(s, i + <span class=\"number\">1</span>, right);<span class=\"comment\">//右边排序好</span></span><br><span class=\"line\">\tquickSort(s,left, i<span class=\"number\">-1</span>);<span class=\"comment\">//左边排序好</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"另一种方法（挖坑填数）\"><a href=\"#另一种方法（挖坑填数）\" class=\"headerlink\" title=\"另一种方法（挖坑填数）\"></a>另一种方法（挖坑填数）</h4><blockquote>\n<p>对挖坑填数进行总结:</p>\n</blockquote>\n<blockquote>\n<p>1．i =L; j = R; 将基准数挖出形成第一个坑a[i]。</p>\n</blockquote>\n<blockquote>\n<p>2．j--由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。</p>\n</blockquote>\n<blockquote>\n<p>3．i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。</p>\n</blockquote>\n<blockquote>\n<p>4．再重复执行2，3二步，直到i==j，将基准数填入a[i]中。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">参数：数组，</span></span><br><span class=\"line\"><span class=\"comment\">left：数组的最左边位置一般为0</span></span><br><span class=\"line\"><span class=\"comment\">right：数组的最左边位置一般为N-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort2</span><span class=\"params\">(<span class=\"keyword\">int</span> *s, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, temp, t;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span> || left &gt; right)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\ttemp = s[left];<span class=\"comment\">//以最左边的数作为基准</span></span><br><span class=\"line\">\ti = left;</span><br><span class=\"line\">\tj = right;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; j)<span class=\"comment\">//当i和j重合的时候退出循环</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j&amp;&amp;temp &lt;= s[j])/向左查找，找出小于基准的数</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\ts[i] = s[j];<span class=\"comment\">//将s[j]填到s[i]中，s[j]就形成了一个新的坑</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j&amp;&amp;temp &gt;= s[i])/向右查找，找出大于基准的数</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\ts[j] = s[i];<span class=\"comment\">//将s[i]填到s[j]中，s[i]就形成了一个新的坑 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts[i] = temp;<span class=\"comment\">//退出时，i等于j。将temp填到这个坑中。  </span></span><br><span class=\"line\">\t<span class=\"comment\">//递归调用</span></span><br><span class=\"line\">\tquickSort(s, i + <span class=\"number\">1</span>, right);<span class=\"comment\">//右边排序好</span></span><br><span class=\"line\">\tquickSort(s,left, i<span class=\"number\">-1</span>);<span class=\"comment\">//左边排序好</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>第一种方法：<a href=\"http://developer.51cto.com/art/201403/430986.htm\">http://developer.51cto.com/art/201403/430986.htm</a></p>\n</blockquote>\n<blockquote>\n<p>第二种方法（挖坑填数）：<a href=\"http://blog.csdn.net/morewindows/article/details/6684558\">http://blog.csdn.net/morewindows/article/details/6684558</a></p>\n</blockquote>\n<blockquote>\n<p>Wiki百科：<a href=\"https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\">https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F</a></p>\n</blockquote>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"},{"title":"算法艺术之归并排序","date":"2016-09-23T14:10:39.000Z","_content":"------\n\n### 描述\n> 1. **归并排序**是建立在归并操作上的一种有效的排序算法。该算法是采用分> 治法（Divide and Conquer）的一个非常典型的应用。\n> 2. 复杂度为：**O(n log n)**\n<!--more-->\n\n### 思路\n> 首先考虑下如何将将二个有序数列合并。这个非常简单，只要从比较二个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可。\n\n```c\n//将两个有序数值合并成一个有序数组\nvoid mergeArray(int array1[], int array2[], int sizeArr1, int sizeArr2, int temp[])\n{\n\tint i = 0, j = 0, k = 0;\n\twhile (i < sizeArr1 && j < sizeArr2)\n\t{\n\t\tif (array1[i] <= array2[j])\n\t\t\ttemp[k++] = array1[i++];\n\t\tif (array1[i] >= array2[j])\n\t\t\ttemp[k++] = array2[j++];\n\t}\n\twhile (i < sizeArr1)\n\t\ttemp[k++] = array1[i++];\n\twhile (j < sizeArr2)\n\t\ttemp[k++] = array2[j++];\n}\n```\n> - 可以看出合并有序数列的效率是比较高的，可以达到**O(n)**。\n\n> - 解决了上面的合并有序数列问题，再来看归并排序，其的**基本思路**就是：\n>> - 将数组分成二组A，B，如果这二组组内的数据都是有序的，那么就可以很方 便的将这二组数据进行排序。如何让这二组组内数据有序了？\n>>> - 可以将A，B组各自再分成二组。依次类推，当分出来的小组只有一个数据时，可以认为这个小组组内已经达到了有序，然后再合并相邻的二个小组 就可以了。这样通过先递归的分解数列，再合并数列就完成了归并排序。\n\n### C语言实现代码\n\n\n----------\n\n\n#### **（1）**\n```c\n//将有二个有序数列array[first...mid]和array[mid...last]合并。  \nstatic void mergeArray(int array[], int first, int mid, int last, int temp[])\n{\n\tint i = first, j = mid+1, k = 0;\n\tint n = mid, m = last;\n\twhile (i <= n && j <= m)\n\t{\n\t\tif (array[i] <= array[j])\n\t\t\ttemp[k++] = array[i++];\n\t\telse\n\t\t\ttemp[k++] = array[j++];\t\n\t}\n\twhile (i <= n)\n\t\ttemp[k++] = array[i++];\n\twhile (j <= m)\n\t\ttemp[k++] = array[j++];\n\t//把排序好的数据给array[]\n\tfor (i = 0; i < k; i++)\n\t\tarray[first + i] = temp[i];\n}\n\nstatic void mergeSort(int array[], int first, int last, int temp[])\n{\n\tif (first < last)\n\t{\n\t\tint mid = (first + last) >> 1;//(first + last) / 2;\n\t\t//递归调用\n\t\tmergeSort(array, first, mid, temp);//左边有序\n\t\tmergeSort(array, mid + 1, last, temp);//右边有序\n\t\tmergeArray(array, first, mid, last, temp);//将两个有序数组合并\t\n\t}\n\telse\n\t\treturn;\n}\n\nbool MergeSort(int a[], int n)\n{\n\tint *p = new int[n];\n\tif (p == NULL)\n\t\treturn false;\n\tmergeSort(a, 0, n - 1, p);\n\tdelete[] p;\n\treturn true;\n}\n```\n\n#### **（2）Wiki百科的实现代码**\n\n```c\nvoid merge_sort_recursive(int arr[], int reg[], int start, int end) {\n\tif (start >= end)\n\t\treturn;\n\tint len = end - start, mid = (len >> 1) + start;\n\tint start1 = start, end1 = mid;\n\tint start2 = mid + 1, end2 = end;\n\t//递归\n\tmerge_sort_recursive(arr, reg, start1, end1);\n\tmerge_sort_recursive(arr, reg, start2, end2);\n\tint k = start;\n\twhile (start1 <= end1 && start2 <= end2)\n\t\treg[k++] = arr[start1] < arr[start2] ? arr[start1++] : arr[start2++];\n\twhile (start1 <= end1)\n\t\treg[k++] = arr[start1++];\n\twhile (start2 <= end2)\n\t\treg[k++] = arr[start2++];\n\tfor (k = start; k <= end; k++)\n\t\tarr[k] = reg[k];\n}\nvoid merge_sort(int arr[], const int len) {\n\tint reg[len];\n\tmerge_sort_recursive(arr, reg, 0, len - 1);\n}\n```\n\n### 参考\n\n> (1)CSDN：[http://blog.csdn.net/morewindows/article/details/6678165](http://blog.csdn.net/morewindows/article/details/6678165)\n\n> (2)Wiki百科：[https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F#C.E8.AA.9E.E8.A8.80](https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F#C.E8.AA.9E.E8.A8.80)\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/算法艺术之归并排序.md","raw":"---\ntitle: 算法艺术之归并排序\ndate: 2016-09-23 22:10:39\ntags:\n- 算法\n---\n------\n\n### 描述\n> 1. **归并排序**是建立在归并操作上的一种有效的排序算法。该算法是采用分> 治法（Divide and Conquer）的一个非常典型的应用。\n> 2. 复杂度为：**O(n log n)**\n<!--more-->\n\n### 思路\n> 首先考虑下如何将将二个有序数列合并。这个非常简单，只要从比较二个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可。\n\n```c\n//将两个有序数值合并成一个有序数组\nvoid mergeArray(int array1[], int array2[], int sizeArr1, int sizeArr2, int temp[])\n{\n\tint i = 0, j = 0, k = 0;\n\twhile (i < sizeArr1 && j < sizeArr2)\n\t{\n\t\tif (array1[i] <= array2[j])\n\t\t\ttemp[k++] = array1[i++];\n\t\tif (array1[i] >= array2[j])\n\t\t\ttemp[k++] = array2[j++];\n\t}\n\twhile (i < sizeArr1)\n\t\ttemp[k++] = array1[i++];\n\twhile (j < sizeArr2)\n\t\ttemp[k++] = array2[j++];\n}\n```\n> - 可以看出合并有序数列的效率是比较高的，可以达到**O(n)**。\n\n> - 解决了上面的合并有序数列问题，再来看归并排序，其的**基本思路**就是：\n>> - 将数组分成二组A，B，如果这二组组内的数据都是有序的，那么就可以很方 便的将这二组数据进行排序。如何让这二组组内数据有序了？\n>>> - 可以将A，B组各自再分成二组。依次类推，当分出来的小组只有一个数据时，可以认为这个小组组内已经达到了有序，然后再合并相邻的二个小组 就可以了。这样通过先递归的分解数列，再合并数列就完成了归并排序。\n\n### C语言实现代码\n\n\n----------\n\n\n#### **（1）**\n```c\n//将有二个有序数列array[first...mid]和array[mid...last]合并。  \nstatic void mergeArray(int array[], int first, int mid, int last, int temp[])\n{\n\tint i = first, j = mid+1, k = 0;\n\tint n = mid, m = last;\n\twhile (i <= n && j <= m)\n\t{\n\t\tif (array[i] <= array[j])\n\t\t\ttemp[k++] = array[i++];\n\t\telse\n\t\t\ttemp[k++] = array[j++];\t\n\t}\n\twhile (i <= n)\n\t\ttemp[k++] = array[i++];\n\twhile (j <= m)\n\t\ttemp[k++] = array[j++];\n\t//把排序好的数据给array[]\n\tfor (i = 0; i < k; i++)\n\t\tarray[first + i] = temp[i];\n}\n\nstatic void mergeSort(int array[], int first, int last, int temp[])\n{\n\tif (first < last)\n\t{\n\t\tint mid = (first + last) >> 1;//(first + last) / 2;\n\t\t//递归调用\n\t\tmergeSort(array, first, mid, temp);//左边有序\n\t\tmergeSort(array, mid + 1, last, temp);//右边有序\n\t\tmergeArray(array, first, mid, last, temp);//将两个有序数组合并\t\n\t}\n\telse\n\t\treturn;\n}\n\nbool MergeSort(int a[], int n)\n{\n\tint *p = new int[n];\n\tif (p == NULL)\n\t\treturn false;\n\tmergeSort(a, 0, n - 1, p);\n\tdelete[] p;\n\treturn true;\n}\n```\n\n#### **（2）Wiki百科的实现代码**\n\n```c\nvoid merge_sort_recursive(int arr[], int reg[], int start, int end) {\n\tif (start >= end)\n\t\treturn;\n\tint len = end - start, mid = (len >> 1) + start;\n\tint start1 = start, end1 = mid;\n\tint start2 = mid + 1, end2 = end;\n\t//递归\n\tmerge_sort_recursive(arr, reg, start1, end1);\n\tmerge_sort_recursive(arr, reg, start2, end2);\n\tint k = start;\n\twhile (start1 <= end1 && start2 <= end2)\n\t\treg[k++] = arr[start1] < arr[start2] ? arr[start1++] : arr[start2++];\n\twhile (start1 <= end1)\n\t\treg[k++] = arr[start1++];\n\twhile (start2 <= end2)\n\t\treg[k++] = arr[start2++];\n\tfor (k = start; k <= end; k++)\n\t\tarr[k] = reg[k];\n}\nvoid merge_sort(int arr[], const int len) {\n\tint reg[len];\n\tmerge_sort_recursive(arr, reg, 0, len - 1);\n}\n```\n\n### 参考\n\n> (1)CSDN：[http://blog.csdn.net/morewindows/article/details/6678165](http://blog.csdn.net/morewindows/article/details/6678165)\n\n> (2)Wiki百科：[https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F#C.E8.AA.9E.E8.A8.80](https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F#C.E8.AA.9E.E8.A8.80)\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"算法艺术之归并排序","published":1,"updated":"2021-01-10T13:42:20.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzaby000g3clwcay98h1o","content":"<hr>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<ol>\n<li><strong>归并排序</strong>是建立在归并操作上的一种有效的排序算法。该算法是采用分&gt; 治法（Divide and Conquer）的一个非常典型的应用。</li>\n<li>复杂度为：<strong>O(n log n)</strong></li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>首先考虑下如何将将二个有序数列合并。这个非常简单，只要从比较二个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将两个有序数值合并成一个有序数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergeArray</span><span class=\"params\">(<span class=\"keyword\">int</span> array1[], <span class=\"keyword\">int</span> array2[], <span class=\"keyword\">int</span> sizeArr1, <span class=\"keyword\">int</span> sizeArr2, <span class=\"keyword\">int</span> temp[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; sizeArr1 &amp;&amp; j &lt; sizeArr2)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (array1[i] &lt;= array2[j])</span><br><span class=\"line\">\t\t\ttemp[k++] = array1[i++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (array1[i] &gt;= array2[j])</span><br><span class=\"line\">\t\t\ttemp[k++] = array2[j++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; sizeArr1)</span><br><span class=\"line\">\t\ttemp[k++] = array1[i++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (j &lt; sizeArr2)</span><br><span class=\"line\">\t\ttemp[k++] = array2[j++];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>可以看出合并有序数列的效率是比较高的，可以达到**O(n)**。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>解决了上面的合并有序数列问题，再来看归并排序，其的<strong>基本思路</strong>就是：<blockquote>\n<ul>\n<li>将数组分成二组A，B，如果这二组组内的数据都是有序的，那么就可以很方 便的将这二组数据进行排序。如何让这二组组内数据有序了？<blockquote>\n<ul>\n<li>可以将A，B组各自再分成二组。依次类推，当分出来的小组只有一个数据时，可以认为这个小组组内已经达到了有序，然后再合并相邻的二个小组 就可以了。这样通过先递归的分解数列，再合并数列就完成了归并排序。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"C语言实现代码\"><a href=\"#C语言实现代码\" class=\"headerlink\" title=\"C语言实现代码\"></a>C语言实现代码</h3><hr>\n<h4 id=\"（1）\"><a href=\"#（1）\" class=\"headerlink\" title=\"（1）\"></a><strong>（1）</strong></h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将有二个有序数列array[first...mid]和array[mid...last]合并。  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeArray</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> first, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> last, <span class=\"keyword\">int</span> temp[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = first, j = mid+<span class=\"number\">1</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = mid, m = last;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt;= n &amp;&amp; j &lt;= m)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] &lt;= <span class=\"built_in\">array</span>[j])</span><br><span class=\"line\">\t\t\ttemp[k++] = <span class=\"built_in\">array</span>[i++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\ttemp[k++] = <span class=\"built_in\">array</span>[j++];\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt;= n)</span><br><span class=\"line\">\t\ttemp[k++] = <span class=\"built_in\">array</span>[i++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (j &lt;= m)</span><br><span class=\"line\">\t\ttemp[k++] = <span class=\"built_in\">array</span>[j++];</span><br><span class=\"line\">\t<span class=\"comment\">//把排序好的数据给array[]</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; k; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">array</span>[first + i] = temp[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> first, <span class=\"keyword\">int</span> last, <span class=\"keyword\">int</span> temp[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (first &lt; last)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (first + last) &gt;&gt; <span class=\"number\">1</span>;<span class=\"comment\">//(first + last) / 2;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//递归调用</span></span><br><span class=\"line\">\t\tmergeSort(<span class=\"built_in\">array</span>, first, mid, temp);<span class=\"comment\">//左边有序</span></span><br><span class=\"line\">\t\tmergeSort(<span class=\"built_in\">array</span>, mid + <span class=\"number\">1</span>, last, temp);<span class=\"comment\">//右边有序</span></span><br><span class=\"line\">\t\tmergeArray(<span class=\"built_in\">array</span>, first, mid, last, temp);<span class=\"comment\">//将两个有序数组合并\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">MergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *p = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tmergeSort(a, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>, p);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）Wiki百科的实现代码\"><a href=\"#（2）Wiki百科的实现代码\" class=\"headerlink\" title=\"（2）Wiki百科的实现代码\"></a><strong>（2）Wiki百科的实现代码</strong></h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort_recursive</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> reg[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (start &gt;= end)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = end - start, mid = (len &gt;&gt; <span class=\"number\">1</span>) + start;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> start1 = start, end1 = mid;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> start2 = mid + <span class=\"number\">1</span>, end2 = end;</span><br><span class=\"line\">\t<span class=\"comment\">//递归</span></span><br><span class=\"line\">\tmerge_sort_recursive(arr, reg, start1, end1);</span><br><span class=\"line\">\tmerge_sort_recursive(arr, reg, start2, end2);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = start;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</span><br><span class=\"line\">\t\treg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start1 &lt;= end1)</span><br><span class=\"line\">\t\treg[k++] = arr[start1++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start2 &lt;= end2)</span><br><span class=\"line\">\t\treg[k++] = arr[start2++];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (k = start; k &lt;= end; k++)</span><br><span class=\"line\">\t\tarr[k] = reg[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> reg[len];</span><br><span class=\"line\">\tmerge_sort_recursive(arr, reg, <span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>(1)CSDN：<a href=\"http://blog.csdn.net/morewindows/article/details/6678165\">http://blog.csdn.net/morewindows/article/details/6678165</a></p>\n</blockquote>\n<blockquote>\n<p>(2)Wiki百科：<a href=\"https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F#C.E8.AA.9E.E8.A8.80\">https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F#C.E8.AA.9E.E8.A8.80</a></p>\n</blockquote>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":2566,"excerpt":"<hr>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<ol>\n<li><strong>归并排序</strong>是建立在归并操作上的一种有效的排序算法。该算法是采用分&gt; 治法（Divide and Conquer）的一个非常典型的应用。</li>\n<li>复杂度为：<strong>O(n log n)</strong></li>\n</ol>\n</blockquote>","more":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>首先考虑下如何将将二个有序数列合并。这个非常简单，只要从比较二个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将两个有序数值合并成一个有序数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergeArray</span><span class=\"params\">(<span class=\"keyword\">int</span> array1[], <span class=\"keyword\">int</span> array2[], <span class=\"keyword\">int</span> sizeArr1, <span class=\"keyword\">int</span> sizeArr2, <span class=\"keyword\">int</span> temp[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; sizeArr1 &amp;&amp; j &lt; sizeArr2)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (array1[i] &lt;= array2[j])</span><br><span class=\"line\">\t\t\ttemp[k++] = array1[i++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (array1[i] &gt;= array2[j])</span><br><span class=\"line\">\t\t\ttemp[k++] = array2[j++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; sizeArr1)</span><br><span class=\"line\">\t\ttemp[k++] = array1[i++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (j &lt; sizeArr2)</span><br><span class=\"line\">\t\ttemp[k++] = array2[j++];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>可以看出合并有序数列的效率是比较高的，可以达到**O(n)**。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>解决了上面的合并有序数列问题，再来看归并排序，其的<strong>基本思路</strong>就是：<blockquote>\n<ul>\n<li>将数组分成二组A，B，如果这二组组内的数据都是有序的，那么就可以很方 便的将这二组数据进行排序。如何让这二组组内数据有序了？<blockquote>\n<ul>\n<li>可以将A，B组各自再分成二组。依次类推，当分出来的小组只有一个数据时，可以认为这个小组组内已经达到了有序，然后再合并相邻的二个小组 就可以了。这样通过先递归的分解数列，再合并数列就完成了归并排序。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"C语言实现代码\"><a href=\"#C语言实现代码\" class=\"headerlink\" title=\"C语言实现代码\"></a>C语言实现代码</h3><hr>\n<h4 id=\"（1）\"><a href=\"#（1）\" class=\"headerlink\" title=\"（1）\"></a><strong>（1）</strong></h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将有二个有序数列array[first...mid]和array[mid...last]合并。  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeArray</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> first, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> last, <span class=\"keyword\">int</span> temp[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = first, j = mid+<span class=\"number\">1</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = mid, m = last;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt;= n &amp;&amp; j &lt;= m)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] &lt;= <span class=\"built_in\">array</span>[j])</span><br><span class=\"line\">\t\t\ttemp[k++] = <span class=\"built_in\">array</span>[i++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\ttemp[k++] = <span class=\"built_in\">array</span>[j++];\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt;= n)</span><br><span class=\"line\">\t\ttemp[k++] = <span class=\"built_in\">array</span>[i++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (j &lt;= m)</span><br><span class=\"line\">\t\ttemp[k++] = <span class=\"built_in\">array</span>[j++];</span><br><span class=\"line\">\t<span class=\"comment\">//把排序好的数据给array[]</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; k; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">array</span>[first + i] = temp[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> first, <span class=\"keyword\">int</span> last, <span class=\"keyword\">int</span> temp[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (first &lt; last)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (first + last) &gt;&gt; <span class=\"number\">1</span>;<span class=\"comment\">//(first + last) / 2;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//递归调用</span></span><br><span class=\"line\">\t\tmergeSort(<span class=\"built_in\">array</span>, first, mid, temp);<span class=\"comment\">//左边有序</span></span><br><span class=\"line\">\t\tmergeSort(<span class=\"built_in\">array</span>, mid + <span class=\"number\">1</span>, last, temp);<span class=\"comment\">//右边有序</span></span><br><span class=\"line\">\t\tmergeArray(<span class=\"built_in\">array</span>, first, mid, last, temp);<span class=\"comment\">//将两个有序数组合并\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">MergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *p = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tmergeSort(a, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>, p);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）Wiki百科的实现代码\"><a href=\"#（2）Wiki百科的实现代码\" class=\"headerlink\" title=\"（2）Wiki百科的实现代码\"></a><strong>（2）Wiki百科的实现代码</strong></h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort_recursive</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> reg[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (start &gt;= end)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = end - start, mid = (len &gt;&gt; <span class=\"number\">1</span>) + start;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> start1 = start, end1 = mid;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> start2 = mid + <span class=\"number\">1</span>, end2 = end;</span><br><span class=\"line\">\t<span class=\"comment\">//递归</span></span><br><span class=\"line\">\tmerge_sort_recursive(arr, reg, start1, end1);</span><br><span class=\"line\">\tmerge_sort_recursive(arr, reg, start2, end2);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = start;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</span><br><span class=\"line\">\t\treg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start1 &lt;= end1)</span><br><span class=\"line\">\t\treg[k++] = arr[start1++];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (start2 &lt;= end2)</span><br><span class=\"line\">\t\treg[k++] = arr[start2++];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (k = start; k &lt;= end; k++)</span><br><span class=\"line\">\t\tarr[k] = reg[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> reg[len];</span><br><span class=\"line\">\tmerge_sort_recursive(arr, reg, <span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>(1)CSDN：<a href=\"http://blog.csdn.net/morewindows/article/details/6678165\">http://blog.csdn.net/morewindows/article/details/6678165</a></p>\n</blockquote>\n<blockquote>\n<p>(2)Wiki百科：<a href=\"https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F#C.E8.AA.9E.E8.A8.80\">https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F#C.E8.AA.9E.E8.A8.80</a></p>\n</blockquote>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"},{"title":"算法艺术之排序学习心得And总结","date":"2016-09-23T16:50:39.000Z","_content":"------\n\n\n看了一天的排序算法，头都大啦\n算法真心不容易啊\n今儿看了啥？？？\n> - 快速排序\n- 归并排序\n- 插入排序\n- 希尔排序\n\n<!--more-->\n\n- 都是排序。。有点小乱，趁着今晚把学到的这四个排序算法都更新到了博客里，真是高产啊今天~\n- 参考了很多网上的资料，主要还是CSDN和Wiki，发现Wiki上面的代码质量好像都很不错！值得学习\n- 觉得还是写个总结比较合适点，毕竟花了这么长时间了对吧\n- 好！现在本宝宝要开始总结了~\n\n### **快速排序**\n\n> 该方法的基本思想是：\n\n>> 1．先从数列中取出一个数作为基准数。\n\n>> 2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全       放到它的左边。\n\n>> 3．再对左右区间重复第二步，直到各区间只有一个数。(此处用到递归的思想)\n\n### **归并排序**\n\n> - 用到了分治法\n- 将一组不断的二分，直道每个序列只有一个数，可看成是有序序列\n- 然后利用将二个有序数列合并的思想完成排序\n- 运用到递归的思想\n\n### **插入排序**\n\n> 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：\n>> 1. 从第一个元素开始，该元素可以认为已经被排序\n>> 2. 取出下一个元素，在已经排序的元素序列中**从后向前扫描**\n>> 3. 如果该元素（已排序）大于新元素，将该元素移到下一位置\n>> 4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置\n>> 5. 将新元素插入到该位置后\n>> 6. 重复步骤2~5\n\n### **希尔排序**\n\n> 该方法的基本思想是：\n>>先将整个待排元素序列分割成若干个**子序列**（由相隔某个“增量”的元素组成的）分别进行**直接插入排序**，然后依次**缩减增量**再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序\n\n### **寄语**\n\n- 工作还未找到，还不能够懈怠，还有很多不会的呢！\n- 要好好加油了，不然找不到工作就好笑了！！！\n- 明天不看算法了  烧脑！\n- 看看数据结构吧\n- 这也很烧脑啊~我滴天~\n\n### **晚 安 ~**\n\n\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/算法艺术之排序学习心得And总结.md","raw":"---\ntitle: 算法艺术之排序学习心得And总结\ndate: 2016-09-24 00:50:39\ntags:\n- 清新之比\n---\n------\n\n\n看了一天的排序算法，头都大啦\n算法真心不容易啊\n今儿看了啥？？？\n> - 快速排序\n- 归并排序\n- 插入排序\n- 希尔排序\n\n<!--more-->\n\n- 都是排序。。有点小乱，趁着今晚把学到的这四个排序算法都更新到了博客里，真是高产啊今天~\n- 参考了很多网上的资料，主要还是CSDN和Wiki，发现Wiki上面的代码质量好像都很不错！值得学习\n- 觉得还是写个总结比较合适点，毕竟花了这么长时间了对吧\n- 好！现在本宝宝要开始总结了~\n\n### **快速排序**\n\n> 该方法的基本思想是：\n\n>> 1．先从数列中取出一个数作为基准数。\n\n>> 2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全       放到它的左边。\n\n>> 3．再对左右区间重复第二步，直到各区间只有一个数。(此处用到递归的思想)\n\n### **归并排序**\n\n> - 用到了分治法\n- 将一组不断的二分，直道每个序列只有一个数，可看成是有序序列\n- 然后利用将二个有序数列合并的思想完成排序\n- 运用到递归的思想\n\n### **插入排序**\n\n> 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：\n>> 1. 从第一个元素开始，该元素可以认为已经被排序\n>> 2. 取出下一个元素，在已经排序的元素序列中**从后向前扫描**\n>> 3. 如果该元素（已排序）大于新元素，将该元素移到下一位置\n>> 4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置\n>> 5. 将新元素插入到该位置后\n>> 6. 重复步骤2~5\n\n### **希尔排序**\n\n> 该方法的基本思想是：\n>>先将整个待排元素序列分割成若干个**子序列**（由相隔某个“增量”的元素组成的）分别进行**直接插入排序**，然后依次**缩减增量**再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序\n\n### **寄语**\n\n- 工作还未找到，还不能够懈怠，还有很多不会的呢！\n- 要好好加油了，不然找不到工作就好笑了！！！\n- 明天不看算法了  烧脑！\n- 看看数据结构吧\n- 这也很烧脑啊~我滴天~\n\n### **晚 安 ~**\n\n\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"算法艺术之排序学习心得And总结","published":1,"updated":"2021-01-10T13:42:20.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzabz000i3clw65axcqqt","content":"<hr>\n<p>看了一天的排序算法，头都大啦<br>算法真心不容易啊<br>今儿看了啥？？？</p>\n<blockquote>\n<ul>\n<li>快速排序</li>\n</ul>\n</blockquote>\n<ul>\n<li>归并排序</li>\n<li>插入排序</li>\n<li>希尔排序</li>\n</ul>\n<a id=\"more\"></a>\n\n<ul>\n<li>都是排序。。有点小乱，趁着今晚把学到的这四个排序算法都更新到了博客里，真是高产啊今天~</li>\n<li>参考了很多网上的资料，主要还是CSDN和Wiki，发现Wiki上面的代码质量好像都很不错！值得学习</li>\n<li>觉得还是写个总结比较合适点，毕竟花了这么长时间了对吧</li>\n<li>好！现在本宝宝要开始总结了~</li>\n</ul>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a><strong>快速排序</strong></h3><blockquote>\n<p>该方法的基本思想是：</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>1．先从数列中取出一个数作为基准数。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全       放到它的左边。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>3．再对左右区间重复第二步，直到各区间只有一个数。(此处用到递归的思想)</p>\n</blockquote>\n</blockquote>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a><strong>归并排序</strong></h3><blockquote>\n<ul>\n<li>用到了分治法</li>\n</ul>\n</blockquote>\n<ul>\n<li>将一组不断的二分，直道每个序列只有一个数，可看成是有序序列</li>\n<li>然后利用将二个有序数列合并的思想完成排序</li>\n<li>运用到递归的思想</li>\n</ul>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a><strong>插入排序</strong></h3><blockquote>\n<p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>\n<blockquote>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序</li>\n<li>取出下一个元素，在已经排序的元素序列中<strong>从后向前扫描</strong></li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>\n<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>\n<li>将新元素插入到该位置后</li>\n<li>重复步骤2~5</li>\n</ol>\n</blockquote>\n</blockquote>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a><strong>希尔排序</strong></h3><blockquote>\n<p>该方法的基本思想是：</p>\n<blockquote>\n<p>先将整个待排元素序列分割成若干个<strong>子序列</strong>（由相隔某个“增量”的元素组成的）分别进行<strong>直接插入排序</strong>，然后依次<strong>缩减增量</strong>再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序</p>\n</blockquote>\n</blockquote>\n<h3 id=\"寄语\"><a href=\"#寄语\" class=\"headerlink\" title=\"寄语\"></a><strong>寄语</strong></h3><ul>\n<li>工作还未找到，还不能够懈怠，还有很多不会的呢！</li>\n<li>要好好加油了，不然找不到工作就好笑了！！！</li>\n<li>明天不看算法了  烧脑！</li>\n<li>看看数据结构吧</li>\n<li>这也很烧脑啊<del>我滴天</del></li>\n</ul>\n<h3 id=\"晚-安\"><a href=\"#晚-安\" class=\"headerlink\" title=\"晚 安 ~\"></a><strong>晚 安 ~</strong></h3><hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":740,"excerpt":"<hr>\n<p>看了一天的排序算法，头都大啦<br>算法真心不容易啊<br>今儿看了啥？？？</p>\n<blockquote>\n<ul>\n<li>快速排序</li>\n</ul>\n</blockquote>\n<ul>\n<li>归并排序</li>\n<li>插入排序</li>\n<li>希尔排序</li>\n</ul>","more":"<ul>\n<li>都是排序。。有点小乱，趁着今晚把学到的这四个排序算法都更新到了博客里，真是高产啊今天~</li>\n<li>参考了很多网上的资料，主要还是CSDN和Wiki，发现Wiki上面的代码质量好像都很不错！值得学习</li>\n<li>觉得还是写个总结比较合适点，毕竟花了这么长时间了对吧</li>\n<li>好！现在本宝宝要开始总结了~</li>\n</ul>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a><strong>快速排序</strong></h3><blockquote>\n<p>该方法的基本思想是：</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>1．先从数列中取出一个数作为基准数。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全       放到它的左边。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>3．再对左右区间重复第二步，直到各区间只有一个数。(此处用到递归的思想)</p>\n</blockquote>\n</blockquote>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a><strong>归并排序</strong></h3><blockquote>\n<ul>\n<li>用到了分治法</li>\n</ul>\n</blockquote>\n<ul>\n<li>将一组不断的二分，直道每个序列只有一个数，可看成是有序序列</li>\n<li>然后利用将二个有序数列合并的思想完成排序</li>\n<li>运用到递归的思想</li>\n</ul>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a><strong>插入排序</strong></h3><blockquote>\n<p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>\n<blockquote>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序</li>\n<li>取出下一个元素，在已经排序的元素序列中<strong>从后向前扫描</strong></li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>\n<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>\n<li>将新元素插入到该位置后</li>\n<li>重复步骤2~5</li>\n</ol>\n</blockquote>\n</blockquote>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a><strong>希尔排序</strong></h3><blockquote>\n<p>该方法的基本思想是：</p>\n<blockquote>\n<p>先将整个待排元素序列分割成若干个<strong>子序列</strong>（由相隔某个“增量”的元素组成的）分别进行<strong>直接插入排序</strong>，然后依次<strong>缩减增量</strong>再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序</p>\n</blockquote>\n</blockquote>\n<h3 id=\"寄语\"><a href=\"#寄语\" class=\"headerlink\" title=\"寄语\"></a><strong>寄语</strong></h3><ul>\n<li>工作还未找到，还不能够懈怠，还有很多不会的呢！</li>\n<li>要好好加油了，不然找不到工作就好笑了！！！</li>\n<li>明天不看算法了  烧脑！</li>\n<li>看看数据结构吧</li>\n<li>这也很烧脑啊<del>我滴天</del></li>\n</ul>\n<h3 id=\"晚-安\"><a href=\"#晚-安\" class=\"headerlink\" title=\"晚 安 ~\"></a><strong>晚 安 ~</strong></h3><hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"},{"title":"算法艺术之插入排序","date":"2016-09-23T14:40:39.000Z","_content":"------\n\n**在了解希尔排序前，先看看插入排序~**\n\n### 描述\n> - **插入排序**（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建**有序序列**，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入.\n<!--more-->\n> - 插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在**从后向前**扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。\n\n\n### 思路\n\n\n----------\n\n\n#### Wiki百科思路描述\n\n> 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：\n>> 1. 从第一个元素开始，该元素可以认为已经被排序\n>> 2. 取出下一个元素，在已经排序的元素序列中从后向前扫描\n>> 3. 如果该元素（已排序）大于新元素，将该元素移到下一位置\n>> 4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置\n>> 5. 将新元素插入到该位置后\n>> 6. 重复步骤2~5\n\n#### 白话描述\n\n> 设数组为a[0…n-1]\n>> 1. 初始时，a[0]自成1个有序区，无序区为a[1..n-1]。令i=1\n>> 2. 将a[i]并入当前的有序区a[0…i-1]中形成a[0…i]的有序区间。\n>> 3. i++并重复第二步直到i==n-1。排序完成。\n\n### C语言实现代码\n\n\n----------\n\n\n#### 按定义书写\n```c\nvoid Insertsort1(int a[], int n)\n{\n\tint i, j, k;\n\tfor (i = 1; i < n; i++)\n\t{\n\t\t//为a[i]在前面的a[0...i-1]有序区间中找一个合适的位置  \n\t\tfor (j = i - 1; j >= 0; j--)\n\t\t\tif (a[j] < a[i])\n\t\t\t\tbreak;\n\n\t\t//如找到了一个合适的位置  \n\t\tif (j != i - 1)\n\t\t{\n\t\t\t//将比a[i]大的数据向后移  \n\t\t\tint temp = a[i];\n\t\t\tfor (k = i - 1; k > j; k--)\n\t\t\t\ta[k + 1] = a[k];\n\t\t\t//将a[i]放到正确位置上  \n\t\t\ta[k + 1] = temp;\n\t\t}\n\t}\n}\n```\n#### 改进\n\n> - 现在进行一下改写，将搜索和数据后移这二个步骤合并。\n> - 即每次a\\[i\\]先和前面一个数据a\\[i-1\\]比较\n> - 如果a\\[i\\] > a\\[i-1\\]说明a\\[0…i\\]也是有序的，无须调整。\n> - 否则就令j=i-1,temp=a\\[i\\]。\n> - 然后一边将数据a[j]向后移动一边向前搜索，当有数据a\\[j\\] < a\\[i\\]时停止并将temp放到a\\[j + 1\\]处。\n\n```c\nvoid Insertsort2(int a[], int n)\n{\n\tint i, j;\n\tfor (i = 1; i < n; i++)\n\t\tif (a[i] < a[i - 1])\n\t\t{\n\t\t\tint temp = a[i];\n\t\t\tfor (j = i - 1; j >= 0 && a[j] > temp; j--)\n\t\t\t\ta[j + 1] = a[j];\n\t\t\ta[j + 1] = temp;\n\t\t}\n}\n```\n#### 再次改进\n\n> - 再对将a[j]插入到前面a[0…j-1]的有序区间所用的方法进行改写\n> - 用数据交换代替数据后移。\n> - 如果a[j]前一个数据a[j-1]>a[j]，就交换a[j]和a[j-1]，再j\\-\\-直到a[j-1] <= a[j]。这样也可以实现将一个新数据新并入到有序区间。\n```c\nvoid Insertsort3(int a[], int n)\n{\n\tint i, j;\n\tfor (i = 1; i < n; i++)\n\t\tfor (j = i - 1; j >= 0 && a[j] > a[j + 1]; j--)\n\t\t\tSwap(a[j], a[j + 1]);\n}\n```\n#### Wiki百科代码实现\n\n> - Wiki百科和上诉的第二个代码相同\n> - 也偶网友证明说第二个代码的效率最高\n\n```c\nvoid insertion_sort(int arr[], int len) {\n\tint i, j;\n\tint temp;\n\tfor (i = 1; i < len; i++) {\n\t\ttemp = arr[i]; //與已排序的數逐一比較，大於temp時，該數向後移\n\t\tfor (j = i - 1; j >= 0 && arr[j] > temp; j--) //j循环到-1时，由于[[短路求值]](http://zh.wikipedia.org/wiki/短路求值)，不会运算array[-1]\n\t\t\tarr[j + 1] = arr[j];\n\t\t\n                arr[j+1] = temp; //被排序数放到正确的位置\n\t}\n}\n```\n\n### 参考\n\n> (1)CSDN：[http://blog.csdn.net/morewindows/article/details/6665714](http://blog.csdn.net/morewindows/article/details/6665714)\n\n> (2)Wiki百科：[https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F#C.E8.AF.AD.E8.A8.80](https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F#C.E8.AF.AD.E8.A8.80)\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/算法艺术之插入排序.md","raw":"---\ntitle: 算法艺术之插入排序\ndate: 2016-09-23 22:40:39\ntags:\n- 算法\n---\n------\n\n**在了解希尔排序前，先看看插入排序~**\n\n### 描述\n> - **插入排序**（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建**有序序列**，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入.\n<!--more-->\n> - 插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在**从后向前**扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。\n\n\n### 思路\n\n\n----------\n\n\n#### Wiki百科思路描述\n\n> 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：\n>> 1. 从第一个元素开始，该元素可以认为已经被排序\n>> 2. 取出下一个元素，在已经排序的元素序列中从后向前扫描\n>> 3. 如果该元素（已排序）大于新元素，将该元素移到下一位置\n>> 4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置\n>> 5. 将新元素插入到该位置后\n>> 6. 重复步骤2~5\n\n#### 白话描述\n\n> 设数组为a[0…n-1]\n>> 1. 初始时，a[0]自成1个有序区，无序区为a[1..n-1]。令i=1\n>> 2. 将a[i]并入当前的有序区a[0…i-1]中形成a[0…i]的有序区间。\n>> 3. i++并重复第二步直到i==n-1。排序完成。\n\n### C语言实现代码\n\n\n----------\n\n\n#### 按定义书写\n```c\nvoid Insertsort1(int a[], int n)\n{\n\tint i, j, k;\n\tfor (i = 1; i < n; i++)\n\t{\n\t\t//为a[i]在前面的a[0...i-1]有序区间中找一个合适的位置  \n\t\tfor (j = i - 1; j >= 0; j--)\n\t\t\tif (a[j] < a[i])\n\t\t\t\tbreak;\n\n\t\t//如找到了一个合适的位置  \n\t\tif (j != i - 1)\n\t\t{\n\t\t\t//将比a[i]大的数据向后移  \n\t\t\tint temp = a[i];\n\t\t\tfor (k = i - 1; k > j; k--)\n\t\t\t\ta[k + 1] = a[k];\n\t\t\t//将a[i]放到正确位置上  \n\t\t\ta[k + 1] = temp;\n\t\t}\n\t}\n}\n```\n#### 改进\n\n> - 现在进行一下改写，将搜索和数据后移这二个步骤合并。\n> - 即每次a\\[i\\]先和前面一个数据a\\[i-1\\]比较\n> - 如果a\\[i\\] > a\\[i-1\\]说明a\\[0…i\\]也是有序的，无须调整。\n> - 否则就令j=i-1,temp=a\\[i\\]。\n> - 然后一边将数据a[j]向后移动一边向前搜索，当有数据a\\[j\\] < a\\[i\\]时停止并将temp放到a\\[j + 1\\]处。\n\n```c\nvoid Insertsort2(int a[], int n)\n{\n\tint i, j;\n\tfor (i = 1; i < n; i++)\n\t\tif (a[i] < a[i - 1])\n\t\t{\n\t\t\tint temp = a[i];\n\t\t\tfor (j = i - 1; j >= 0 && a[j] > temp; j--)\n\t\t\t\ta[j + 1] = a[j];\n\t\t\ta[j + 1] = temp;\n\t\t}\n}\n```\n#### 再次改进\n\n> - 再对将a[j]插入到前面a[0…j-1]的有序区间所用的方法进行改写\n> - 用数据交换代替数据后移。\n> - 如果a[j]前一个数据a[j-1]>a[j]，就交换a[j]和a[j-1]，再j\\-\\-直到a[j-1] <= a[j]。这样也可以实现将一个新数据新并入到有序区间。\n```c\nvoid Insertsort3(int a[], int n)\n{\n\tint i, j;\n\tfor (i = 1; i < n; i++)\n\t\tfor (j = i - 1; j >= 0 && a[j] > a[j + 1]; j--)\n\t\t\tSwap(a[j], a[j + 1]);\n}\n```\n#### Wiki百科代码实现\n\n> - Wiki百科和上诉的第二个代码相同\n> - 也偶网友证明说第二个代码的效率最高\n\n```c\nvoid insertion_sort(int arr[], int len) {\n\tint i, j;\n\tint temp;\n\tfor (i = 1; i < len; i++) {\n\t\ttemp = arr[i]; //與已排序的數逐一比較，大於temp時，該數向後移\n\t\tfor (j = i - 1; j >= 0 && arr[j] > temp; j--) //j循环到-1时，由于[[短路求值]](http://zh.wikipedia.org/wiki/短路求值)，不会运算array[-1]\n\t\t\tarr[j + 1] = arr[j];\n\t\t\n                arr[j+1] = temp; //被排序数放到正确的位置\n\t}\n}\n```\n\n### 参考\n\n> (1)CSDN：[http://blog.csdn.net/morewindows/article/details/6665714](http://blog.csdn.net/morewindows/article/details/6665714)\n\n> (2)Wiki百科：[https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F#C.E8.AF.AD.E8.A8.80](https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F#C.E8.AF.AD.E8.A8.80)\n\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"算法艺术之插入排序","published":1,"updated":"2021-01-10T13:42:20.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzac0000k3clw5yh5gwn0","content":"<hr>\n<p><strong>在了解希尔排序前，先看看插入排序~</strong></p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<ul>\n<li><strong>插入排序</strong>（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建<strong>有序序列</strong>，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<ul>\n<li>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在<strong>从后向前</strong>扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</li>\n</ul>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><hr>\n<h4 id=\"Wiki百科思路描述\"><a href=\"#Wiki百科思路描述\" class=\"headerlink\" title=\"Wiki百科思路描述\"></a>Wiki百科思路描述</h4><blockquote>\n<p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>\n<blockquote>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>\n<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>\n<li>将新元素插入到该位置后</li>\n<li>重复步骤2~5</li>\n</ol>\n</blockquote>\n</blockquote>\n<h4 id=\"白话描述\"><a href=\"#白话描述\" class=\"headerlink\" title=\"白话描述\"></a>白话描述</h4><blockquote>\n<p>设数组为a[0…n-1]</p>\n<blockquote>\n<ol>\n<li>初始时，a[0]自成1个有序区，无序区为a[1..n-1]。令i=1</li>\n<li>将a[i]并入当前的有序区a[0…i-1]中形成a[0…i]的有序区间。</li>\n<li>i++并重复第二步直到i==n-1。排序完成。</li>\n</ol>\n</blockquote>\n</blockquote>\n<h3 id=\"C语言实现代码\"><a href=\"#C语言实现代码\" class=\"headerlink\" title=\"C语言实现代码\"></a>C语言实现代码</h3><hr>\n<h4 id=\"按定义书写\"><a href=\"#按定义书写\" class=\"headerlink\" title=\"按定义书写\"></a>按定义书写</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertsort1</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, k;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//为a[i]在前面的a[0...i-1]有序区间中找一个合适的位置  </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[j] &lt; a[i])</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//如找到了一个合适的位置  </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j != i - <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将比a[i]大的数据向后移  </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = a[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (k = i - <span class=\"number\">1</span>; k &gt; j; k--)</span><br><span class=\"line\">\t\t\t\ta[k + <span class=\"number\">1</span>] = a[k];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将a[i]放到正确位置上  </span></span><br><span class=\"line\">\t\t\ta[k + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h4><blockquote>\n<ul>\n<li>现在进行一下改写，将搜索和数据后移这二个步骤合并。</li>\n<li>即每次a[i]先和前面一个数据a[i-1]比较</li>\n<li>如果a[i] &gt; a[i-1]说明a[0…i]也是有序的，无须调整。</li>\n<li>否则就令j=i-1,temp=a[i]。</li>\n<li>然后一边将数据a[j]向后移动一边向前搜索，当有数据a[j] &lt; a[i]时停止并将temp放到a[j + 1]处。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertsort2</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] &lt; a[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = a[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; a[j] &gt; temp; j--)</span><br><span class=\"line\">\t\t\t\ta[j + <span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">\t\t\ta[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"再次改进\"><a href=\"#再次改进\" class=\"headerlink\" title=\"再次改进\"></a>再次改进</h4><blockquote>\n<ul>\n<li>再对将a[j]插入到前面a[0…j-1]的有序区间所用的方法进行改写</li>\n<li>用数据交换代替数据后移。</li>\n<li>如果a[j]前一个数据a[j-1]&gt;a[j]，就交换a[j]和a[j-1]，再j--直到a[j-1] &lt;= a[j]。这样也可以实现将一个新数据新并入到有序区间。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertsort3</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; a[j] &gt; a[j + <span class=\"number\">1</span>]; j--)</span><br><span class=\"line\">\t\t\tSwap(a[j], a[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Wiki百科代码实现\"><a href=\"#Wiki百科代码实现\" class=\"headerlink\" title=\"Wiki百科代码实现\"></a>Wiki百科代码实现</h4><blockquote>\n<ul>\n<li>Wiki百科和上诉的第二个代码相同</li>\n<li>也偶网友证明说第二个代码的效率最高</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertion_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\ttemp = arr[i]; <span class=\"comment\">//與已排序的數逐一比較，大於temp時，該數向後移</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp; j--) <span class=\"comment\">//j循环到-1时，由于[[短路求值]](http://zh.wikipedia.org/wiki/短路求值)，不会运算array[-1]</span></span><br><span class=\"line\">\t\t\tarr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp; <span class=\"comment\">//被排序数放到正确的位置</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>(1)CSDN：<a href=\"http://blog.csdn.net/morewindows/article/details/6665714\">http://blog.csdn.net/morewindows/article/details/6665714</a></p>\n</blockquote>\n<blockquote>\n<p>(2)Wiki百科：<a href=\"https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F#C.E8.AF.AD.E8.A8.80\">https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F#C.E8.AF.AD.E8.A8.80</a></p>\n</blockquote>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":1967,"excerpt":"<hr>\n<p><strong>在了解希尔排序前，先看看插入排序~</strong></p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<ul>\n<li><strong>插入排序</strong>（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建<strong>有序序列</strong>，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入.</li>\n</ul>\n</blockquote>","more":"<blockquote>\n<ul>\n<li>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在<strong>从后向前</strong>扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</li>\n</ul>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><hr>\n<h4 id=\"Wiki百科思路描述\"><a href=\"#Wiki百科思路描述\" class=\"headerlink\" title=\"Wiki百科思路描述\"></a>Wiki百科思路描述</h4><blockquote>\n<p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>\n<blockquote>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>\n<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>\n<li>将新元素插入到该位置后</li>\n<li>重复步骤2~5</li>\n</ol>\n</blockquote>\n</blockquote>\n<h4 id=\"白话描述\"><a href=\"#白话描述\" class=\"headerlink\" title=\"白话描述\"></a>白话描述</h4><blockquote>\n<p>设数组为a[0…n-1]</p>\n<blockquote>\n<ol>\n<li>初始时，a[0]自成1个有序区，无序区为a[1..n-1]。令i=1</li>\n<li>将a[i]并入当前的有序区a[0…i-1]中形成a[0…i]的有序区间。</li>\n<li>i++并重复第二步直到i==n-1。排序完成。</li>\n</ol>\n</blockquote>\n</blockquote>\n<h3 id=\"C语言实现代码\"><a href=\"#C语言实现代码\" class=\"headerlink\" title=\"C语言实现代码\"></a>C语言实现代码</h3><hr>\n<h4 id=\"按定义书写\"><a href=\"#按定义书写\" class=\"headerlink\" title=\"按定义书写\"></a>按定义书写</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertsort1</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j, k;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//为a[i]在前面的a[0...i-1]有序区间中找一个合适的位置  </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[j] &lt; a[i])</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//如找到了一个合适的位置  </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j != i - <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将比a[i]大的数据向后移  </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = a[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (k = i - <span class=\"number\">1</span>; k &gt; j; k--)</span><br><span class=\"line\">\t\t\t\ta[k + <span class=\"number\">1</span>] = a[k];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将a[i]放到正确位置上  </span></span><br><span class=\"line\">\t\t\ta[k + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h4><blockquote>\n<ul>\n<li>现在进行一下改写，将搜索和数据后移这二个步骤合并。</li>\n<li>即每次a[i]先和前面一个数据a[i-1]比较</li>\n<li>如果a[i] &gt; a[i-1]说明a[0…i]也是有序的，无须调整。</li>\n<li>否则就令j=i-1,temp=a[i]。</li>\n<li>然后一边将数据a[j]向后移动一边向前搜索，当有数据a[j] &lt; a[i]时停止并将temp放到a[j + 1]处。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertsort2</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a[i] &lt; a[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = a[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; a[j] &gt; temp; j--)</span><br><span class=\"line\">\t\t\t\ta[j + <span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">\t\t\ta[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"再次改进\"><a href=\"#再次改进\" class=\"headerlink\" title=\"再次改进\"></a>再次改进</h4><blockquote>\n<ul>\n<li>再对将a[j]插入到前面a[0…j-1]的有序区间所用的方法进行改写</li>\n<li>用数据交换代替数据后移。</li>\n<li>如果a[j]前一个数据a[j-1]&gt;a[j]，就交换a[j]和a[j-1]，再j--直到a[j-1] &lt;= a[j]。这样也可以实现将一个新数据新并入到有序区间。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertsort3</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; a[j] &gt; a[j + <span class=\"number\">1</span>]; j--)</span><br><span class=\"line\">\t\t\tSwap(a[j], a[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Wiki百科代码实现\"><a href=\"#Wiki百科代码实现\" class=\"headerlink\" title=\"Wiki百科代码实现\"></a>Wiki百科代码实现</h4><blockquote>\n<ul>\n<li>Wiki百科和上诉的第二个代码相同</li>\n<li>也偶网友证明说第二个代码的效率最高</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertion_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\ttemp = arr[i]; <span class=\"comment\">//與已排序的數逐一比較，大於temp時，該數向後移</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp; j--) <span class=\"comment\">//j循环到-1时，由于[[短路求值]](http://zh.wikipedia.org/wiki/短路求值)，不会运算array[-1]</span></span><br><span class=\"line\">\t\t\tarr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp; <span class=\"comment\">//被排序数放到正确的位置</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>(1)CSDN：<a href=\"http://blog.csdn.net/morewindows/article/details/6665714\">http://blog.csdn.net/morewindows/article/details/6665714</a></p>\n</blockquote>\n<blockquote>\n<p>(2)Wiki百科：<a href=\"https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F#C.E8.AF.AD.E8.A8.80\">https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F#C.E8.AF.AD.E8.A8.80</a></p>\n</blockquote>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"},{"title":"字符串的一些库函数实现代码","date":"2016-10-08T13:50:39.000Z","_content":"------\n\n## 关于字符串的一些库函数的实现\n\n\n----------\n\n\n> - 字符串转成整型数\n> - 整型数转成字符串\n> - 字符串复制 strcpy函数实现\n> - 内存复制 memcpy函数实现\n> - 计算字符串长度strlen的实现\n> - 字符串比较strcmp的实现\n> - 字符串中子串的查找strstr的实现\n\n<!--more-->\n\n### 字符串转成整型数\n\n将str转成int类型返回\n\n```c\n//ASCII转换成int\nint asciiToInt(char* str)\n{\n\tint value=0;\n\tchar ptr = *str;\n\tif(*str == '-' || *str == '+')\n\t\tstr++;\n\twhile(*str >= '0'&& *str <= '9')\n\t{\n\t\tvalue *= 10;\n\t\tvalue += *str - '0';\n\t\tstr++;\n\t}\n\tif(ptr == '-')\n\t\tvalue = -value;\n\treturn value;\n}\n```\n\n### 整型数转成字符串\n\n将value转成字符并打印出来\n\n```c\n//int转换成ASCII并输出\nvoid binaryToAscii(unsigned int value)\n{\n\tunsigned int quotient;\n\tchar* s;\n\tquotient=value/10;\n\tif(quotient != 0)\n\t\tbinaryToAscii(quotient);\n\tputchar(value%10+'0');\n}\n```\n### 字符串复制 strcpy函数实现\n\n将src复制到dest中去\n\n```c\nchar* strcpy(char *dest, const char *src)\n{\n\tif(dest==NULL || scr==NULL)\n\t\treturn NULL;\n\tchar* destCopy = dest;\n\twhile((*dest++ = *src++)!='\\0');\n\treturn destCopy;\t\n}\n```\n### 内存复制 memcpy函数实现\n\n指定memFrom中的size字节的内容复制到memTo中去\n\n```c\nvoid *memcpy(void *memTo, const void *memFrom, size_t size)\n{\n\tif(memTo == NULL || memFrom == NULL)\n\t\treturn NULL;\n\tchar* memToCpy=(char*)memTo;\n\tchar* memFromCpy=(char*)memFrom;\n\twhile(size--)\n\t\t*memToCpy++ = *memFromCpy++;\n\treturn memTo;\n}\n```\n\n### 计算字符串长度strlen的实现\n\n返回src中的字节数，不包括'\\0'\n\n```c\nint strlen(const char *scr)\n{\n\tassert(scr != NULL);\n\tconst char *p = scr;\n\twhile(*scr++ != '\\0');\n\treturn (scr-p-1);\n}\n```\n### 字符串比较strcmp的实现\n比较src和dest两个字符串，src==dest 返回0,src\\>dest返回1，src < dest返回-1\n```c\nint my_strcmp(const char* src,const char* dest)\n{\n\tint ret=0;\n\twhile(*dest && !(ret=*(unsigned char*)src-*(unsigned char*)dest))\n\t{\n\t\tsrc++;\n\t\tdest++;\n\t}\n\tif(ret<0)\n\t\tret=-1;\n\telse if(ret>0)\n\t\tret=1;\n\treturn ret;\n}\n```\n\n### 字符串中子串的查找strstr的实现\n在src中查到和sub相同的子串，并返回第一次出现的地址\n```c\nconst char* my_strstr(const char* src,const char* sub)\n{\n\tconst char* bp;\n\tconst char* sp;\n\tif(src==NULL || sub==NULL)\n\t\treturn NULL;\n\twhile(*src)\n\t{\n\t\tbp=src;\n\t\tsp=sub;\n\t\twhile(*bp==*sp)\n\t\t{\n\t\t\tif(*sp)\n\t\t\t\treturn src;\n\t\t\tbp++;\n\t\t\tsp++;\n\t\t}\n\t\tsrc++;\n\t}\n\treturn NULL;\n}\n```\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/字符串的一些库函数实现代码.md","raw":"---\ntitle: 字符串的一些库函数实现代码\ndate: 2016-10-08 21:50:39\ntags:\n- C语言\n---\n------\n\n## 关于字符串的一些库函数的实现\n\n\n----------\n\n\n> - 字符串转成整型数\n> - 整型数转成字符串\n> - 字符串复制 strcpy函数实现\n> - 内存复制 memcpy函数实现\n> - 计算字符串长度strlen的实现\n> - 字符串比较strcmp的实现\n> - 字符串中子串的查找strstr的实现\n\n<!--more-->\n\n### 字符串转成整型数\n\n将str转成int类型返回\n\n```c\n//ASCII转换成int\nint asciiToInt(char* str)\n{\n\tint value=0;\n\tchar ptr = *str;\n\tif(*str == '-' || *str == '+')\n\t\tstr++;\n\twhile(*str >= '0'&& *str <= '9')\n\t{\n\t\tvalue *= 10;\n\t\tvalue += *str - '0';\n\t\tstr++;\n\t}\n\tif(ptr == '-')\n\t\tvalue = -value;\n\treturn value;\n}\n```\n\n### 整型数转成字符串\n\n将value转成字符并打印出来\n\n```c\n//int转换成ASCII并输出\nvoid binaryToAscii(unsigned int value)\n{\n\tunsigned int quotient;\n\tchar* s;\n\tquotient=value/10;\n\tif(quotient != 0)\n\t\tbinaryToAscii(quotient);\n\tputchar(value%10+'0');\n}\n```\n### 字符串复制 strcpy函数实现\n\n将src复制到dest中去\n\n```c\nchar* strcpy(char *dest, const char *src)\n{\n\tif(dest==NULL || scr==NULL)\n\t\treturn NULL;\n\tchar* destCopy = dest;\n\twhile((*dest++ = *src++)!='\\0');\n\treturn destCopy;\t\n}\n```\n### 内存复制 memcpy函数实现\n\n指定memFrom中的size字节的内容复制到memTo中去\n\n```c\nvoid *memcpy(void *memTo, const void *memFrom, size_t size)\n{\n\tif(memTo == NULL || memFrom == NULL)\n\t\treturn NULL;\n\tchar* memToCpy=(char*)memTo;\n\tchar* memFromCpy=(char*)memFrom;\n\twhile(size--)\n\t\t*memToCpy++ = *memFromCpy++;\n\treturn memTo;\n}\n```\n\n### 计算字符串长度strlen的实现\n\n返回src中的字节数，不包括'\\0'\n\n```c\nint strlen(const char *scr)\n{\n\tassert(scr != NULL);\n\tconst char *p = scr;\n\twhile(*scr++ != '\\0');\n\treturn (scr-p-1);\n}\n```\n### 字符串比较strcmp的实现\n比较src和dest两个字符串，src==dest 返回0,src\\>dest返回1，src < dest返回-1\n```c\nint my_strcmp(const char* src,const char* dest)\n{\n\tint ret=0;\n\twhile(*dest && !(ret=*(unsigned char*)src-*(unsigned char*)dest))\n\t{\n\t\tsrc++;\n\t\tdest++;\n\t}\n\tif(ret<0)\n\t\tret=-1;\n\telse if(ret>0)\n\t\tret=1;\n\treturn ret;\n}\n```\n\n### 字符串中子串的查找strstr的实现\n在src中查到和sub相同的子串，并返回第一次出现的地址\n```c\nconst char* my_strstr(const char* src,const char* sub)\n{\n\tconst char* bp;\n\tconst char* sp;\n\tif(src==NULL || sub==NULL)\n\t\treturn NULL;\n\twhile(*src)\n\t{\n\t\tbp=src;\n\t\tsp=sub;\n\t\twhile(*bp==*sp)\n\t\t{\n\t\t\tif(*sp)\n\t\t\t\treturn src;\n\t\t\tbp++;\n\t\t\tsp++;\n\t\t}\n\t\tsrc++;\n\t}\n\treturn NULL;\n}\n```\n--------------------------\n### 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"字符串的一些库函数实现代码","published":1,"updated":"2021-01-10T13:42:20.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzac1000n3clw8k7a6sr2","content":"<hr>\n<h2 id=\"关于字符串的一些库函数的实现\"><a href=\"#关于字符串的一些库函数的实现\" class=\"headerlink\" title=\"关于字符串的一些库函数的实现\"></a>关于字符串的一些库函数的实现</h2><hr>\n<blockquote>\n<ul>\n<li>字符串转成整型数</li>\n<li>整型数转成字符串</li>\n<li>字符串复制 strcpy函数实现</li>\n<li>内存复制 memcpy函数实现</li>\n<li>计算字符串长度strlen的实现</li>\n<li>字符串比较strcmp的实现</li>\n<li>字符串中子串的查找strstr的实现</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"字符串转成整型数\"><a href=\"#字符串转成整型数\" class=\"headerlink\" title=\"字符串转成整型数\"></a>字符串转成整型数</h3><p>将str转成int类型返回</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ASCII转换成int</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">asciiToInt</span><span class=\"params\">(<span class=\"keyword\">char</span>* str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ptr = *str;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(*str == <span class=\"string\">&#x27;-&#x27;</span> || *str == <span class=\"string\">&#x27;+&#x27;</span>)</span><br><span class=\"line\">\t\tstr++;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*str &gt;= <span class=\"string\">&#x27;0&#x27;</span>&amp;&amp; *str &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tvalue *= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tvalue += *str - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\tstr++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ptr == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">\t\tvalue = -value;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"整型数转成字符串\"><a href=\"#整型数转成字符串\" class=\"headerlink\" title=\"整型数转成字符串\"></a>整型数转成字符串</h3><p>将value转成字符并打印出来</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//int转换成ASCII并输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binaryToAscii</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> quotient;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* s;</span><br><span class=\"line\">\tquotient=value/<span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(quotient != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tbinaryToAscii(quotient);</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(value%<span class=\"number\">10</span>+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串复制-strcpy函数实现\"><a href=\"#字符串复制-strcpy函数实现\" class=\"headerlink\" title=\"字符串复制 strcpy函数实现\"></a>字符串复制 strcpy函数实现</h3><p>将src复制到dest中去</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">strcpy</span><span class=\"params\">(<span class=\"keyword\">char</span> *dest, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *src)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(dest==<span class=\"literal\">NULL</span> || scr==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* destCopy = dest;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((*dest++ = *src++)!=<span class=\"string\">&#x27;\\0&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> destCopy;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内存复制-memcpy函数实现\"><a href=\"#内存复制-memcpy函数实现\" class=\"headerlink\" title=\"内存复制 memcpy函数实现\"></a>内存复制 memcpy函数实现</h3><p>指定memFrom中的size字节的内容复制到memTo中去</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">memcpy</span><span class=\"params\">(<span class=\"keyword\">void</span> *memTo, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *memFrom, <span class=\"keyword\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(memTo == <span class=\"literal\">NULL</span> || memFrom == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* memToCpy=(<span class=\"keyword\">char</span>*)memTo;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* memFromCpy=(<span class=\"keyword\">char</span>*)memFrom;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(size--)</span><br><span class=\"line\">\t\t*memToCpy++ = *memFromCpy++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> memTo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算字符串长度strlen的实现\"><a href=\"#计算字符串长度strlen的实现\" class=\"headerlink\" title=\"计算字符串长度strlen的实现\"></a>计算字符串长度strlen的实现</h3><p>返回src中的字节数，不包括’\\0’</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *scr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tassert(scr != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p = scr;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*scr++ != <span class=\"string\">&#x27;\\0&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (scr-p<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串比较strcmp的实现\"><a href=\"#字符串比较strcmp的实现\" class=\"headerlink\" title=\"字符串比较strcmp的实现\"></a>字符串比较strcmp的实现</h3><p>比较src和dest两个字符串，src==dest 返回0,src&gt;dest返回1，src &lt; dest返回-1</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">my_strcmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* src,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* dest)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*dest &amp;&amp; !(ret=*(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)src-*(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)dest))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsrc++;</span><br><span class=\"line\">\t\tdest++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tret=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ret&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tret=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串中子串的查找strstr的实现\"><a href=\"#字符串中子串的查找strstr的实现\" class=\"headerlink\" title=\"字符串中子串的查找strstr的实现\"></a>字符串中子串的查找strstr的实现</h3><p>在src中查到和sub相同的子串，并返回第一次出现的地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">my_strstr</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* src,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sub)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* bp;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sp;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(src==<span class=\"literal\">NULL</span> || sub==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*src)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbp=src;</span><br><span class=\"line\">\t\tsp=sub;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(*bp==*sp)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(*sp)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> src;</span><br><span class=\"line\">\t\t\tbp++;</span><br><span class=\"line\">\t\t\tsp++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsrc++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":1920,"excerpt":"<hr>\n<h2 id=\"关于字符串的一些库函数的实现\"><a href=\"#关于字符串的一些库函数的实现\" class=\"headerlink\" title=\"关于字符串的一些库函数的实现\"></a>关于字符串的一些库函数的实现</h2><hr>\n<blockquote>\n<ul>\n<li>字符串转成整型数</li>\n<li>整型数转成字符串</li>\n<li>字符串复制 strcpy函数实现</li>\n<li>内存复制 memcpy函数实现</li>\n<li>计算字符串长度strlen的实现</li>\n<li>字符串比较strcmp的实现</li>\n<li>字符串中子串的查找strstr的实现</li>\n</ul>\n</blockquote>","more":"<h3 id=\"字符串转成整型数\"><a href=\"#字符串转成整型数\" class=\"headerlink\" title=\"字符串转成整型数\"></a>字符串转成整型数</h3><p>将str转成int类型返回</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ASCII转换成int</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">asciiToInt</span><span class=\"params\">(<span class=\"keyword\">char</span>* str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ptr = *str;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(*str == <span class=\"string\">&#x27;-&#x27;</span> || *str == <span class=\"string\">&#x27;+&#x27;</span>)</span><br><span class=\"line\">\t\tstr++;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*str &gt;= <span class=\"string\">&#x27;0&#x27;</span>&amp;&amp; *str &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tvalue *= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tvalue += *str - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\tstr++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ptr == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">\t\tvalue = -value;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"整型数转成字符串\"><a href=\"#整型数转成字符串\" class=\"headerlink\" title=\"整型数转成字符串\"></a>整型数转成字符串</h3><p>将value转成字符并打印出来</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//int转换成ASCII并输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binaryToAscii</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> quotient;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* s;</span><br><span class=\"line\">\tquotient=value/<span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(quotient != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tbinaryToAscii(quotient);</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(value%<span class=\"number\">10</span>+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串复制-strcpy函数实现\"><a href=\"#字符串复制-strcpy函数实现\" class=\"headerlink\" title=\"字符串复制 strcpy函数实现\"></a>字符串复制 strcpy函数实现</h3><p>将src复制到dest中去</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">strcpy</span><span class=\"params\">(<span class=\"keyword\">char</span> *dest, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *src)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(dest==<span class=\"literal\">NULL</span> || scr==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* destCopy = dest;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((*dest++ = *src++)!=<span class=\"string\">&#x27;\\0&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> destCopy;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内存复制-memcpy函数实现\"><a href=\"#内存复制-memcpy函数实现\" class=\"headerlink\" title=\"内存复制 memcpy函数实现\"></a>内存复制 memcpy函数实现</h3><p>指定memFrom中的size字节的内容复制到memTo中去</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">memcpy</span><span class=\"params\">(<span class=\"keyword\">void</span> *memTo, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *memFrom, <span class=\"keyword\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(memTo == <span class=\"literal\">NULL</span> || memFrom == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* memToCpy=(<span class=\"keyword\">char</span>*)memTo;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* memFromCpy=(<span class=\"keyword\">char</span>*)memFrom;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(size--)</span><br><span class=\"line\">\t\t*memToCpy++ = *memFromCpy++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> memTo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算字符串长度strlen的实现\"><a href=\"#计算字符串长度strlen的实现\" class=\"headerlink\" title=\"计算字符串长度strlen的实现\"></a>计算字符串长度strlen的实现</h3><p>返回src中的字节数，不包括’\\0’</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *scr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tassert(scr != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p = scr;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*scr++ != <span class=\"string\">&#x27;\\0&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (scr-p<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串比较strcmp的实现\"><a href=\"#字符串比较strcmp的实现\" class=\"headerlink\" title=\"字符串比较strcmp的实现\"></a>字符串比较strcmp的实现</h3><p>比较src和dest两个字符串，src==dest 返回0,src&gt;dest返回1，src &lt; dest返回-1</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">my_strcmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* src,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* dest)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*dest &amp;&amp; !(ret=*(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)src-*(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)dest))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsrc++;</span><br><span class=\"line\">\t\tdest++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tret=<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ret&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tret=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串中子串的查找strstr的实现\"><a href=\"#字符串中子串的查找strstr的实现\" class=\"headerlink\" title=\"字符串中子串的查找strstr的实现\"></a>字符串中子串的查找strstr的实现</h3><p>在src中查到和sub相同的子串，并返回第一次出现的地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">my_strstr</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* src,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sub)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* bp;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sp;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(src==<span class=\"literal\">NULL</span> || sub==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*src)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbp=src;</span><br><span class=\"line\">\t\tsp=sub;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(*bp==*sp)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(*sp)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> src;</span><br><span class=\"line\">\t\t\tbp++;</span><br><span class=\"line\">\t\t\tsp++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsrc++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"},{"title":"隐式类型转换","date":"2016-09-12T01:38:39.000Z","_content":"------\n\n## 隐式类型转换\n**隐式类型转换分三种**：\n\n>  1. 算术转换\n>  2. 赋值转换\n>  3. 输出转换\n<!--more-->\n\n### 算术转换\n\n进行算术运算（加、减、乘、除、取余以及符号运算）时，不同类型数招必须转换成`同一类型`的数据才能运算，算术转换原则为：\n\n**整型提升：** 对于所有比int小的类型，包括char, signed char, unsigned char, short, unsigned short,首先会提升为int类型。\n\n在进行运算时，以表达式中`最长类型为主`，将其他类型位据均转换成该类型，如：\n\n> (1)若运算数中有double型或float型，则其他类型数据均转换成double类型进行运算。\n> \n> (2)若运算数中最长的类型为long型．则其他类型数均转换成long型数。\n> \n> (3)若运算数中最长类型为int型，则char型也转换成int型进行运算。算术转换是在运算过程中自动完成的。\n\n**特别注意的是有符号和无符号之间的转换：**\n\n> (1)包含long与unsigned int,32位机器上都是`4字节`，所以均转换为unsigned long.\n\n> (2)包含signed与unsigned int，`signed会转换为unsigned`。如果int恰好为负数，其结果为对unsigned取值个数求模的结果。比如将-1赋给8位的unsigned char，那么结果就是255。unsigned char取值范围0~255。\n\n**注意：**在进行自动类型转换的时候，如果原来的数是无符号数，那么在扩展的时候，高位填充的是0；如果是有符号数，那么高位填充的时符号位！\n\n### 赋值转换\n\n**进行`赋值`操作时，`赋值运算符右边的数据类型必须转换成赋值号左边的类型`，若右边的数据类型的长度大于左边，则要进行截断或舍入操作**。\n\n下面用一实例说明：\n```c\nchar ch;\n\nint i,result;\n\nfloat f;\n\ndouble d;\n\nresult=ch/i+(f*d-i);\n```\n\n> (1)首先计算 ch/i,ch → int型，ch/i → int型。\n> \n> (2)接着计算 f\\*d-i，由于最长型为double型，故f→double型，i→double型，f*d-i→double型。\n> \n> (3)(ch/i)和(f\\*d-i)进行加运算，由于f\\*d-i为double型，故ch/i→double型，ch/i+(f*d-i)→double型。\n> \n> (4)由于result为int型，故ch/i+(f*d-i)→double→int，即进行截断与舍入，最后取值为整型。\n\n### 输出转换\n\n> 在程序中将数据用printf函数以指定格式输出时，当要输出的盐据类型与输出格式不符时，便自动进行类型转换，如一个long型数据用整型格式(%d)输出时，则相当于将long型转换成整型(int)数据输出；一个字符(char）型数据用整型格式输出时，相当于将char型转 换成int型输出。\n\n**注意：** 较长型数据转换成短型数据输出时，其值不能超出短型数据允许的值范围，否则 转换时将出错。\n\n输出的数据类型与输出格式不符时常常发生错误，如：\n\n    int d=9;\n    printf(\"%f\",d);\n\n或\n\n    float c=3.2;\n    printf(\"%d\",c);\n\n将产生错误的结果。\n\n## 参考\n\n**参考自：**[http://blog.csdn.net/hanchaoman/article/details/7827031](http://blog.csdn.net/hanchaoman/article/details/7827031)\n\n--------------------------\n## 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/隐式类型转换.md","raw":"---\ntitle: 隐式类型转换\ndate: 2016-09-12 09:38:39\ntags:\n- C/C++\n---\n------\n\n## 隐式类型转换\n**隐式类型转换分三种**：\n\n>  1. 算术转换\n>  2. 赋值转换\n>  3. 输出转换\n<!--more-->\n\n### 算术转换\n\n进行算术运算（加、减、乘、除、取余以及符号运算）时，不同类型数招必须转换成`同一类型`的数据才能运算，算术转换原则为：\n\n**整型提升：** 对于所有比int小的类型，包括char, signed char, unsigned char, short, unsigned short,首先会提升为int类型。\n\n在进行运算时，以表达式中`最长类型为主`，将其他类型位据均转换成该类型，如：\n\n> (1)若运算数中有double型或float型，则其他类型数据均转换成double类型进行运算。\n> \n> (2)若运算数中最长的类型为long型．则其他类型数均转换成long型数。\n> \n> (3)若运算数中最长类型为int型，则char型也转换成int型进行运算。算术转换是在运算过程中自动完成的。\n\n**特别注意的是有符号和无符号之间的转换：**\n\n> (1)包含long与unsigned int,32位机器上都是`4字节`，所以均转换为unsigned long.\n\n> (2)包含signed与unsigned int，`signed会转换为unsigned`。如果int恰好为负数，其结果为对unsigned取值个数求模的结果。比如将-1赋给8位的unsigned char，那么结果就是255。unsigned char取值范围0~255。\n\n**注意：**在进行自动类型转换的时候，如果原来的数是无符号数，那么在扩展的时候，高位填充的是0；如果是有符号数，那么高位填充的时符号位！\n\n### 赋值转换\n\n**进行`赋值`操作时，`赋值运算符右边的数据类型必须转换成赋值号左边的类型`，若右边的数据类型的长度大于左边，则要进行截断或舍入操作**。\n\n下面用一实例说明：\n```c\nchar ch;\n\nint i,result;\n\nfloat f;\n\ndouble d;\n\nresult=ch/i+(f*d-i);\n```\n\n> (1)首先计算 ch/i,ch → int型，ch/i → int型。\n> \n> (2)接着计算 f\\*d-i，由于最长型为double型，故f→double型，i→double型，f*d-i→double型。\n> \n> (3)(ch/i)和(f\\*d-i)进行加运算，由于f\\*d-i为double型，故ch/i→double型，ch/i+(f*d-i)→double型。\n> \n> (4)由于result为int型，故ch/i+(f*d-i)→double→int，即进行截断与舍入，最后取值为整型。\n\n### 输出转换\n\n> 在程序中将数据用printf函数以指定格式输出时，当要输出的盐据类型与输出格式不符时，便自动进行类型转换，如一个long型数据用整型格式(%d)输出时，则相当于将long型转换成整型(int)数据输出；一个字符(char）型数据用整型格式输出时，相当于将char型转 换成int型输出。\n\n**注意：** 较长型数据转换成短型数据输出时，其值不能超出短型数据允许的值范围，否则 转换时将出错。\n\n输出的数据类型与输出格式不符时常常发生错误，如：\n\n    int d=9;\n    printf(\"%f\",d);\n\n或\n\n    float c=3.2;\n    printf(\"%d\",c);\n\n将产生错误的结果。\n\n## 参考\n\n**参考自：**[http://blog.csdn.net/hanchaoman/article/details/7827031](http://blog.csdn.net/hanchaoman/article/details/7827031)\n\n--------------------------\n## 联系 \n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"隐式类型转换","published":1,"updated":"2021-01-10T13:42:20.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzac2000p3clw60j11v8k","content":"<hr>\n<h2 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h2><p><strong>隐式类型转换分三种</strong>：</p>\n<blockquote>\n<ol>\n<li>算术转换</li>\n<li>赋值转换</li>\n<li>输出转换</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"算术转换\"><a href=\"#算术转换\" class=\"headerlink\" title=\"算术转换\"></a>算术转换</h3><p>进行算术运算（加、减、乘、除、取余以及符号运算）时，不同类型数招必须转换成<code>同一类型</code>的数据才能运算，算术转换原则为：</p>\n<p><strong>整型提升：</strong> 对于所有比int小的类型，包括char, signed char, unsigned char, short, unsigned short,首先会提升为int类型。</p>\n<p>在进行运算时，以表达式中<code>最长类型为主</code>，将其他类型位据均转换成该类型，如：</p>\n<blockquote>\n<p>(1)若运算数中有double型或float型，则其他类型数据均转换成double类型进行运算。</p>\n<p>(2)若运算数中最长的类型为long型．则其他类型数均转换成long型数。</p>\n<p>(3)若运算数中最长类型为int型，则char型也转换成int型进行运算。算术转换是在运算过程中自动完成的。</p>\n</blockquote>\n<p><strong>特别注意的是有符号和无符号之间的转换：</strong></p>\n<blockquote>\n<p>(1)包含long与unsigned int,32位机器上都是<code>4字节</code>，所以均转换为unsigned long.</p>\n</blockquote>\n<blockquote>\n<p>(2)包含signed与unsigned int，<code>signed会转换为unsigned</code>。如果int恰好为负数，其结果为对unsigned取值个数求模的结果。比如将-1赋给8位的unsigned char，那么结果就是255。unsigned char取值范围0~255。</p>\n</blockquote>\n<p><strong>注意：</strong>在进行自动类型转换的时候，如果原来的数是无符号数，那么在扩展的时候，高位填充的是0；如果是有符号数，那么高位填充的时符号位！</p>\n<h3 id=\"赋值转换\"><a href=\"#赋值转换\" class=\"headerlink\" title=\"赋值转换\"></a>赋值转换</h3><p><strong>进行<code>赋值</code>操作时，<code>赋值运算符右边的数据类型必须转换成赋值号左边的类型</code>，若右边的数据类型的长度大于左边，则要进行截断或舍入操作</strong>。</p>\n<p>下面用一实例说明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> ch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> i,result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">float</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> d;</span><br><span class=\"line\"></span><br><span class=\"line\">result=ch/i+(f*d-i);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>(1)首先计算 ch/i,ch → int型，ch/i → int型。</p>\n<p>(2)接着计算 f*d-i，由于最长型为double型，故f→double型，i→double型，f*d-i→double型。</p>\n<p>(3)(ch/i)和(f*d-i)进行加运算，由于f*d-i为double型，故ch/i→double型，ch/i+(f*d-i)→double型。</p>\n<p>(4)由于result为int型，故ch/i+(f*d-i)→double→int，即进行截断与舍入，最后取值为整型。</p>\n</blockquote>\n<h3 id=\"输出转换\"><a href=\"#输出转换\" class=\"headerlink\" title=\"输出转换\"></a>输出转换</h3><blockquote>\n<p>在程序中将数据用printf函数以指定格式输出时，当要输出的盐据类型与输出格式不符时，便自动进行类型转换，如一个long型数据用整型格式(%d)输出时，则相当于将long型转换成整型(int)数据输出；一个字符(char）型数据用整型格式输出时，相当于将char型转 换成int型输出。</p>\n</blockquote>\n<p><strong>注意：</strong> 较长型数据转换成短型数据输出时，其值不能超出短型数据允许的值范围，否则 转换时将出错。</p>\n<p>输出的数据类型与输出格式不符时常常发生错误，如：</p>\n<pre><code>int d=9;\nprintf(&quot;%f&quot;,d);</code></pre>\n<p>或</p>\n<pre><code>float c=3.2;\nprintf(&quot;%d&quot;,c);</code></pre>\n<p>将产生错误的结果。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><strong>参考自：</strong><a href=\"http://blog.csdn.net/hanchaoman/article/details/7827031\">http://blog.csdn.net/hanchaoman/article/details/7827031</a></p>\n<hr>\n<h2 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h2><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":1373,"excerpt":"<hr>\n<h2 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h2><p><strong>隐式类型转换分三种</strong>：</p>\n<blockquote>\n<ol>\n<li>算术转换</li>\n<li>赋值转换</li>\n<li>输出转换</li>\n</ol>\n</blockquote>","more":"<h3 id=\"算术转换\"><a href=\"#算术转换\" class=\"headerlink\" title=\"算术转换\"></a>算术转换</h3><p>进行算术运算（加、减、乘、除、取余以及符号运算）时，不同类型数招必须转换成<code>同一类型</code>的数据才能运算，算术转换原则为：</p>\n<p><strong>整型提升：</strong> 对于所有比int小的类型，包括char, signed char, unsigned char, short, unsigned short,首先会提升为int类型。</p>\n<p>在进行运算时，以表达式中<code>最长类型为主</code>，将其他类型位据均转换成该类型，如：</p>\n<blockquote>\n<p>(1)若运算数中有double型或float型，则其他类型数据均转换成double类型进行运算。</p>\n<p>(2)若运算数中最长的类型为long型．则其他类型数均转换成long型数。</p>\n<p>(3)若运算数中最长类型为int型，则char型也转换成int型进行运算。算术转换是在运算过程中自动完成的。</p>\n</blockquote>\n<p><strong>特别注意的是有符号和无符号之间的转换：</strong></p>\n<blockquote>\n<p>(1)包含long与unsigned int,32位机器上都是<code>4字节</code>，所以均转换为unsigned long.</p>\n</blockquote>\n<blockquote>\n<p>(2)包含signed与unsigned int，<code>signed会转换为unsigned</code>。如果int恰好为负数，其结果为对unsigned取值个数求模的结果。比如将-1赋给8位的unsigned char，那么结果就是255。unsigned char取值范围0~255。</p>\n</blockquote>\n<p><strong>注意：</strong>在进行自动类型转换的时候，如果原来的数是无符号数，那么在扩展的时候，高位填充的是0；如果是有符号数，那么高位填充的时符号位！</p>\n<h3 id=\"赋值转换\"><a href=\"#赋值转换\" class=\"headerlink\" title=\"赋值转换\"></a>赋值转换</h3><p><strong>进行<code>赋值</code>操作时，<code>赋值运算符右边的数据类型必须转换成赋值号左边的类型</code>，若右边的数据类型的长度大于左边，则要进行截断或舍入操作</strong>。</p>\n<p>下面用一实例说明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> ch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> i,result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">float</span> f;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> d;</span><br><span class=\"line\"></span><br><span class=\"line\">result=ch/i+(f*d-i);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>(1)首先计算 ch/i,ch → int型，ch/i → int型。</p>\n<p>(2)接着计算 f*d-i，由于最长型为double型，故f→double型，i→double型，f*d-i→double型。</p>\n<p>(3)(ch/i)和(f*d-i)进行加运算，由于f*d-i为double型，故ch/i→double型，ch/i+(f*d-i)→double型。</p>\n<p>(4)由于result为int型，故ch/i+(f*d-i)→double→int，即进行截断与舍入，最后取值为整型。</p>\n</blockquote>\n<h3 id=\"输出转换\"><a href=\"#输出转换\" class=\"headerlink\" title=\"输出转换\"></a>输出转换</h3><blockquote>\n<p>在程序中将数据用printf函数以指定格式输出时，当要输出的盐据类型与输出格式不符时，便自动进行类型转换，如一个long型数据用整型格式(%d)输出时，则相当于将long型转换成整型(int)数据输出；一个字符(char）型数据用整型格式输出时，相当于将char型转 换成int型输出。</p>\n</blockquote>\n<p><strong>注意：</strong> 较长型数据转换成短型数据输出时，其值不能超出短型数据允许的值范围，否则 转换时将出错。</p>\n<p>输出的数据类型与输出格式不符时常常发生错误，如：</p>\n<pre><code>int d=9;\nprintf(&quot;%f&quot;,d);</code></pre>\n<p>或</p>\n<pre><code>float c=3.2;\nprintf(&quot;%d&quot;,c);</code></pre>\n<p>将产生错误的结果。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><strong>参考自：</strong><a href=\"http://blog.csdn.net/hanchaoman/article/details/7827031\">http://blog.csdn.net/hanchaoman/article/details/7827031</a></p>\n<hr>\n<h2 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h2><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"},{"title":"线性顺序表的实现（C语言版）","date":"2016-09-09T14:38:39.000Z","_content":"------\n\n# **顺序表描述**\n去年学习了一些数据结构，其中最简单的就是顺序线性表。目前刚搭建好了这个平台，于是想来记录一番。\n> 顺序表是在计算机内存中以**数组**的形式保存的**线性表**，是指用一组地址连续的存储单元依次存储数据元素的线性结构。线性表采用顺序存储的方式存储就称之为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。\n<!--more-->\n\n# **顺序表实现**\n\n## 顺序表的初始化\n```c\ntypedef int elemType;\ntypedef int posType;\n//初始化一个结构体\nstruct List\n{\n\telemType *list;//元素类型指针，类似数组\n\tint size;//数据个数\n\tint maxSize;//顺序表大小\n};\n/*参数ms：初始化顺序表的大小*/\nvoid initList(struct List *L , int ms)//初始化顺序表\n{\n\tif(ms <= 0)//参数合理性判断\n\t{\n\t\tprintf(\"MaxSize 非法！ \");\n\t\texit(1);\n\t}\n\tL->maxSize = ms;\n\tL->size = 0;\n\tL->list = malloc(ms*sizeof(elemType));//分配内存\n\tif(!L->list )//分配内存意外情况处理\n\t{\n\t\tprintf(\"空间分配失败！\");\n\t\texit(1);\n\n\t}\n\treturn;\n}\n```\n## 开辟内存\n> realloc()可以对**给定的指针**所指的空间进行扩大或者缩小，无论是扩张或是缩小，`原有内存的中内容将保持不变`.当然，对于缩小，则被缩小的那一部分的内容会丢失.realloc并不保证调整后的内存空间和原来的内存空间保持同一内存地址.相反，`realloc返回的指针很可能指向一个新的地址`.\n```c\nvoid againMalloc(struct List*L)\n{\n    //开辟两倍于当前顺序表大小的内存\n\telemType *p = realloc(L->list ,2*L->maxSize *sizeof(elemType));\n\tif(!p)\n\t{\n\t\tprintf(\"储存空间分配失败！\");\n\t\texit(1);\n\t}\n\tL->list = p;\n\tL->maxSize = 2*L->maxSize ;\n\n}\n```\n## 插入数据操作\n### 从表头插入数据\n\n```C\nvoid insertFirstList(struct List *L, elemType x)\n{\n\tint i;\n\t//判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存\n\tif(L->size == L->maxSize )\n\t{\n\t\tagainMalloc(L);\n\t}\n\t//把表中每个数据往后移动\n\tfor(i = L->size-1; i>=0; i--)\n\t{\n\t\tL->list[i+1] = L->list[i];\n\t}\n\tL->list[0] = x;//表头插入数据\n\tL->size ++;//数据个数加1\n\treturn;\n}\n```\n### 从表尾插入数据\n```c\nvoid insertLastList(struct List *L, elemType x)\n{\n    //判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存\n\tif(L->size == L->maxSize )\n\t{\n\t\tagainMalloc(L);\n\t}\n\tL->list [L->size ] = x;//表尾插入数据\n\tL->size ++;//数据个数加1\n\treturn;\t\n}\n```\n### 从表中某个位置插入数据\n\n```c\n/*\npos:要插入数据的位置；\nx  :要插入的数据\n插入成功返回1，失败返回0；\n*/\nint insertPosList(struct List *L,int pos, elemType x)\n{\n\tint i;\n\tif(pos < 1 || pos > L->size )//输入位置合理性判断\n\t{\n\t\treturn 0;\n\t}\n\t//判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存\n\tif(L->size == L->maxSize )\n\t{\n\t\tagainMalloc(L);\n\t}\n\t//把要插入数据的位置上数据以及之后的数据，都往后移动一个位置\n\tfor(i = L->size-1; i>=pos-1; i--)\n\t{\n\t\tL->list [i+1] = L->list [i];\n\t}\n\tL->list [pos-1] = x;//当前位置插入数据\n\tL->size ++;//数据个数加1\n\treturn 1;//插入成功则返回1\n}\n```\n## 删除数据操作\n### 从表头删除数据\n从表头删除数据的操作即：把第一个数据之后的数据都往前移动一个位置，由此把表头的数据给顶出去\n```c\n/*删除成功则返回被删除的数据*/\nelemType deleteFirstList(struct List *L)\n{\n\telemType temp;\n\tint i;\n\tif(L->size == 0)//合理性判断\n\t{\n\t\tprintf(\"线性表为空，不能进行删除操作！\");\n\t\texit(1);\n\t}\n\ttemp = L->list [0];\n\t//把第一个数据之后的数据都往前移动一个位置\n\tfor(i=1 ; i < L->size ; i++)\n\t{\n\t\tL->list [i-1] = L->list [i];\n\t}\n\tL->size --;//数据个数-1\n\treturn temp;\n}\n```\n### 从表尾删除数据\n```c\n/*删除成功则返回被删除的数据*/\nelemType deleteLastList(struct List *L)\n{\n\telemType temp;\n\tif(L->size == 0)//合理性判断\n\t{\n\t\tprintf(\"线性表为空，不能进行删除操作！\");\n\t\texit(1);\n\t}\n\ttemp = L->list[L->size ];//删除表尾数据\n\tL->size --;//数据个数-1\n\treturn temp;\n}\n```\n### 删除表中某个位置的数据\n```c\n/*\npos：要删除数据的位置\n说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始\n*/\nelemType deletePosList(struct List *L, int pos)\n{\n\telemType temp;\n\tint i;\n\tif(pos < 1 || pos > L->size )//合理性判断\n\t{\n\t\tprintf(\"pos越界，不能进行删除操作！\");\n\t\texit(1);\n\t}\n\t//把pos之后的所有数据都往前移动一个位置，由此把pos上的数据踢掉\n\tfor(i = pos-1; i < L->size; i++)\n\t{\n\t\tL->list[i] = L->list [i+1];\n\t}\n\ttemp = L->list [pos-1];\n\tL->size --;//数据个数-1\n\treturn temp;//返回删除的数据\t\n}\n```\n### 删除表中具体值的数据\n```c\n/*\nx：要删除的数据\n删除成功返回1\n*/\nint deleteValueList(struct List *L, elemType x)\n{\n\tint i,j;\n\t//遍历顺序表，找出与x相等的数据所在的位置i\n\tfor(i = 0 ; i < L->size; i++ )\n\t{\n\t\tif(L->list [i] == x)\n\t\t\tbreak;\n\t}\n\t//合理性判断\n\tif(i == L->size )\n\t{\n\t\treturn 0;\n\t}\n\t//把i之后的每个数据往前移动一个位置，由此把i上的数据踢掉\n\tfor(j = i+1; j < L->size ; j++)\n\t{\n\t\tL->list [j-1] = L->list [j];\n\t}\n\tL->size --;//数据个数-1\n\treturn 1;//删除成功返回1\n} \n```\n## 单个数据操作\n### 替某个位置的换数据\n```c\n/*\n把第pos个的数据替换成x\n替换成功返回1，否则返回0\n说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始\n*/\nint updatePosList(struct List *L, int pos, elemType x)\n{\n    //合理性判断处理\n\tif(pos < 1 || pos > L->size )\n\t{\n\t\treturn 0;\n\t}\n\tL->list[pos-1] = x;//替换第pos个数据\n\treturn 1;\n}\n```\n\n### 获取数据位置\n```c\n/*\n返回数据x所在的位置，失败返回0\n说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始\n*/\nint findList(struct List *L, elemType x)\n{\n\tint i;\n\tfor(i = 0; i < L->size ; i++)\n\t{\n\t\tif(L->list[i] == x)\n\t\t{\n\t\t\treturn i+1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n### 获取相应位置的数据\n```c\n/*\n返回第pos个数据，失败退出\n说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始\n*/\nelemType getElem(struct List *L, int pos)\n{\n\telemType temp;\n\t//合理性判断处理\n\tif(pos<1 || pos > L->size )\n\t{\n\t\tprintf(\"元素序号越界！\");\n\t\texit(1);\n\t}\n\ttemp = L->list [pos-1];\n\treturn temp;\n}\n```\n\n## 整个顺序表操作\n### 遍历顺序表（打印表中所有数据）\n```c\nvoid traverseList(struct List *L)\n{\n\tint i;\n\tprintf(\"当前顺序表中的数据为：\");\n\t//循环遍历顺序表并打印\n\tfor(i = 0; i<L->size; i++)\n\t{\n\t\tprintf(\"%d  \", L->list[i]);\n\n\t}\n\tprintf(\" \\n\");\n\treturn;\n\n}\n```\n### 打印表中数据个数\n```c\nint sizeList(struct List *L)\n{\n\tprintf(\"表中数据个数为: %d\\n \" , L->size );\n\treturn L->size ;\n}\n```\n### 清除表中所有数据\n```c\nvoid clearList(struct List *L)\n{\n\tif(L->list != NULL)\n\t{\n\t\tfree(L->list );//回收分配的内存\n\t\tL->list =0;//置0\n\t\tL->size = L->maxSize = 0;//置0\n\t}\n\treturn;\n}\n```\n\n### 联系 ###\n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","source":"_posts/线性顺序表的实现（C语言版）.md","raw":"---\ntitle: 线性顺序表的实现（C语言版）\ndate: 2016-09-09 22:38:39\ntags:\n- 数据结构\n---\n------\n\n# **顺序表描述**\n去年学习了一些数据结构，其中最简单的就是顺序线性表。目前刚搭建好了这个平台，于是想来记录一番。\n> 顺序表是在计算机内存中以**数组**的形式保存的**线性表**，是指用一组地址连续的存储单元依次存储数据元素的线性结构。线性表采用顺序存储的方式存储就称之为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。\n<!--more-->\n\n# **顺序表实现**\n\n## 顺序表的初始化\n```c\ntypedef int elemType;\ntypedef int posType;\n//初始化一个结构体\nstruct List\n{\n\telemType *list;//元素类型指针，类似数组\n\tint size;//数据个数\n\tint maxSize;//顺序表大小\n};\n/*参数ms：初始化顺序表的大小*/\nvoid initList(struct List *L , int ms)//初始化顺序表\n{\n\tif(ms <= 0)//参数合理性判断\n\t{\n\t\tprintf(\"MaxSize 非法！ \");\n\t\texit(1);\n\t}\n\tL->maxSize = ms;\n\tL->size = 0;\n\tL->list = malloc(ms*sizeof(elemType));//分配内存\n\tif(!L->list )//分配内存意外情况处理\n\t{\n\t\tprintf(\"空间分配失败！\");\n\t\texit(1);\n\n\t}\n\treturn;\n}\n```\n## 开辟内存\n> realloc()可以对**给定的指针**所指的空间进行扩大或者缩小，无论是扩张或是缩小，`原有内存的中内容将保持不变`.当然，对于缩小，则被缩小的那一部分的内容会丢失.realloc并不保证调整后的内存空间和原来的内存空间保持同一内存地址.相反，`realloc返回的指针很可能指向一个新的地址`.\n```c\nvoid againMalloc(struct List*L)\n{\n    //开辟两倍于当前顺序表大小的内存\n\telemType *p = realloc(L->list ,2*L->maxSize *sizeof(elemType));\n\tif(!p)\n\t{\n\t\tprintf(\"储存空间分配失败！\");\n\t\texit(1);\n\t}\n\tL->list = p;\n\tL->maxSize = 2*L->maxSize ;\n\n}\n```\n## 插入数据操作\n### 从表头插入数据\n\n```C\nvoid insertFirstList(struct List *L, elemType x)\n{\n\tint i;\n\t//判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存\n\tif(L->size == L->maxSize )\n\t{\n\t\tagainMalloc(L);\n\t}\n\t//把表中每个数据往后移动\n\tfor(i = L->size-1; i>=0; i--)\n\t{\n\t\tL->list[i+1] = L->list[i];\n\t}\n\tL->list[0] = x;//表头插入数据\n\tL->size ++;//数据个数加1\n\treturn;\n}\n```\n### 从表尾插入数据\n```c\nvoid insertLastList(struct List *L, elemType x)\n{\n    //判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存\n\tif(L->size == L->maxSize )\n\t{\n\t\tagainMalloc(L);\n\t}\n\tL->list [L->size ] = x;//表尾插入数据\n\tL->size ++;//数据个数加1\n\treturn;\t\n}\n```\n### 从表中某个位置插入数据\n\n```c\n/*\npos:要插入数据的位置；\nx  :要插入的数据\n插入成功返回1，失败返回0；\n*/\nint insertPosList(struct List *L,int pos, elemType x)\n{\n\tint i;\n\tif(pos < 1 || pos > L->size )//输入位置合理性判断\n\t{\n\t\treturn 0;\n\t}\n\t//判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存\n\tif(L->size == L->maxSize )\n\t{\n\t\tagainMalloc(L);\n\t}\n\t//把要插入数据的位置上数据以及之后的数据，都往后移动一个位置\n\tfor(i = L->size-1; i>=pos-1; i--)\n\t{\n\t\tL->list [i+1] = L->list [i];\n\t}\n\tL->list [pos-1] = x;//当前位置插入数据\n\tL->size ++;//数据个数加1\n\treturn 1;//插入成功则返回1\n}\n```\n## 删除数据操作\n### 从表头删除数据\n从表头删除数据的操作即：把第一个数据之后的数据都往前移动一个位置，由此把表头的数据给顶出去\n```c\n/*删除成功则返回被删除的数据*/\nelemType deleteFirstList(struct List *L)\n{\n\telemType temp;\n\tint i;\n\tif(L->size == 0)//合理性判断\n\t{\n\t\tprintf(\"线性表为空，不能进行删除操作！\");\n\t\texit(1);\n\t}\n\ttemp = L->list [0];\n\t//把第一个数据之后的数据都往前移动一个位置\n\tfor(i=1 ; i < L->size ; i++)\n\t{\n\t\tL->list [i-1] = L->list [i];\n\t}\n\tL->size --;//数据个数-1\n\treturn temp;\n}\n```\n### 从表尾删除数据\n```c\n/*删除成功则返回被删除的数据*/\nelemType deleteLastList(struct List *L)\n{\n\telemType temp;\n\tif(L->size == 0)//合理性判断\n\t{\n\t\tprintf(\"线性表为空，不能进行删除操作！\");\n\t\texit(1);\n\t}\n\ttemp = L->list[L->size ];//删除表尾数据\n\tL->size --;//数据个数-1\n\treturn temp;\n}\n```\n### 删除表中某个位置的数据\n```c\n/*\npos：要删除数据的位置\n说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始\n*/\nelemType deletePosList(struct List *L, int pos)\n{\n\telemType temp;\n\tint i;\n\tif(pos < 1 || pos > L->size )//合理性判断\n\t{\n\t\tprintf(\"pos越界，不能进行删除操作！\");\n\t\texit(1);\n\t}\n\t//把pos之后的所有数据都往前移动一个位置，由此把pos上的数据踢掉\n\tfor(i = pos-1; i < L->size; i++)\n\t{\n\t\tL->list[i] = L->list [i+1];\n\t}\n\ttemp = L->list [pos-1];\n\tL->size --;//数据个数-1\n\treturn temp;//返回删除的数据\t\n}\n```\n### 删除表中具体值的数据\n```c\n/*\nx：要删除的数据\n删除成功返回1\n*/\nint deleteValueList(struct List *L, elemType x)\n{\n\tint i,j;\n\t//遍历顺序表，找出与x相等的数据所在的位置i\n\tfor(i = 0 ; i < L->size; i++ )\n\t{\n\t\tif(L->list [i] == x)\n\t\t\tbreak;\n\t}\n\t//合理性判断\n\tif(i == L->size )\n\t{\n\t\treturn 0;\n\t}\n\t//把i之后的每个数据往前移动一个位置，由此把i上的数据踢掉\n\tfor(j = i+1; j < L->size ; j++)\n\t{\n\t\tL->list [j-1] = L->list [j];\n\t}\n\tL->size --;//数据个数-1\n\treturn 1;//删除成功返回1\n} \n```\n## 单个数据操作\n### 替某个位置的换数据\n```c\n/*\n把第pos个的数据替换成x\n替换成功返回1，否则返回0\n说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始\n*/\nint updatePosList(struct List *L, int pos, elemType x)\n{\n    //合理性判断处理\n\tif(pos < 1 || pos > L->size )\n\t{\n\t\treturn 0;\n\t}\n\tL->list[pos-1] = x;//替换第pos个数据\n\treturn 1;\n}\n```\n\n### 获取数据位置\n```c\n/*\n返回数据x所在的位置，失败返回0\n说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始\n*/\nint findList(struct List *L, elemType x)\n{\n\tint i;\n\tfor(i = 0; i < L->size ; i++)\n\t{\n\t\tif(L->list[i] == x)\n\t\t{\n\t\t\treturn i+1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n### 获取相应位置的数据\n```c\n/*\n返回第pos个数据，失败退出\n说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始\n*/\nelemType getElem(struct List *L, int pos)\n{\n\telemType temp;\n\t//合理性判断处理\n\tif(pos<1 || pos > L->size )\n\t{\n\t\tprintf(\"元素序号越界！\");\n\t\texit(1);\n\t}\n\ttemp = L->list [pos-1];\n\treturn temp;\n}\n```\n\n## 整个顺序表操作\n### 遍历顺序表（打印表中所有数据）\n```c\nvoid traverseList(struct List *L)\n{\n\tint i;\n\tprintf(\"当前顺序表中的数据为：\");\n\t//循环遍历顺序表并打印\n\tfor(i = 0; i<L->size; i++)\n\t{\n\t\tprintf(\"%d  \", L->list[i]);\n\n\t}\n\tprintf(\" \\n\");\n\treturn;\n\n}\n```\n### 打印表中数据个数\n```c\nint sizeList(struct List *L)\n{\n\tprintf(\"表中数据个数为: %d\\n \" , L->size );\n\treturn L->size ;\n}\n```\n### 清除表中所有数据\n```c\nvoid clearList(struct List *L)\n{\n\tif(L->list != NULL)\n\t{\n\t\tfree(L->list );//回收分配的内存\n\t\tL->list =0;//置0\n\t\tL->size = L->maxSize = 0;//置0\n\t}\n\treturn;\n}\n```\n\n### 联系 ###\n> - 博客：[fumasterlin.com](www.fumasterlin.com)\n> - 邮箱：[fumasterlin@163.com](fumasterlin@163.com)\n\n\n","slug":"线性顺序表的实现（C语言版）","published":1,"updated":"2021-01-10T13:42:20.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk2mzac3000s3clwf55fh4a1","content":"<hr>\n<h1 id=\"顺序表描述\"><a href=\"#顺序表描述\" class=\"headerlink\" title=\"顺序表描述\"></a><strong>顺序表描述</strong></h1><p>去年学习了一些数据结构，其中最简单的就是顺序线性表。目前刚搭建好了这个平台，于是想来记录一番。</p>\n<blockquote>\n<p>顺序表是在计算机内存中以<strong>数组</strong>的形式保存的<strong>线性表</strong>，是指用一组地址连续的存储单元依次存储数据元素的线性结构。线性表采用顺序存储的方式存储就称之为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"顺序表实现\"><a href=\"#顺序表实现\" class=\"headerlink\" title=\"顺序表实现\"></a><strong>顺序表实现</strong></h1><h2 id=\"顺序表的初始化\"><a href=\"#顺序表的初始化\" class=\"headerlink\" title=\"顺序表的初始化\"></a>顺序表的初始化</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> elemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> posType;</span><br><span class=\"line\"><span class=\"comment\">//初始化一个结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">List</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\telemType *<span class=\"built_in\">list</span>;<span class=\"comment\">//元素类型指针，类似数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size;<span class=\"comment\">//数据个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> maxSize;<span class=\"comment\">//顺序表大小</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*参数ms：初始化顺序表的大小*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initList</span><span class=\"params\">(struct List *L , <span class=\"keyword\">int</span> ms)</span><span class=\"comment\">//初始化顺序表</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ms &lt;= <span class=\"number\">0</span>)<span class=\"comment\">//参数合理性判断</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;MaxSize 非法！ &quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;maxSize = ms;</span><br><span class=\"line\">\tL-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span> = <span class=\"built_in\">malloc</span>(ms*<span class=\"keyword\">sizeof</span>(elemType));<span class=\"comment\">//分配内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!L-&gt;<span class=\"built_in\">list</span> )<span class=\"comment\">//分配内存意外情况处理</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;空间分配失败！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开辟内存\"><a href=\"#开辟内存\" class=\"headerlink\" title=\"开辟内存\"></a>开辟内存</h2><blockquote>\n<p>realloc()可以对<strong>给定的指针</strong>所指的空间进行扩大或者缩小，无论是扩张或是缩小，<code>原有内存的中内容将保持不变</code>.当然，对于缩小，则被缩小的那一部分的内容会丢失.realloc并不保证调整后的内存空间和原来的内存空间保持同一内存地址.相反，<code>realloc返回的指针很可能指向一个新的地址</code>.</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">againMalloc</span><span class=\"params\">(struct List*L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//开辟两倍于当前顺序表大小的内存</span></span><br><span class=\"line\">\telemType *p = <span class=\"built_in\">realloc</span>(L-&gt;<span class=\"built_in\">list</span> ,<span class=\"number\">2</span>*L-&gt;maxSize *<span class=\"keyword\">sizeof</span>(elemType));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;储存空间分配失败！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span> = p;</span><br><span class=\"line\">\tL-&gt;maxSize = <span class=\"number\">2</span>*L-&gt;maxSize ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入数据操作\"><a href=\"#插入数据操作\" class=\"headerlink\" title=\"插入数据操作\"></a>插入数据操作</h2><h3 id=\"从表头插入数据\"><a href=\"#从表头插入数据\" class=\"headerlink\" title=\"从表头插入数据\"></a>从表头插入数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertFirstList</span><span class=\"params\">(struct List *L, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"comment\">//判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;size == L-&gt;maxSize )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagainMalloc(L);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//把表中每个数据往后移动</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = L-&gt;size<span class=\"number\">-1</span>; i&gt;=<span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span>[i+<span class=\"number\">1</span>] = L-&gt;<span class=\"built_in\">list</span>[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span>[<span class=\"number\">0</span>] = x;<span class=\"comment\">//表头插入数据</span></span><br><span class=\"line\">\tL-&gt;size ++;<span class=\"comment\">//数据个数加1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"从表尾插入数据\"><a href=\"#从表尾插入数据\" class=\"headerlink\" title=\"从表尾插入数据\"></a>从表尾插入数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertLastList</span><span class=\"params\">(struct List *L, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;size == L-&gt;maxSize )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagainMalloc(L);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span> [L-&gt;size ] = x;<span class=\"comment\">//表尾插入数据</span></span><br><span class=\"line\">\tL-&gt;size ++;<span class=\"comment\">//数据个数加1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"从表中某个位置插入数据\"><a href=\"#从表中某个位置插入数据\" class=\"headerlink\" title=\"从表中某个位置插入数据\"></a>从表中某个位置插入数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">pos:要插入数据的位置；</span></span><br><span class=\"line\"><span class=\"comment\">x  :要插入的数据</span></span><br><span class=\"line\"><span class=\"comment\">插入成功返回1，失败返回0；</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insertPosList</span><span class=\"params\">(struct List *L,<span class=\"keyword\">int</span> pos, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt; <span class=\"number\">1</span> || pos &gt; L-&gt;size )<span class=\"comment\">//输入位置合理性判断</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;size == L-&gt;maxSize )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagainMalloc(L);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//把要插入数据的位置上数据以及之后的数据，都往后移动一个位置</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = L-&gt;size<span class=\"number\">-1</span>; i&gt;=pos<span class=\"number\">-1</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span> [i+<span class=\"number\">1</span>] = L-&gt;<span class=\"built_in\">list</span> [i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span> [pos<span class=\"number\">-1</span>] = x;<span class=\"comment\">//当前位置插入数据</span></span><br><span class=\"line\">\tL-&gt;size ++;<span class=\"comment\">//数据个数加1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//插入成功则返回1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除数据操作\"><a href=\"#删除数据操作\" class=\"headerlink\" title=\"删除数据操作\"></a>删除数据操作</h2><h3 id=\"从表头删除数据\"><a href=\"#从表头删除数据\" class=\"headerlink\" title=\"从表头删除数据\"></a>从表头删除数据</h3><p>从表头删除数据的操作即：把第一个数据之后的数据都往前移动一个位置，由此把表头的数据给顶出去</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*删除成功则返回被删除的数据*/</span></span><br><span class=\"line\"><span class=\"function\">elemType <span class=\"title\">deleteFirstList</span><span class=\"params\">(struct List *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\telemType temp;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;size == <span class=\"number\">0</span>)<span class=\"comment\">//合理性判断</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;线性表为空，不能进行删除操作！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemp = L-&gt;<span class=\"built_in\">list</span> [<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//把第一个数据之后的数据都往前移动一个位置</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span> ; i &lt; L-&gt;size ; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span> [i<span class=\"number\">-1</span>] = L-&gt;<span class=\"built_in\">list</span> [i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;size --;<span class=\"comment\">//数据个数-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"从表尾删除数据\"><a href=\"#从表尾删除数据\" class=\"headerlink\" title=\"从表尾删除数据\"></a>从表尾删除数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*删除成功则返回被删除的数据*/</span></span><br><span class=\"line\"><span class=\"function\">elemType <span class=\"title\">deleteLastList</span><span class=\"params\">(struct List *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\telemType temp;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;size == <span class=\"number\">0</span>)<span class=\"comment\">//合理性判断</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;线性表为空，不能进行删除操作！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemp = L-&gt;<span class=\"built_in\">list</span>[L-&gt;size ];<span class=\"comment\">//删除表尾数据</span></span><br><span class=\"line\">\tL-&gt;size --;<span class=\"comment\">//数据个数-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除表中某个位置的数据\"><a href=\"#删除表中某个位置的数据\" class=\"headerlink\" title=\"删除表中某个位置的数据\"></a>删除表中某个位置的数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">pos：要删除数据的位置</span></span><br><span class=\"line\"><span class=\"comment\">说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">elemType <span class=\"title\">deletePosList</span><span class=\"params\">(struct List *L, <span class=\"keyword\">int</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\telemType temp;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt; <span class=\"number\">1</span> || pos &gt; L-&gt;size )<span class=\"comment\">//合理性判断</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pos越界，不能进行删除操作！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//把pos之后的所有数据都往前移动一个位置，由此把pos上的数据踢掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = pos<span class=\"number\">-1</span>; i &lt; L-&gt;size; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span>[i] = L-&gt;<span class=\"built_in\">list</span> [i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemp = L-&gt;<span class=\"built_in\">list</span> [pos<span class=\"number\">-1</span>];</span><br><span class=\"line\">\tL-&gt;size --;<span class=\"comment\">//数据个数-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;<span class=\"comment\">//返回删除的数据\t</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除表中具体值的数据\"><a href=\"#删除表中具体值的数据\" class=\"headerlink\" title=\"删除表中具体值的数据\"></a>删除表中具体值的数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">x：要删除的数据</span></span><br><span class=\"line\"><span class=\"comment\">删除成功返回1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">deleteValueList</span><span class=\"params\">(struct List *L, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历顺序表，找出与x相等的数据所在的位置i</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; L-&gt;size; i++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(L-&gt;<span class=\"built_in\">list</span> [i] == x)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//合理性判断</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i == L-&gt;size )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//把i之后的每个数据往前移动一个位置，由此把i上的数据踢掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(j = i+<span class=\"number\">1</span>; j &lt; L-&gt;size ; j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span> [j<span class=\"number\">-1</span>] = L-&gt;<span class=\"built_in\">list</span> [j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;size --;<span class=\"comment\">//数据个数-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//删除成功返回1</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"单个数据操作\"><a href=\"#单个数据操作\" class=\"headerlink\" title=\"单个数据操作\"></a>单个数据操作</h2><h3 id=\"替某个位置的换数据\"><a href=\"#替某个位置的换数据\" class=\"headerlink\" title=\"替某个位置的换数据\"></a>替某个位置的换数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">把第pos个的数据替换成x</span></span><br><span class=\"line\"><span class=\"comment\">替换成功返回1，否则返回0</span></span><br><span class=\"line\"><span class=\"comment\">说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updatePosList</span><span class=\"params\">(struct List *L, <span class=\"keyword\">int</span> pos, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//合理性判断处理</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt; <span class=\"number\">1</span> || pos &gt; L-&gt;size )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span>[pos<span class=\"number\">-1</span>] = x;<span class=\"comment\">//替换第pos个数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取数据位置\"><a href=\"#获取数据位置\" class=\"headerlink\" title=\"获取数据位置\"></a>获取数据位置</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">返回数据x所在的位置，失败返回0</span></span><br><span class=\"line\"><span class=\"comment\">说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findList</span><span class=\"params\">(struct List *L, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; L-&gt;size ; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(L-&gt;<span class=\"built_in\">list</span>[i] == x)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取相应位置的数据\"><a href=\"#获取相应位置的数据\" class=\"headerlink\" title=\"获取相应位置的数据\"></a>获取相应位置的数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">返回第pos个数据，失败退出</span></span><br><span class=\"line\"><span class=\"comment\">说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">elemType <span class=\"title\">getElem</span><span class=\"params\">(struct List *L, <span class=\"keyword\">int</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\telemType temp;</span><br><span class=\"line\">\t<span class=\"comment\">//合理性判断处理</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos&lt;<span class=\"number\">1</span> || pos &gt; L-&gt;size )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;元素序号越界！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemp = L-&gt;<span class=\"built_in\">list</span> [pos<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"整个顺序表操作\"><a href=\"#整个顺序表操作\" class=\"headerlink\" title=\"整个顺序表操作\"></a>整个顺序表操作</h2><h3 id=\"遍历顺序表（打印表中所有数据）\"><a href=\"#遍历顺序表（打印表中所有数据）\" class=\"headerlink\" title=\"遍历顺序表（打印表中所有数据）\"></a>遍历顺序表（打印表中所有数据）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverseList</span><span class=\"params\">(struct List *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;当前顺序表中的数据为：&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//循环遍历顺序表并打印</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i&lt;L-&gt;size; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d  &quot;</span>, L-&gt;<span class=\"built_in\">list</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot; \\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打印表中数据个数\"><a href=\"#打印表中数据个数\" class=\"headerlink\" title=\"打印表中数据个数\"></a>打印表中数据个数</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sizeList</span><span class=\"params\">(struct List *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;表中数据个数为: %d\\n &quot;</span> , L-&gt;size );</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> L-&gt;size ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除表中所有数据\"><a href=\"#清除表中所有数据\" class=\"headerlink\" title=\"清除表中所有数据\"></a>清除表中所有数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clearList</span><span class=\"params\">(struct List *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;<span class=\"built_in\">list</span> != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(L-&gt;<span class=\"built_in\">list</span> );<span class=\"comment\">//回收分配的内存</span></span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span> =<span class=\"number\">0</span>;<span class=\"comment\">//置0</span></span><br><span class=\"line\">\t\tL-&gt;size = L-&gt;maxSize = <span class=\"number\">0</span>;<span class=\"comment\">//置0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"length":4862,"excerpt":"<hr>\n<h1 id=\"顺序表描述\"><a href=\"#顺序表描述\" class=\"headerlink\" title=\"顺序表描述\"></a><strong>顺序表描述</strong></h1><p>去年学习了一些数据结构，其中最简单的就是顺序线性表。目前刚搭建好了这个平台，于是想来记录一番。</p>\n<blockquote>\n<p>顺序表是在计算机内存中以<strong>数组</strong>的形式保存的<strong>线性表</strong>，是指用一组地址连续的存储单元依次存储数据元素的线性结构。线性表采用顺序存储的方式存储就称之为顺序表。顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。</p>\n</blockquote>","more":"<h1 id=\"顺序表实现\"><a href=\"#顺序表实现\" class=\"headerlink\" title=\"顺序表实现\"></a><strong>顺序表实现</strong></h1><h2 id=\"顺序表的初始化\"><a href=\"#顺序表的初始化\" class=\"headerlink\" title=\"顺序表的初始化\"></a>顺序表的初始化</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> elemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> posType;</span><br><span class=\"line\"><span class=\"comment\">//初始化一个结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">List</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\telemType *<span class=\"built_in\">list</span>;<span class=\"comment\">//元素类型指针，类似数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size;<span class=\"comment\">//数据个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> maxSize;<span class=\"comment\">//顺序表大小</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*参数ms：初始化顺序表的大小*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initList</span><span class=\"params\">(struct List *L , <span class=\"keyword\">int</span> ms)</span><span class=\"comment\">//初始化顺序表</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ms &lt;= <span class=\"number\">0</span>)<span class=\"comment\">//参数合理性判断</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;MaxSize 非法！ &quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;maxSize = ms;</span><br><span class=\"line\">\tL-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span> = <span class=\"built_in\">malloc</span>(ms*<span class=\"keyword\">sizeof</span>(elemType));<span class=\"comment\">//分配内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!L-&gt;<span class=\"built_in\">list</span> )<span class=\"comment\">//分配内存意外情况处理</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;空间分配失败！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开辟内存\"><a href=\"#开辟内存\" class=\"headerlink\" title=\"开辟内存\"></a>开辟内存</h2><blockquote>\n<p>realloc()可以对<strong>给定的指针</strong>所指的空间进行扩大或者缩小，无论是扩张或是缩小，<code>原有内存的中内容将保持不变</code>.当然，对于缩小，则被缩小的那一部分的内容会丢失.realloc并不保证调整后的内存空间和原来的内存空间保持同一内存地址.相反，<code>realloc返回的指针很可能指向一个新的地址</code>.</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">againMalloc</span><span class=\"params\">(struct List*L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//开辟两倍于当前顺序表大小的内存</span></span><br><span class=\"line\">\telemType *p = <span class=\"built_in\">realloc</span>(L-&gt;<span class=\"built_in\">list</span> ,<span class=\"number\">2</span>*L-&gt;maxSize *<span class=\"keyword\">sizeof</span>(elemType));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;储存空间分配失败！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span> = p;</span><br><span class=\"line\">\tL-&gt;maxSize = <span class=\"number\">2</span>*L-&gt;maxSize ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入数据操作\"><a href=\"#插入数据操作\" class=\"headerlink\" title=\"插入数据操作\"></a>插入数据操作</h2><h3 id=\"从表头插入数据\"><a href=\"#从表头插入数据\" class=\"headerlink\" title=\"从表头插入数据\"></a>从表头插入数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertFirstList</span><span class=\"params\">(struct List *L, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"comment\">//判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;size == L-&gt;maxSize )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagainMalloc(L);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//把表中每个数据往后移动</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = L-&gt;size<span class=\"number\">-1</span>; i&gt;=<span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span>[i+<span class=\"number\">1</span>] = L-&gt;<span class=\"built_in\">list</span>[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span>[<span class=\"number\">0</span>] = x;<span class=\"comment\">//表头插入数据</span></span><br><span class=\"line\">\tL-&gt;size ++;<span class=\"comment\">//数据个数加1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"从表尾插入数据\"><a href=\"#从表尾插入数据\" class=\"headerlink\" title=\"从表尾插入数据\"></a>从表尾插入数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertLastList</span><span class=\"params\">(struct List *L, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;size == L-&gt;maxSize )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagainMalloc(L);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span> [L-&gt;size ] = x;<span class=\"comment\">//表尾插入数据</span></span><br><span class=\"line\">\tL-&gt;size ++;<span class=\"comment\">//数据个数加1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"从表中某个位置插入数据\"><a href=\"#从表中某个位置插入数据\" class=\"headerlink\" title=\"从表中某个位置插入数据\"></a>从表中某个位置插入数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">pos:要插入数据的位置；</span></span><br><span class=\"line\"><span class=\"comment\">x  :要插入的数据</span></span><br><span class=\"line\"><span class=\"comment\">插入成功返回1，失败返回0；</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insertPosList</span><span class=\"params\">(struct List *L,<span class=\"keyword\">int</span> pos, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt; <span class=\"number\">1</span> || pos &gt; L-&gt;size )<span class=\"comment\">//输入位置合理性判断</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//判断如果目前表中数据个数达到顺序表的最大size，则再次分配内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;size == L-&gt;maxSize )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tagainMalloc(L);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//把要插入数据的位置上数据以及之后的数据，都往后移动一个位置</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = L-&gt;size<span class=\"number\">-1</span>; i&gt;=pos<span class=\"number\">-1</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span> [i+<span class=\"number\">1</span>] = L-&gt;<span class=\"built_in\">list</span> [i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span> [pos<span class=\"number\">-1</span>] = x;<span class=\"comment\">//当前位置插入数据</span></span><br><span class=\"line\">\tL-&gt;size ++;<span class=\"comment\">//数据个数加1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//插入成功则返回1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除数据操作\"><a href=\"#删除数据操作\" class=\"headerlink\" title=\"删除数据操作\"></a>删除数据操作</h2><h3 id=\"从表头删除数据\"><a href=\"#从表头删除数据\" class=\"headerlink\" title=\"从表头删除数据\"></a>从表头删除数据</h3><p>从表头删除数据的操作即：把第一个数据之后的数据都往前移动一个位置，由此把表头的数据给顶出去</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*删除成功则返回被删除的数据*/</span></span><br><span class=\"line\"><span class=\"function\">elemType <span class=\"title\">deleteFirstList</span><span class=\"params\">(struct List *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\telemType temp;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;size == <span class=\"number\">0</span>)<span class=\"comment\">//合理性判断</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;线性表为空，不能进行删除操作！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemp = L-&gt;<span class=\"built_in\">list</span> [<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//把第一个数据之后的数据都往前移动一个位置</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span> ; i &lt; L-&gt;size ; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span> [i<span class=\"number\">-1</span>] = L-&gt;<span class=\"built_in\">list</span> [i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;size --;<span class=\"comment\">//数据个数-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"从表尾删除数据\"><a href=\"#从表尾删除数据\" class=\"headerlink\" title=\"从表尾删除数据\"></a>从表尾删除数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*删除成功则返回被删除的数据*/</span></span><br><span class=\"line\"><span class=\"function\">elemType <span class=\"title\">deleteLastList</span><span class=\"params\">(struct List *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\telemType temp;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;size == <span class=\"number\">0</span>)<span class=\"comment\">//合理性判断</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;线性表为空，不能进行删除操作！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemp = L-&gt;<span class=\"built_in\">list</span>[L-&gt;size ];<span class=\"comment\">//删除表尾数据</span></span><br><span class=\"line\">\tL-&gt;size --;<span class=\"comment\">//数据个数-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除表中某个位置的数据\"><a href=\"#删除表中某个位置的数据\" class=\"headerlink\" title=\"删除表中某个位置的数据\"></a>删除表中某个位置的数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">pos：要删除数据的位置</span></span><br><span class=\"line\"><span class=\"comment\">说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">elemType <span class=\"title\">deletePosList</span><span class=\"params\">(struct List *L, <span class=\"keyword\">int</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\telemType temp;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt; <span class=\"number\">1</span> || pos &gt; L-&gt;size )<span class=\"comment\">//合理性判断</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pos越界，不能进行删除操作！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//把pos之后的所有数据都往前移动一个位置，由此把pos上的数据踢掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = pos<span class=\"number\">-1</span>; i &lt; L-&gt;size; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span>[i] = L-&gt;<span class=\"built_in\">list</span> [i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemp = L-&gt;<span class=\"built_in\">list</span> [pos<span class=\"number\">-1</span>];</span><br><span class=\"line\">\tL-&gt;size --;<span class=\"comment\">//数据个数-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;<span class=\"comment\">//返回删除的数据\t</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除表中具体值的数据\"><a href=\"#删除表中具体值的数据\" class=\"headerlink\" title=\"删除表中具体值的数据\"></a>删除表中具体值的数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">x：要删除的数据</span></span><br><span class=\"line\"><span class=\"comment\">删除成功返回1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">deleteValueList</span><span class=\"params\">(struct List *L, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历顺序表，找出与x相等的数据所在的位置i</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; L-&gt;size; i++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(L-&gt;<span class=\"built_in\">list</span> [i] == x)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//合理性判断</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i == L-&gt;size )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//把i之后的每个数据往前移动一个位置，由此把i上的数据踢掉</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(j = i+<span class=\"number\">1</span>; j &lt; L-&gt;size ; j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span> [j<span class=\"number\">-1</span>] = L-&gt;<span class=\"built_in\">list</span> [j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;size --;<span class=\"comment\">//数据个数-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;<span class=\"comment\">//删除成功返回1</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"单个数据操作\"><a href=\"#单个数据操作\" class=\"headerlink\" title=\"单个数据操作\"></a>单个数据操作</h2><h3 id=\"替某个位置的换数据\"><a href=\"#替某个位置的换数据\" class=\"headerlink\" title=\"替某个位置的换数据\"></a>替某个位置的换数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">把第pos个的数据替换成x</span></span><br><span class=\"line\"><span class=\"comment\">替换成功返回1，否则返回0</span></span><br><span class=\"line\"><span class=\"comment\">说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updatePosList</span><span class=\"params\">(struct List *L, <span class=\"keyword\">int</span> pos, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//合理性判断处理</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt; <span class=\"number\">1</span> || pos &gt; L-&gt;size )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tL-&gt;<span class=\"built_in\">list</span>[pos<span class=\"number\">-1</span>] = x;<span class=\"comment\">//替换第pos个数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取数据位置\"><a href=\"#获取数据位置\" class=\"headerlink\" title=\"获取数据位置\"></a>获取数据位置</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">返回数据x所在的位置，失败返回0</span></span><br><span class=\"line\"><span class=\"comment\">说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findList</span><span class=\"params\">(struct List *L, elemType x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; L-&gt;size ; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(L-&gt;<span class=\"built_in\">list</span>[i] == x)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取相应位置的数据\"><a href=\"#获取相应位置的数据\" class=\"headerlink\" title=\"获取相应位置的数据\"></a>获取相应位置的数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">返回第pos个数据，失败退出</span></span><br><span class=\"line\"><span class=\"comment\">说明：此位置已经转换成我们日常所习惯的位置，从1开始，而不是0开始</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\">elemType <span class=\"title\">getElem</span><span class=\"params\">(struct List *L, <span class=\"keyword\">int</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\telemType temp;</span><br><span class=\"line\">\t<span class=\"comment\">//合理性判断处理</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos&lt;<span class=\"number\">1</span> || pos &gt; L-&gt;size )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;元素序号越界！&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttemp = L-&gt;<span class=\"built_in\">list</span> [pos<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"整个顺序表操作\"><a href=\"#整个顺序表操作\" class=\"headerlink\" title=\"整个顺序表操作\"></a>整个顺序表操作</h2><h3 id=\"遍历顺序表（打印表中所有数据）\"><a href=\"#遍历顺序表（打印表中所有数据）\" class=\"headerlink\" title=\"遍历顺序表（打印表中所有数据）\"></a>遍历顺序表（打印表中所有数据）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverseList</span><span class=\"params\">(struct List *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;当前顺序表中的数据为：&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//循环遍历顺序表并打印</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i&lt;L-&gt;size; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d  &quot;</span>, L-&gt;<span class=\"built_in\">list</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot; \\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打印表中数据个数\"><a href=\"#打印表中数据个数\" class=\"headerlink\" title=\"打印表中数据个数\"></a>打印表中数据个数</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sizeList</span><span class=\"params\">(struct List *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;表中数据个数为: %d\\n &quot;</span> , L-&gt;size );</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> L-&gt;size ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除表中所有数据\"><a href=\"#清除表中所有数据\" class=\"headerlink\" title=\"清除表中所有数据\"></a>清除表中所有数据</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clearList</span><span class=\"params\">(struct List *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L-&gt;<span class=\"built_in\">list</span> != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(L-&gt;<span class=\"built_in\">list</span> );<span class=\"comment\">//回收分配的内存</span></span><br><span class=\"line\">\t\tL-&gt;<span class=\"built_in\">list</span> =<span class=\"number\">0</span>;<span class=\"comment\">//置0</span></span><br><span class=\"line\">\t\tL-&gt;size = L-&gt;maxSize = <span class=\"number\">0</span>;<span class=\"comment\">//置0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><blockquote>\n<ul>\n<li>博客：<a href=\"www.fumasterlin.com\">fumasterlin.com</a></li>\n<li>邮箱：<a href=\"fumasterlin@163.com\">fumasterlin@163.com</a></li>\n</ul>\n</blockquote>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckk2mzabn00013clw6b0p6xpl","tag_id":"ckk2mzabr00043clw1rk8g8wa","_id":"ckk2mzabw000a3clw0eicgyn3"},{"post_id":"ckk2mzabq00033clwgl1rhqys","tag_id":"ckk2mzabr00043clw1rk8g8wa","_id":"ckk2mzaby000e3clw28gn41gw"},{"post_id":"ckk2mzabs00063clwacajhegl","tag_id":"ckk2mzabx000d3clw3lqn757c","_id":"ckk2mzac0000j3clw0hue42wq"},{"post_id":"ckk2mzabz000i3clw65axcqqt","tag_id":"ckk2mzabx000d3clw3lqn757c","_id":"ckk2mzac1000m3clwc22c9git"},{"post_id":"ckk2mzabt00073clw3ias47y7","tag_id":"ckk2mzabz000h3clwh5zl764c","_id":"ckk2mzac2000o3clw84kd8g2e"},{"post_id":"ckk2mzac1000n3clw8k7a6sr2","tag_id":"ckk2mzabr00043clw1rk8g8wa","_id":"ckk2mzac3000q3clwhgwxb920"},{"post_id":"ckk2mzabw000b3clw0mbl733u","tag_id":"ckk2mzac1000l3clw335l8zy6","_id":"ckk2mzac4000t3clw07c0doxm"},{"post_id":"ckk2mzac2000p3clw60j11v8k","tag_id":"ckk2mzac1000l3clw335l8zy6","_id":"ckk2mzac4000u3clw9x4c2y9n"},{"post_id":"ckk2mzac3000s3clwf55fh4a1","tag_id":"ckk2mzabz000h3clwh5zl764c","_id":"ckk2mzac5000w3clwfnt4g8lf"},{"post_id":"ckk2mzabx000c3clwfpgiaubt","tag_id":"ckk2mzac3000r3clwh8pah6eo","_id":"ckk2mzac5000x3clwhmmw8xmi"},{"post_id":"ckk2mzaby000f3clw1lrac4cj","tag_id":"ckk2mzac3000r3clwh8pah6eo","_id":"ckk2mzac5000z3clw9d6dazbt"},{"post_id":"ckk2mzaby000g3clwcay98h1o","tag_id":"ckk2mzac3000r3clwh8pah6eo","_id":"ckk2mzac500113clwfagadc1z"},{"post_id":"ckk2mzac0000k3clw5yh5gwn0","tag_id":"ckk2mzac3000r3clwh8pah6eo","_id":"ckk2mzac600123clw8u2l5pn5"}],"Tag":[{"name":"C语言","_id":"ckk2mzabr00043clw1rk8g8wa"},{"name":"清新之比","_id":"ckk2mzabx000d3clw3lqn757c"},{"name":"数据结构","_id":"ckk2mzabz000h3clwh5zl764c"},{"name":"C/C++","_id":"ckk2mzac1000l3clw335l8zy6"},{"name":"算法","_id":"ckk2mzac3000r3clwh8pah6eo"}]}}